
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a558  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800a614  0800a614  0000b614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8f0  0800a8f0  0000c0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8f0  0800a8f0  0000b8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8f8  0800a8f8  0000c0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f8  0800a8f8  0000b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8fc  0800a8fc  0000b8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800a900  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200000c0  0800a9c0  0000c0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800a9c0  0000c58c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e9c  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cbb  00000000  00000000  00021f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00024c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6d  00000000  00000000  00025fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c1  00000000  00000000  00026f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017444  00000000  00000000  0004070e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adea4  00000000  00000000  00057b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001059f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fdc  00000000  00000000  00105a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0010aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000c0 	.word	0x200000c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a5fc 	.word	0x0800a5fc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000c4 	.word	0x200000c4
 8000100:	0800a5fc 	.word	0x0800a5fc

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	@ (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	@ (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f81e 	bl	8000498 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f001 fe7e 	bl	8002170 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fb9d 	bl	8000bb8 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 f9f3 	bl	8000870 <__aeabi_fsub>
 800048a:	f000 fb95 	bl	8000bb8 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f001 fe82 	bl	80021c0 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f001 fe7d 	bl	80021c0 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	d434      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004ce:	469b      	mov	fp, r3
 80004d0:	4653      	mov	r3, sl
 80004d2:	465a      	mov	r2, fp
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83b      	bhi.n	800055c <__udivmoddi4+0xc4>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e079      	b.n	80005de <__udivmoddi4+0x146>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e076      	b.n	80005e4 <__udivmoddi4+0x14c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e029      	b.n	8000564 <__udivmoddi4+0xcc>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	469b      	mov	fp, r3
 800053c:	2320      	movs	r3, #32
 800053e:	1a9b      	subs	r3, r3, r2
 8000540:	4652      	mov	r2, sl
 8000542:	40da      	lsrs	r2, r3
 8000544:	4641      	mov	r1, r8
 8000546:	0013      	movs	r3, r2
 8000548:	464a      	mov	r2, r9
 800054a:	408a      	lsls	r2, r1
 800054c:	0017      	movs	r7, r2
 800054e:	4642      	mov	r2, r8
 8000550:	431f      	orrs	r7, r3
 8000552:	4653      	mov	r3, sl
 8000554:	4093      	lsls	r3, r2
 8000556:	001e      	movs	r6, r3
 8000558:	42af      	cmp	r7, r5
 800055a:	d9c3      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	4643      	mov	r3, r8
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0d8      	beq.n	800051c <__udivmoddi4+0x84>
 800056a:	07fb      	lsls	r3, r7, #31
 800056c:	0872      	lsrs	r2, r6, #1
 800056e:	431a      	orrs	r2, r3
 8000570:	4646      	mov	r6, r8
 8000572:	087b      	lsrs	r3, r7, #1
 8000574:	e00e      	b.n	8000594 <__udivmoddi4+0xfc>
 8000576:	42ab      	cmp	r3, r5
 8000578:	d101      	bne.n	800057e <__udivmoddi4+0xe6>
 800057a:	42a2      	cmp	r2, r4
 800057c:	d80c      	bhi.n	8000598 <__udivmoddi4+0x100>
 800057e:	1aa4      	subs	r4, r4, r2
 8000580:	419d      	sbcs	r5, r3
 8000582:	2001      	movs	r0, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2100      	movs	r1, #0
 800058a:	3e01      	subs	r6, #1
 800058c:	1824      	adds	r4, r4, r0
 800058e:	414d      	adcs	r5, r1
 8000590:	2e00      	cmp	r6, #0
 8000592:	d006      	beq.n	80005a2 <__udivmoddi4+0x10a>
 8000594:	42ab      	cmp	r3, r5
 8000596:	d9ee      	bls.n	8000576 <__udivmoddi4+0xde>
 8000598:	3e01      	subs	r6, #1
 800059a:	1924      	adds	r4, r4, r4
 800059c:	416d      	adcs	r5, r5
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d1f8      	bne.n	8000594 <__udivmoddi4+0xfc>
 80005a2:	9800      	ldr	r0, [sp, #0]
 80005a4:	9901      	ldr	r1, [sp, #4]
 80005a6:	465b      	mov	r3, fp
 80005a8:	1900      	adds	r0, r0, r4
 80005aa:	4169      	adcs	r1, r5
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db24      	blt.n	80005fa <__udivmoddi4+0x162>
 80005b0:	002b      	movs	r3, r5
 80005b2:	465a      	mov	r2, fp
 80005b4:	4644      	mov	r4, r8
 80005b6:	40d3      	lsrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db2a      	blt.n	800061c <__udivmoddi4+0x184>
 80005c6:	0026      	movs	r6, r4
 80005c8:	409e      	lsls	r6, r3
 80005ca:	0033      	movs	r3, r6
 80005cc:	0026      	movs	r6, r4
 80005ce:	4647      	mov	r7, r8
 80005d0:	40be      	lsls	r6, r7
 80005d2:	0032      	movs	r2, r6
 80005d4:	1a80      	subs	r0, r0, r2
 80005d6:	4199      	sbcs	r1, r3
 80005d8:	9000      	str	r0, [sp, #0]
 80005da:	9101      	str	r1, [sp, #4]
 80005dc:	e79e      	b.n	800051c <__udivmoddi4+0x84>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d8bc      	bhi.n	800055c <__udivmoddi4+0xc4>
 80005e2:	e782      	b.n	80004ea <__udivmoddi4+0x52>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	2100      	movs	r1, #0
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	2200      	movs	r2, #0
 80005ee:	9100      	str	r1, [sp, #0]
 80005f0:	9201      	str	r2, [sp, #4]
 80005f2:	2201      	movs	r2, #1
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	e785      	b.n	8000506 <__udivmoddi4+0x6e>
 80005fa:	4642      	mov	r2, r8
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	002a      	movs	r2, r5
 8000602:	4646      	mov	r6, r8
 8000604:	409a      	lsls	r2, r3
 8000606:	0023      	movs	r3, r4
 8000608:	40f3      	lsrs	r3, r6
 800060a:	4644      	mov	r4, r8
 800060c:	4313      	orrs	r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	40e2      	lsrs	r2, r4
 8000612:	001c      	movs	r4, r3
 8000614:	465b      	mov	r3, fp
 8000616:	0015      	movs	r5, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	dad4      	bge.n	80005c6 <__udivmoddi4+0x12e>
 800061c:	4642      	mov	r2, r8
 800061e:	002f      	movs	r7, r5
 8000620:	2320      	movs	r3, #32
 8000622:	0026      	movs	r6, r4
 8000624:	4097      	lsls	r7, r2
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	40de      	lsrs	r6, r3
 800062a:	003b      	movs	r3, r7
 800062c:	4333      	orrs	r3, r6
 800062e:	e7cd      	b.n	80005cc <__udivmoddi4+0x134>

08000630 <__aeabi_fdiv>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	464f      	mov	r7, r9
 8000634:	4646      	mov	r6, r8
 8000636:	46d6      	mov	lr, sl
 8000638:	0244      	lsls	r4, r0, #9
 800063a:	b5c0      	push	{r6, r7, lr}
 800063c:	0047      	lsls	r7, r0, #1
 800063e:	1c0e      	adds	r6, r1, #0
 8000640:	0a64      	lsrs	r4, r4, #9
 8000642:	0e3f      	lsrs	r7, r7, #24
 8000644:	0fc5      	lsrs	r5, r0, #31
 8000646:	2f00      	cmp	r7, #0
 8000648:	d03c      	beq.n	80006c4 <__aeabi_fdiv+0x94>
 800064a:	2fff      	cmp	r7, #255	@ 0xff
 800064c:	d042      	beq.n	80006d4 <__aeabi_fdiv+0xa4>
 800064e:	2300      	movs	r3, #0
 8000650:	2280      	movs	r2, #128	@ 0x80
 8000652:	4699      	mov	r9, r3
 8000654:	469a      	mov	sl, r3
 8000656:	00e4      	lsls	r4, r4, #3
 8000658:	04d2      	lsls	r2, r2, #19
 800065a:	4314      	orrs	r4, r2
 800065c:	3f7f      	subs	r7, #127	@ 0x7f
 800065e:	0273      	lsls	r3, r6, #9
 8000660:	0a5b      	lsrs	r3, r3, #9
 8000662:	4698      	mov	r8, r3
 8000664:	0073      	lsls	r3, r6, #1
 8000666:	0e1b      	lsrs	r3, r3, #24
 8000668:	0ff6      	lsrs	r6, r6, #31
 800066a:	2b00      	cmp	r3, #0
 800066c:	d01b      	beq.n	80006a6 <__aeabi_fdiv+0x76>
 800066e:	2bff      	cmp	r3, #255	@ 0xff
 8000670:	d013      	beq.n	800069a <__aeabi_fdiv+0x6a>
 8000672:	4642      	mov	r2, r8
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	00d2      	lsls	r2, r2, #3
 8000678:	04c9      	lsls	r1, r1, #19
 800067a:	4311      	orrs	r1, r2
 800067c:	4688      	mov	r8, r1
 800067e:	2000      	movs	r0, #0
 8000680:	3b7f      	subs	r3, #127	@ 0x7f
 8000682:	0029      	movs	r1, r5
 8000684:	1aff      	subs	r7, r7, r3
 8000686:	464b      	mov	r3, r9
 8000688:	4071      	eors	r1, r6
 800068a:	b2c9      	uxtb	r1, r1
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d900      	bls.n	8000692 <__aeabi_fdiv+0x62>
 8000690:	e0b5      	b.n	80007fe <__aeabi_fdiv+0x1ce>
 8000692:	4a74      	ldr	r2, [pc, #464]	@ (8000864 <__aeabi_fdiv+0x234>)
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	58d3      	ldr	r3, [r2, r3]
 8000698:	469f      	mov	pc, r3
 800069a:	4643      	mov	r3, r8
 800069c:	2b00      	cmp	r3, #0
 800069e:	d13f      	bne.n	8000720 <__aeabi_fdiv+0xf0>
 80006a0:	3fff      	subs	r7, #255	@ 0xff
 80006a2:	3302      	adds	r3, #2
 80006a4:	e003      	b.n	80006ae <__aeabi_fdiv+0x7e>
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d12d      	bne.n	8000708 <__aeabi_fdiv+0xd8>
 80006ac:	2301      	movs	r3, #1
 80006ae:	0029      	movs	r1, r5
 80006b0:	464a      	mov	r2, r9
 80006b2:	4071      	eors	r1, r6
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	431a      	orrs	r2, r3
 80006b8:	2a0e      	cmp	r2, #14
 80006ba:	d838      	bhi.n	800072e <__aeabi_fdiv+0xfe>
 80006bc:	486a      	ldr	r0, [pc, #424]	@ (8000868 <__aeabi_fdiv+0x238>)
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	5882      	ldr	r2, [r0, r2]
 80006c2:	4697      	mov	pc, r2
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d113      	bne.n	80006f0 <__aeabi_fdiv+0xc0>
 80006c8:	2304      	movs	r3, #4
 80006ca:	4699      	mov	r9, r3
 80006cc:	3b03      	subs	r3, #3
 80006ce:	2700      	movs	r7, #0
 80006d0:	469a      	mov	sl, r3
 80006d2:	e7c4      	b.n	800065e <__aeabi_fdiv+0x2e>
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	d105      	bne.n	80006e4 <__aeabi_fdiv+0xb4>
 80006d8:	2308      	movs	r3, #8
 80006da:	4699      	mov	r9, r3
 80006dc:	3b06      	subs	r3, #6
 80006de:	27ff      	movs	r7, #255	@ 0xff
 80006e0:	469a      	mov	sl, r3
 80006e2:	e7bc      	b.n	800065e <__aeabi_fdiv+0x2e>
 80006e4:	230c      	movs	r3, #12
 80006e6:	4699      	mov	r9, r3
 80006e8:	3b09      	subs	r3, #9
 80006ea:	27ff      	movs	r7, #255	@ 0xff
 80006ec:	469a      	mov	sl, r3
 80006ee:	e7b6      	b.n	800065e <__aeabi_fdiv+0x2e>
 80006f0:	0020      	movs	r0, r4
 80006f2:	f001 fd47 	bl	8002184 <__clzsi2>
 80006f6:	2776      	movs	r7, #118	@ 0x76
 80006f8:	1f43      	subs	r3, r0, #5
 80006fa:	409c      	lsls	r4, r3
 80006fc:	2300      	movs	r3, #0
 80006fe:	427f      	negs	r7, r7
 8000700:	4699      	mov	r9, r3
 8000702:	469a      	mov	sl, r3
 8000704:	1a3f      	subs	r7, r7, r0
 8000706:	e7aa      	b.n	800065e <__aeabi_fdiv+0x2e>
 8000708:	4640      	mov	r0, r8
 800070a:	f001 fd3b 	bl	8002184 <__clzsi2>
 800070e:	4642      	mov	r2, r8
 8000710:	1f43      	subs	r3, r0, #5
 8000712:	409a      	lsls	r2, r3
 8000714:	2376      	movs	r3, #118	@ 0x76
 8000716:	425b      	negs	r3, r3
 8000718:	1a1b      	subs	r3, r3, r0
 800071a:	4690      	mov	r8, r2
 800071c:	2000      	movs	r0, #0
 800071e:	e7b0      	b.n	8000682 <__aeabi_fdiv+0x52>
 8000720:	2303      	movs	r3, #3
 8000722:	464a      	mov	r2, r9
 8000724:	431a      	orrs	r2, r3
 8000726:	4691      	mov	r9, r2
 8000728:	2003      	movs	r0, #3
 800072a:	33fc      	adds	r3, #252	@ 0xfc
 800072c:	e7a9      	b.n	8000682 <__aeabi_fdiv+0x52>
 800072e:	000d      	movs	r5, r1
 8000730:	20ff      	movs	r0, #255	@ 0xff
 8000732:	2200      	movs	r2, #0
 8000734:	05c0      	lsls	r0, r0, #23
 8000736:	07ed      	lsls	r5, r5, #31
 8000738:	4310      	orrs	r0, r2
 800073a:	4328      	orrs	r0, r5
 800073c:	bce0      	pop	{r5, r6, r7}
 800073e:	46ba      	mov	sl, r7
 8000740:	46b1      	mov	r9, r6
 8000742:	46a8      	mov	r8, r5
 8000744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000746:	000d      	movs	r5, r1
 8000748:	2000      	movs	r0, #0
 800074a:	2200      	movs	r2, #0
 800074c:	e7f2      	b.n	8000734 <__aeabi_fdiv+0x104>
 800074e:	4653      	mov	r3, sl
 8000750:	2b02      	cmp	r3, #2
 8000752:	d0ed      	beq.n	8000730 <__aeabi_fdiv+0x100>
 8000754:	2b03      	cmp	r3, #3
 8000756:	d033      	beq.n	80007c0 <__aeabi_fdiv+0x190>
 8000758:	46a0      	mov	r8, r4
 800075a:	2b01      	cmp	r3, #1
 800075c:	d105      	bne.n	800076a <__aeabi_fdiv+0x13a>
 800075e:	2000      	movs	r0, #0
 8000760:	2200      	movs	r2, #0
 8000762:	e7e7      	b.n	8000734 <__aeabi_fdiv+0x104>
 8000764:	0035      	movs	r5, r6
 8000766:	2803      	cmp	r0, #3
 8000768:	d07a      	beq.n	8000860 <__aeabi_fdiv+0x230>
 800076a:	003b      	movs	r3, r7
 800076c:	337f      	adds	r3, #127	@ 0x7f
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd2d      	ble.n	80007ce <__aeabi_fdiv+0x19e>
 8000772:	4642      	mov	r2, r8
 8000774:	0752      	lsls	r2, r2, #29
 8000776:	d007      	beq.n	8000788 <__aeabi_fdiv+0x158>
 8000778:	220f      	movs	r2, #15
 800077a:	4641      	mov	r1, r8
 800077c:	400a      	ands	r2, r1
 800077e:	2a04      	cmp	r2, #4
 8000780:	d002      	beq.n	8000788 <__aeabi_fdiv+0x158>
 8000782:	2204      	movs	r2, #4
 8000784:	4694      	mov	ip, r2
 8000786:	44e0      	add	r8, ip
 8000788:	4642      	mov	r2, r8
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	d505      	bpl.n	800079a <__aeabi_fdiv+0x16a>
 800078e:	4642      	mov	r2, r8
 8000790:	4b36      	ldr	r3, [pc, #216]	@ (800086c <__aeabi_fdiv+0x23c>)
 8000792:	401a      	ands	r2, r3
 8000794:	003b      	movs	r3, r7
 8000796:	4690      	mov	r8, r2
 8000798:	3380      	adds	r3, #128	@ 0x80
 800079a:	2bfe      	cmp	r3, #254	@ 0xfe
 800079c:	dcc8      	bgt.n	8000730 <__aeabi_fdiv+0x100>
 800079e:	4642      	mov	r2, r8
 80007a0:	0192      	lsls	r2, r2, #6
 80007a2:	0a52      	lsrs	r2, r2, #9
 80007a4:	b2d8      	uxtb	r0, r3
 80007a6:	e7c5      	b.n	8000734 <__aeabi_fdiv+0x104>
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	2500      	movs	r5, #0
 80007ac:	20ff      	movs	r0, #255	@ 0xff
 80007ae:	03d2      	lsls	r2, r2, #15
 80007b0:	e7c0      	b.n	8000734 <__aeabi_fdiv+0x104>
 80007b2:	2280      	movs	r2, #128	@ 0x80
 80007b4:	03d2      	lsls	r2, r2, #15
 80007b6:	4214      	tst	r4, r2
 80007b8:	d002      	beq.n	80007c0 <__aeabi_fdiv+0x190>
 80007ba:	4643      	mov	r3, r8
 80007bc:	4213      	tst	r3, r2
 80007be:	d049      	beq.n	8000854 <__aeabi_fdiv+0x224>
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	03d2      	lsls	r2, r2, #15
 80007c4:	4322      	orrs	r2, r4
 80007c6:	0252      	lsls	r2, r2, #9
 80007c8:	20ff      	movs	r0, #255	@ 0xff
 80007ca:	0a52      	lsrs	r2, r2, #9
 80007cc:	e7b2      	b.n	8000734 <__aeabi_fdiv+0x104>
 80007ce:	2201      	movs	r2, #1
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	2b1b      	cmp	r3, #27
 80007d4:	dcc3      	bgt.n	800075e <__aeabi_fdiv+0x12e>
 80007d6:	4642      	mov	r2, r8
 80007d8:	40da      	lsrs	r2, r3
 80007da:	4643      	mov	r3, r8
 80007dc:	379e      	adds	r7, #158	@ 0x9e
 80007de:	40bb      	lsls	r3, r7
 80007e0:	1e59      	subs	r1, r3, #1
 80007e2:	418b      	sbcs	r3, r1
 80007e4:	431a      	orrs	r2, r3
 80007e6:	0753      	lsls	r3, r2, #29
 80007e8:	d004      	beq.n	80007f4 <__aeabi_fdiv+0x1c4>
 80007ea:	230f      	movs	r3, #15
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fdiv+0x1c4>
 80007f2:	3204      	adds	r2, #4
 80007f4:	0153      	lsls	r3, r2, #5
 80007f6:	d529      	bpl.n	800084c <__aeabi_fdiv+0x21c>
 80007f8:	2001      	movs	r0, #1
 80007fa:	2200      	movs	r2, #0
 80007fc:	e79a      	b.n	8000734 <__aeabi_fdiv+0x104>
 80007fe:	4642      	mov	r2, r8
 8000800:	0163      	lsls	r3, r4, #5
 8000802:	0155      	lsls	r5, r2, #5
 8000804:	42ab      	cmp	r3, r5
 8000806:	d215      	bcs.n	8000834 <__aeabi_fdiv+0x204>
 8000808:	201b      	movs	r0, #27
 800080a:	2200      	movs	r2, #0
 800080c:	3f01      	subs	r7, #1
 800080e:	2601      	movs	r6, #1
 8000810:	001c      	movs	r4, r3
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2c00      	cmp	r4, #0
 8000818:	db01      	blt.n	800081e <__aeabi_fdiv+0x1ee>
 800081a:	429d      	cmp	r5, r3
 800081c:	d801      	bhi.n	8000822 <__aeabi_fdiv+0x1f2>
 800081e:	1b5b      	subs	r3, r3, r5
 8000820:	4332      	orrs	r2, r6
 8000822:	3801      	subs	r0, #1
 8000824:	2800      	cmp	r0, #0
 8000826:	d1f3      	bne.n	8000810 <__aeabi_fdiv+0x1e0>
 8000828:	1e58      	subs	r0, r3, #1
 800082a:	4183      	sbcs	r3, r0
 800082c:	4313      	orrs	r3, r2
 800082e:	4698      	mov	r8, r3
 8000830:	000d      	movs	r5, r1
 8000832:	e79a      	b.n	800076a <__aeabi_fdiv+0x13a>
 8000834:	201a      	movs	r0, #26
 8000836:	2201      	movs	r2, #1
 8000838:	1b5b      	subs	r3, r3, r5
 800083a:	e7e8      	b.n	800080e <__aeabi_fdiv+0x1de>
 800083c:	3b02      	subs	r3, #2
 800083e:	425a      	negs	r2, r3
 8000840:	4153      	adcs	r3, r2
 8000842:	425b      	negs	r3, r3
 8000844:	0035      	movs	r5, r6
 8000846:	2200      	movs	r2, #0
 8000848:	b2d8      	uxtb	r0, r3
 800084a:	e773      	b.n	8000734 <__aeabi_fdiv+0x104>
 800084c:	0192      	lsls	r2, r2, #6
 800084e:	2000      	movs	r0, #0
 8000850:	0a52      	lsrs	r2, r2, #9
 8000852:	e76f      	b.n	8000734 <__aeabi_fdiv+0x104>
 8000854:	431a      	orrs	r2, r3
 8000856:	0252      	lsls	r2, r2, #9
 8000858:	0035      	movs	r5, r6
 800085a:	20ff      	movs	r0, #255	@ 0xff
 800085c:	0a52      	lsrs	r2, r2, #9
 800085e:	e769      	b.n	8000734 <__aeabi_fdiv+0x104>
 8000860:	4644      	mov	r4, r8
 8000862:	e7ad      	b.n	80007c0 <__aeabi_fdiv+0x190>
 8000864:	0800a778 	.word	0x0800a778
 8000868:	0800a7b8 	.word	0x0800a7b8
 800086c:	f7ffffff 	.word	0xf7ffffff

08000870 <__aeabi_fsub>:
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000872:	4647      	mov	r7, r8
 8000874:	46ce      	mov	lr, r9
 8000876:	024e      	lsls	r6, r1, #9
 8000878:	0243      	lsls	r3, r0, #9
 800087a:	0045      	lsls	r5, r0, #1
 800087c:	0a72      	lsrs	r2, r6, #9
 800087e:	0fc4      	lsrs	r4, r0, #31
 8000880:	0048      	lsls	r0, r1, #1
 8000882:	b580      	push	{r7, lr}
 8000884:	4694      	mov	ip, r2
 8000886:	0a5f      	lsrs	r7, r3, #9
 8000888:	0e2d      	lsrs	r5, r5, #24
 800088a:	099b      	lsrs	r3, r3, #6
 800088c:	0e00      	lsrs	r0, r0, #24
 800088e:	0fc9      	lsrs	r1, r1, #31
 8000890:	09b6      	lsrs	r6, r6, #6
 8000892:	28ff      	cmp	r0, #255	@ 0xff
 8000894:	d024      	beq.n	80008e0 <__aeabi_fsub+0x70>
 8000896:	2201      	movs	r2, #1
 8000898:	4051      	eors	r1, r2
 800089a:	1a2a      	subs	r2, r5, r0
 800089c:	428c      	cmp	r4, r1
 800089e:	d00f      	beq.n	80008c0 <__aeabi_fsub+0x50>
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	dc00      	bgt.n	80008a6 <__aeabi_fsub+0x36>
 80008a4:	e16a      	b.n	8000b7c <__aeabi_fsub+0x30c>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d135      	bne.n	8000916 <__aeabi_fsub+0xa6>
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fsub+0x40>
 80008ae:	e0a2      	b.n	80009f6 <__aeabi_fsub+0x186>
 80008b0:	1e51      	subs	r1, r2, #1
 80008b2:	2a01      	cmp	r2, #1
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fsub+0x48>
 80008b6:	e124      	b.n	8000b02 <__aeabi_fsub+0x292>
 80008b8:	2aff      	cmp	r2, #255	@ 0xff
 80008ba:	d021      	beq.n	8000900 <__aeabi_fsub+0x90>
 80008bc:	000a      	movs	r2, r1
 80008be:	e02f      	b.n	8000920 <__aeabi_fsub+0xb0>
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	dc00      	bgt.n	80008c6 <__aeabi_fsub+0x56>
 80008c4:	e167      	b.n	8000b96 <__aeabi_fsub+0x326>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d05e      	beq.n	8000988 <__aeabi_fsub+0x118>
 80008ca:	2dff      	cmp	r5, #255	@ 0xff
 80008cc:	d018      	beq.n	8000900 <__aeabi_fsub+0x90>
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	04c9      	lsls	r1, r1, #19
 80008d2:	430e      	orrs	r6, r1
 80008d4:	2a1b      	cmp	r2, #27
 80008d6:	dc00      	bgt.n	80008da <__aeabi_fsub+0x6a>
 80008d8:	e076      	b.n	80009c8 <__aeabi_fsub+0x158>
 80008da:	002a      	movs	r2, r5
 80008dc:	3301      	adds	r3, #1
 80008de:	e032      	b.n	8000946 <__aeabi_fsub+0xd6>
 80008e0:	002a      	movs	r2, r5
 80008e2:	3aff      	subs	r2, #255	@ 0xff
 80008e4:	4691      	mov	r9, r2
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d042      	beq.n	8000970 <__aeabi_fsub+0x100>
 80008ea:	428c      	cmp	r4, r1
 80008ec:	d055      	beq.n	800099a <__aeabi_fsub+0x12a>
 80008ee:	464a      	mov	r2, r9
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fsub+0x86>
 80008f4:	e09c      	b.n	8000a30 <__aeabi_fsub+0x1c0>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_fsub+0x8c>
 80008fa:	e077      	b.n	80009ec <__aeabi_fsub+0x17c>
 80008fc:	000c      	movs	r4, r1
 80008fe:	0033      	movs	r3, r6
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fsub+0x98>
 8000906:	e06e      	b.n	80009e6 <__aeabi_fsub+0x176>
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	03d2      	lsls	r2, r2, #15
 800090c:	4313      	orrs	r3, r2
 800090e:	025b      	lsls	r3, r3, #9
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	0a5b      	lsrs	r3, r3, #9
 8000914:	e024      	b.n	8000960 <__aeabi_fsub+0xf0>
 8000916:	2dff      	cmp	r5, #255	@ 0xff
 8000918:	d0f2      	beq.n	8000900 <__aeabi_fsub+0x90>
 800091a:	2180      	movs	r1, #128	@ 0x80
 800091c:	04c9      	lsls	r1, r1, #19
 800091e:	430e      	orrs	r6, r1
 8000920:	2101      	movs	r1, #1
 8000922:	2a1b      	cmp	r2, #27
 8000924:	dc08      	bgt.n	8000938 <__aeabi_fsub+0xc8>
 8000926:	0031      	movs	r1, r6
 8000928:	2020      	movs	r0, #32
 800092a:	40d1      	lsrs	r1, r2
 800092c:	1a82      	subs	r2, r0, r2
 800092e:	4096      	lsls	r6, r2
 8000930:	0032      	movs	r2, r6
 8000932:	1e50      	subs	r0, r2, #1
 8000934:	4182      	sbcs	r2, r0
 8000936:	4311      	orrs	r1, r2
 8000938:	1a5b      	subs	r3, r3, r1
 800093a:	015a      	lsls	r2, r3, #5
 800093c:	d460      	bmi.n	8000a00 <__aeabi_fsub+0x190>
 800093e:	2107      	movs	r1, #7
 8000940:	002a      	movs	r2, r5
 8000942:	4019      	ands	r1, r3
 8000944:	d057      	beq.n	80009f6 <__aeabi_fsub+0x186>
 8000946:	210f      	movs	r1, #15
 8000948:	4019      	ands	r1, r3
 800094a:	2904      	cmp	r1, #4
 800094c:	d000      	beq.n	8000950 <__aeabi_fsub+0xe0>
 800094e:	3304      	adds	r3, #4
 8000950:	0159      	lsls	r1, r3, #5
 8000952:	d550      	bpl.n	80009f6 <__aeabi_fsub+0x186>
 8000954:	1c50      	adds	r0, r2, #1
 8000956:	2afe      	cmp	r2, #254	@ 0xfe
 8000958:	d045      	beq.n	80009e6 <__aeabi_fsub+0x176>
 800095a:	019b      	lsls	r3, r3, #6
 800095c:	b2c0      	uxtb	r0, r0
 800095e:	0a5b      	lsrs	r3, r3, #9
 8000960:	05c0      	lsls	r0, r0, #23
 8000962:	4318      	orrs	r0, r3
 8000964:	07e4      	lsls	r4, r4, #31
 8000966:	4320      	orrs	r0, r4
 8000968:	bcc0      	pop	{r6, r7}
 800096a:	46b9      	mov	r9, r7
 800096c:	46b0      	mov	r8, r6
 800096e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000970:	2201      	movs	r2, #1
 8000972:	4051      	eors	r1, r2
 8000974:	428c      	cmp	r4, r1
 8000976:	d1ba      	bne.n	80008ee <__aeabi_fsub+0x7e>
 8000978:	464a      	mov	r2, r9
 800097a:	2a00      	cmp	r2, #0
 800097c:	d010      	beq.n	80009a0 <__aeabi_fsub+0x130>
 800097e:	2d00      	cmp	r5, #0
 8000980:	d100      	bne.n	8000984 <__aeabi_fsub+0x114>
 8000982:	e098      	b.n	8000ab6 <__aeabi_fsub+0x246>
 8000984:	2300      	movs	r3, #0
 8000986:	e7bb      	b.n	8000900 <__aeabi_fsub+0x90>
 8000988:	2e00      	cmp	r6, #0
 800098a:	d034      	beq.n	80009f6 <__aeabi_fsub+0x186>
 800098c:	1e51      	subs	r1, r2, #1
 800098e:	2a01      	cmp	r2, #1
 8000990:	d06e      	beq.n	8000a70 <__aeabi_fsub+0x200>
 8000992:	2aff      	cmp	r2, #255	@ 0xff
 8000994:	d0b4      	beq.n	8000900 <__aeabi_fsub+0x90>
 8000996:	000a      	movs	r2, r1
 8000998:	e79c      	b.n	80008d4 <__aeabi_fsub+0x64>
 800099a:	2a00      	cmp	r2, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_fsub+0x130>
 800099e:	e088      	b.n	8000ab2 <__aeabi_fsub+0x242>
 80009a0:	20fe      	movs	r0, #254	@ 0xfe
 80009a2:	1c6a      	adds	r2, r5, #1
 80009a4:	4210      	tst	r0, r2
 80009a6:	d000      	beq.n	80009aa <__aeabi_fsub+0x13a>
 80009a8:	e092      	b.n	8000ad0 <__aeabi_fsub+0x260>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fsub+0x140>
 80009ae:	e0a4      	b.n	8000afa <__aeabi_fsub+0x28a>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fsub+0x146>
 80009b4:	e0cb      	b.n	8000b4e <__aeabi_fsub+0x2de>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d000      	beq.n	80009bc <__aeabi_fsub+0x14c>
 80009ba:	e0ca      	b.n	8000b52 <__aeabi_fsub+0x2e2>
 80009bc:	2200      	movs	r2, #0
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	025b      	lsls	r3, r3, #9
 80009c2:	0a5b      	lsrs	r3, r3, #9
 80009c4:	b2d0      	uxtb	r0, r2
 80009c6:	e7cb      	b.n	8000960 <__aeabi_fsub+0xf0>
 80009c8:	0031      	movs	r1, r6
 80009ca:	2020      	movs	r0, #32
 80009cc:	40d1      	lsrs	r1, r2
 80009ce:	1a82      	subs	r2, r0, r2
 80009d0:	4096      	lsls	r6, r2
 80009d2:	0032      	movs	r2, r6
 80009d4:	1e50      	subs	r0, r2, #1
 80009d6:	4182      	sbcs	r2, r0
 80009d8:	430a      	orrs	r2, r1
 80009da:	189b      	adds	r3, r3, r2
 80009dc:	015a      	lsls	r2, r3, #5
 80009de:	d5ae      	bpl.n	800093e <__aeabi_fsub+0xce>
 80009e0:	1c6a      	adds	r2, r5, #1
 80009e2:	2dfe      	cmp	r5, #254	@ 0xfe
 80009e4:	d14a      	bne.n	8000a7c <__aeabi_fsub+0x20c>
 80009e6:	20ff      	movs	r0, #255	@ 0xff
 80009e8:	2300      	movs	r3, #0
 80009ea:	e7b9      	b.n	8000960 <__aeabi_fsub+0xf0>
 80009ec:	22ff      	movs	r2, #255	@ 0xff
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__aeabi_fsub+0x21a>
 80009f2:	000c      	movs	r4, r1
 80009f4:	0033      	movs	r3, r6
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	2aff      	cmp	r2, #255	@ 0xff
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x18e>
 80009fc:	e781      	b.n	8000902 <__aeabi_fsub+0x92>
 80009fe:	e7df      	b.n	80009c0 <__aeabi_fsub+0x150>
 8000a00:	019f      	lsls	r7, r3, #6
 8000a02:	09bf      	lsrs	r7, r7, #6
 8000a04:	0038      	movs	r0, r7
 8000a06:	f001 fbbd 	bl	8002184 <__clzsi2>
 8000a0a:	3805      	subs	r0, #5
 8000a0c:	4087      	lsls	r7, r0
 8000a0e:	4285      	cmp	r5, r0
 8000a10:	dc21      	bgt.n	8000a56 <__aeabi_fsub+0x1e6>
 8000a12:	003b      	movs	r3, r7
 8000a14:	2120      	movs	r1, #32
 8000a16:	1b42      	subs	r2, r0, r5
 8000a18:	3201      	adds	r2, #1
 8000a1a:	40d3      	lsrs	r3, r2
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	4097      	lsls	r7, r2
 8000a20:	1e7a      	subs	r2, r7, #1
 8000a22:	4197      	sbcs	r7, r2
 8000a24:	2200      	movs	r2, #0
 8000a26:	433b      	orrs	r3, r7
 8000a28:	0759      	lsls	r1, r3, #29
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fsub+0x1be>
 8000a2c:	e78b      	b.n	8000946 <__aeabi_fsub+0xd6>
 8000a2e:	e78f      	b.n	8000950 <__aeabi_fsub+0xe0>
 8000a30:	20fe      	movs	r0, #254	@ 0xfe
 8000a32:	1c6a      	adds	r2, r5, #1
 8000a34:	4210      	tst	r0, r2
 8000a36:	d112      	bne.n	8000a5e <__aeabi_fsub+0x1ee>
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d152      	bne.n	8000ae2 <__aeabi_fsub+0x272>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d07c      	beq.n	8000b3a <__aeabi_fsub+0x2ca>
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d0bb      	beq.n	80009bc <__aeabi_fsub+0x14c>
 8000a44:	1b9a      	subs	r2, r3, r6
 8000a46:	0150      	lsls	r0, r2, #5
 8000a48:	d400      	bmi.n	8000a4c <__aeabi_fsub+0x1dc>
 8000a4a:	e08b      	b.n	8000b64 <__aeabi_fsub+0x2f4>
 8000a4c:	2401      	movs	r4, #1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	1af3      	subs	r3, r6, r3
 8000a52:	400c      	ands	r4, r1
 8000a54:	e7e8      	b.n	8000a28 <__aeabi_fsub+0x1b8>
 8000a56:	4b56      	ldr	r3, [pc, #344]	@ (8000bb0 <__aeabi_fsub+0x340>)
 8000a58:	1a2a      	subs	r2, r5, r0
 8000a5a:	403b      	ands	r3, r7
 8000a5c:	e7e4      	b.n	8000a28 <__aeabi_fsub+0x1b8>
 8000a5e:	1b9f      	subs	r7, r3, r6
 8000a60:	017a      	lsls	r2, r7, #5
 8000a62:	d446      	bmi.n	8000af2 <__aeabi_fsub+0x282>
 8000a64:	2f00      	cmp	r7, #0
 8000a66:	d1cd      	bne.n	8000a04 <__aeabi_fsub+0x194>
 8000a68:	2400      	movs	r4, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e777      	b.n	8000960 <__aeabi_fsub+0xf0>
 8000a70:	199b      	adds	r3, r3, r6
 8000a72:	2501      	movs	r5, #1
 8000a74:	3201      	adds	r2, #1
 8000a76:	0159      	lsls	r1, r3, #5
 8000a78:	d400      	bmi.n	8000a7c <__aeabi_fsub+0x20c>
 8000a7a:	e760      	b.n	800093e <__aeabi_fsub+0xce>
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	484d      	ldr	r0, [pc, #308]	@ (8000bb4 <__aeabi_fsub+0x344>)
 8000a80:	4019      	ands	r1, r3
 8000a82:	085b      	lsrs	r3, r3, #1
 8000a84:	4003      	ands	r3, r0
 8000a86:	430b      	orrs	r3, r1
 8000a88:	e7ce      	b.n	8000a28 <__aeabi_fsub+0x1b8>
 8000a8a:	1e57      	subs	r7, r2, #1
 8000a8c:	2a01      	cmp	r2, #1
 8000a8e:	d05a      	beq.n	8000b46 <__aeabi_fsub+0x2d6>
 8000a90:	000c      	movs	r4, r1
 8000a92:	2aff      	cmp	r2, #255	@ 0xff
 8000a94:	d033      	beq.n	8000afe <__aeabi_fsub+0x28e>
 8000a96:	2201      	movs	r2, #1
 8000a98:	2f1b      	cmp	r7, #27
 8000a9a:	dc07      	bgt.n	8000aac <__aeabi_fsub+0x23c>
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	1bc9      	subs	r1, r1, r7
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	408b      	lsls	r3, r1
 8000aa4:	40fa      	lsrs	r2, r7
 8000aa6:	1e59      	subs	r1, r3, #1
 8000aa8:	418b      	sbcs	r3, r1
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	0005      	movs	r5, r0
 8000aae:	1ab3      	subs	r3, r6, r2
 8000ab0:	e743      	b.n	800093a <__aeabi_fsub+0xca>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d123      	bne.n	8000afe <__aeabi_fsub+0x28e>
 8000ab6:	22ff      	movs	r2, #255	@ 0xff
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d09b      	beq.n	80009f4 <__aeabi_fsub+0x184>
 8000abc:	1e51      	subs	r1, r2, #1
 8000abe:	2a01      	cmp	r2, #1
 8000ac0:	d0d6      	beq.n	8000a70 <__aeabi_fsub+0x200>
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d01b      	beq.n	8000afe <__aeabi_fsub+0x28e>
 8000ac6:	291b      	cmp	r1, #27
 8000ac8:	dd2c      	ble.n	8000b24 <__aeabi_fsub+0x2b4>
 8000aca:	0002      	movs	r2, r0
 8000acc:	1c73      	adds	r3, r6, #1
 8000ace:	e73a      	b.n	8000946 <__aeabi_fsub+0xd6>
 8000ad0:	2aff      	cmp	r2, #255	@ 0xff
 8000ad2:	d088      	beq.n	80009e6 <__aeabi_fsub+0x176>
 8000ad4:	199b      	adds	r3, r3, r6
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	0759      	lsls	r1, r3, #29
 8000ada:	d000      	beq.n	8000ade <__aeabi_fsub+0x26e>
 8000adc:	e733      	b.n	8000946 <__aeabi_fsub+0xd6>
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	e76e      	b.n	80009c0 <__aeabi_fsub+0x150>
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d110      	bne.n	8000b08 <__aeabi_fsub+0x298>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d043      	beq.n	8000b72 <__aeabi_fsub+0x302>
 8000aea:	2401      	movs	r4, #1
 8000aec:	0033      	movs	r3, r6
 8000aee:	400c      	ands	r4, r1
 8000af0:	e706      	b.n	8000900 <__aeabi_fsub+0x90>
 8000af2:	2401      	movs	r4, #1
 8000af4:	1af7      	subs	r7, r6, r3
 8000af6:	400c      	ands	r4, r1
 8000af8:	e784      	b.n	8000a04 <__aeabi_fsub+0x194>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d104      	bne.n	8000b08 <__aeabi_fsub+0x298>
 8000afe:	0033      	movs	r3, r6
 8000b00:	e6fe      	b.n	8000900 <__aeabi_fsub+0x90>
 8000b02:	2501      	movs	r5, #1
 8000b04:	1b9b      	subs	r3, r3, r6
 8000b06:	e718      	b.n	800093a <__aeabi_fsub+0xca>
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fsub+0x29e>
 8000b0c:	e6f8      	b.n	8000900 <__aeabi_fsub+0x90>
 8000b0e:	2280      	movs	r2, #128	@ 0x80
 8000b10:	03d2      	lsls	r2, r2, #15
 8000b12:	4297      	cmp	r7, r2
 8000b14:	d304      	bcc.n	8000b20 <__aeabi_fsub+0x2b0>
 8000b16:	4594      	cmp	ip, r2
 8000b18:	d202      	bcs.n	8000b20 <__aeabi_fsub+0x2b0>
 8000b1a:	2401      	movs	r4, #1
 8000b1c:	0033      	movs	r3, r6
 8000b1e:	400c      	ands	r4, r1
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e6f1      	b.n	8000908 <__aeabi_fsub+0x98>
 8000b24:	001a      	movs	r2, r3
 8000b26:	2520      	movs	r5, #32
 8000b28:	40ca      	lsrs	r2, r1
 8000b2a:	1a69      	subs	r1, r5, r1
 8000b2c:	408b      	lsls	r3, r1
 8000b2e:	1e59      	subs	r1, r3, #1
 8000b30:	418b      	sbcs	r3, r1
 8000b32:	4313      	orrs	r3, r2
 8000b34:	0005      	movs	r5, r0
 8000b36:	199b      	adds	r3, r3, r6
 8000b38:	e750      	b.n	80009dc <__aeabi_fsub+0x16c>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d094      	beq.n	8000a68 <__aeabi_fsub+0x1f8>
 8000b3e:	2401      	movs	r4, #1
 8000b40:	0033      	movs	r3, r6
 8000b42:	400c      	ands	r4, r1
 8000b44:	e73a      	b.n	80009bc <__aeabi_fsub+0x14c>
 8000b46:	000c      	movs	r4, r1
 8000b48:	2501      	movs	r5, #1
 8000b4a:	1af3      	subs	r3, r6, r3
 8000b4c:	e6f5      	b.n	800093a <__aeabi_fsub+0xca>
 8000b4e:	0033      	movs	r3, r6
 8000b50:	e734      	b.n	80009bc <__aeabi_fsub+0x14c>
 8000b52:	199b      	adds	r3, r3, r6
 8000b54:	2200      	movs	r2, #0
 8000b56:	0159      	lsls	r1, r3, #5
 8000b58:	d5c1      	bpl.n	8000ade <__aeabi_fsub+0x26e>
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <__aeabi_fsub+0x340>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	2201      	movs	r2, #1
 8000b62:	e72d      	b.n	80009c0 <__aeabi_fsub+0x150>
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fsub+0x2fa>
 8000b68:	e77e      	b.n	8000a68 <__aeabi_fsub+0x1f8>
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	e726      	b.n	80009c0 <__aeabi_fsub+0x150>
 8000b72:	2380      	movs	r3, #128	@ 0x80
 8000b74:	2400      	movs	r4, #0
 8000b76:	20ff      	movs	r0, #255	@ 0xff
 8000b78:	03db      	lsls	r3, r3, #15
 8000b7a:	e6f1      	b.n	8000960 <__aeabi_fsub+0xf0>
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fsub+0x312>
 8000b80:	e756      	b.n	8000a30 <__aeabi_fsub+0x1c0>
 8000b82:	1b47      	subs	r7, r0, r5
 8000b84:	003a      	movs	r2, r7
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x31c>
 8000b8a:	e730      	b.n	80009ee <__aeabi_fsub+0x17e>
 8000b8c:	2280      	movs	r2, #128	@ 0x80
 8000b8e:	04d2      	lsls	r2, r2, #19
 8000b90:	000c      	movs	r4, r1
 8000b92:	4313      	orrs	r3, r2
 8000b94:	e77f      	b.n	8000a96 <__aeabi_fsub+0x226>
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x32c>
 8000b9a:	e701      	b.n	80009a0 <__aeabi_fsub+0x130>
 8000b9c:	1b41      	subs	r1, r0, r5
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d101      	bne.n	8000ba6 <__aeabi_fsub+0x336>
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	e788      	b.n	8000ab8 <__aeabi_fsub+0x248>
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	04d2      	lsls	r2, r2, #19
 8000baa:	4313      	orrs	r3, r2
 8000bac:	e78b      	b.n	8000ac6 <__aeabi_fsub+0x256>
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	fbffffff 	.word	0xfbffffff
 8000bb4:	7dffffff 	.word	0x7dffffff

08000bb8 <__aeabi_f2iz>:
 8000bb8:	0241      	lsls	r1, r0, #9
 8000bba:	0042      	lsls	r2, r0, #1
 8000bbc:	0fc3      	lsrs	r3, r0, #31
 8000bbe:	0a49      	lsrs	r1, r1, #9
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	0e12      	lsrs	r2, r2, #24
 8000bc4:	2a7e      	cmp	r2, #126	@ 0x7e
 8000bc6:	dd03      	ble.n	8000bd0 <__aeabi_f2iz+0x18>
 8000bc8:	2a9d      	cmp	r2, #157	@ 0x9d
 8000bca:	dd02      	ble.n	8000bd2 <__aeabi_f2iz+0x1a>
 8000bcc:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <__aeabi_f2iz+0x3c>)
 8000bce:	1898      	adds	r0, r3, r2
 8000bd0:	4770      	bx	lr
 8000bd2:	2080      	movs	r0, #128	@ 0x80
 8000bd4:	0400      	lsls	r0, r0, #16
 8000bd6:	4301      	orrs	r1, r0
 8000bd8:	2a95      	cmp	r2, #149	@ 0x95
 8000bda:	dc07      	bgt.n	8000bec <__aeabi_f2iz+0x34>
 8000bdc:	2096      	movs	r0, #150	@ 0x96
 8000bde:	1a82      	subs	r2, r0, r2
 8000be0:	40d1      	lsrs	r1, r2
 8000be2:	4248      	negs	r0, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f3      	bne.n	8000bd0 <__aeabi_f2iz+0x18>
 8000be8:	0008      	movs	r0, r1
 8000bea:	e7f1      	b.n	8000bd0 <__aeabi_f2iz+0x18>
 8000bec:	3a96      	subs	r2, #150	@ 0x96
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	e7f7      	b.n	8000be2 <__aeabi_f2iz+0x2a>
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	7fffffff 	.word	0x7fffffff

08000bf8 <__aeabi_ui2f>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	1e04      	subs	r4, r0, #0
 8000bfc:	d00e      	beq.n	8000c1c <__aeabi_ui2f+0x24>
 8000bfe:	f001 fac1 	bl	8002184 <__clzsi2>
 8000c02:	239e      	movs	r3, #158	@ 0x9e
 8000c04:	0001      	movs	r1, r0
 8000c06:	1a1b      	subs	r3, r3, r0
 8000c08:	2b96      	cmp	r3, #150	@ 0x96
 8000c0a:	dc0c      	bgt.n	8000c26 <__aeabi_ui2f+0x2e>
 8000c0c:	2808      	cmp	r0, #8
 8000c0e:	d02f      	beq.n	8000c70 <__aeabi_ui2f+0x78>
 8000c10:	3908      	subs	r1, #8
 8000c12:	408c      	lsls	r4, r1
 8000c14:	0264      	lsls	r4, r4, #9
 8000c16:	0a64      	lsrs	r4, r4, #9
 8000c18:	b2d8      	uxtb	r0, r3
 8000c1a:	e001      	b.n	8000c20 <__aeabi_ui2f+0x28>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	2400      	movs	r4, #0
 8000c20:	05c0      	lsls	r0, r0, #23
 8000c22:	4320      	orrs	r0, r4
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	2b99      	cmp	r3, #153	@ 0x99
 8000c28:	dc16      	bgt.n	8000c58 <__aeabi_ui2f+0x60>
 8000c2a:	1f42      	subs	r2, r0, #5
 8000c2c:	2805      	cmp	r0, #5
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_ui2f+0x3a>
 8000c30:	4094      	lsls	r4, r2
 8000c32:	0022      	movs	r2, r4
 8000c34:	4810      	ldr	r0, [pc, #64]	@ (8000c78 <__aeabi_ui2f+0x80>)
 8000c36:	4002      	ands	r2, r0
 8000c38:	0765      	lsls	r5, r4, #29
 8000c3a:	d009      	beq.n	8000c50 <__aeabi_ui2f+0x58>
 8000c3c:	250f      	movs	r5, #15
 8000c3e:	402c      	ands	r4, r5
 8000c40:	2c04      	cmp	r4, #4
 8000c42:	d005      	beq.n	8000c50 <__aeabi_ui2f+0x58>
 8000c44:	3204      	adds	r2, #4
 8000c46:	0154      	lsls	r4, r2, #5
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_ui2f+0x58>
 8000c4a:	239f      	movs	r3, #159	@ 0x9f
 8000c4c:	4002      	ands	r2, r0
 8000c4e:	1a5b      	subs	r3, r3, r1
 8000c50:	0192      	lsls	r2, r2, #6
 8000c52:	0a54      	lsrs	r4, r2, #9
 8000c54:	b2d8      	uxtb	r0, r3
 8000c56:	e7e3      	b.n	8000c20 <__aeabi_ui2f+0x28>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	321b      	adds	r2, #27
 8000c5e:	4090      	lsls	r0, r2
 8000c60:	0002      	movs	r2, r0
 8000c62:	1e50      	subs	r0, r2, #1
 8000c64:	4182      	sbcs	r2, r0
 8000c66:	2005      	movs	r0, #5
 8000c68:	1a40      	subs	r0, r0, r1
 8000c6a:	40c4      	lsrs	r4, r0
 8000c6c:	4314      	orrs	r4, r2
 8000c6e:	e7e0      	b.n	8000c32 <__aeabi_ui2f+0x3a>
 8000c70:	0264      	lsls	r4, r4, #9
 8000c72:	2096      	movs	r0, #150	@ 0x96
 8000c74:	0a64      	lsrs	r4, r4, #9
 8000c76:	e7d3      	b.n	8000c20 <__aeabi_ui2f+0x28>
 8000c78:	fbffffff 	.word	0xfbffffff

08000c7c <__aeabi_ddiv>:
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	46de      	mov	lr, fp
 8000c80:	4645      	mov	r5, r8
 8000c82:	4657      	mov	r7, sl
 8000c84:	464e      	mov	r6, r9
 8000c86:	b5e0      	push	{r5, r6, r7, lr}
 8000c88:	b087      	sub	sp, #28
 8000c8a:	9200      	str	r2, [sp, #0]
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	030b      	lsls	r3, r1, #12
 8000c90:	0b1b      	lsrs	r3, r3, #12
 8000c92:	469b      	mov	fp, r3
 8000c94:	0fca      	lsrs	r2, r1, #31
 8000c96:	004b      	lsls	r3, r1, #1
 8000c98:	0004      	movs	r4, r0
 8000c9a:	4680      	mov	r8, r0
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	9202      	str	r2, [sp, #8]
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x28>
 8000ca2:	e16a      	b.n	8000f7a <__aeabi_ddiv+0x2fe>
 8000ca4:	4ad4      	ldr	r2, [pc, #848]	@ (8000ff8 <__aeabi_ddiv+0x37c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x30>
 8000caa:	e18c      	b.n	8000fc6 <__aeabi_ddiv+0x34a>
 8000cac:	4659      	mov	r1, fp
 8000cae:	0f42      	lsrs	r2, r0, #29
 8000cb0:	00c9      	lsls	r1, r1, #3
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	2180      	movs	r1, #128	@ 0x80
 8000cb6:	0409      	lsls	r1, r1, #16
 8000cb8:	4311      	orrs	r1, r2
 8000cba:	00c2      	lsls	r2, r0, #3
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	4acf      	ldr	r2, [pc, #828]	@ (8000ffc <__aeabi_ddiv+0x380>)
 8000cc0:	4689      	mov	r9, r1
 8000cc2:	4692      	mov	sl, r2
 8000cc4:	449a      	add	sl, r3
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	2400      	movs	r4, #0
 8000cca:	9303      	str	r3, [sp, #12]
 8000ccc:	9e00      	ldr	r6, [sp, #0]
 8000cce:	9f01      	ldr	r7, [sp, #4]
 8000cd0:	033b      	lsls	r3, r7, #12
 8000cd2:	0b1b      	lsrs	r3, r3, #12
 8000cd4:	469b      	mov	fp, r3
 8000cd6:	007b      	lsls	r3, r7, #1
 8000cd8:	0030      	movs	r0, r6
 8000cda:	0d5b      	lsrs	r3, r3, #21
 8000cdc:	0ffd      	lsrs	r5, r7, #31
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_ddiv+0x68>
 8000ce2:	e128      	b.n	8000f36 <__aeabi_ddiv+0x2ba>
 8000ce4:	4ac4      	ldr	r2, [pc, #784]	@ (8000ff8 <__aeabi_ddiv+0x37c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x70>
 8000cea:	e177      	b.n	8000fdc <__aeabi_ddiv+0x360>
 8000cec:	4659      	mov	r1, fp
 8000cee:	0f72      	lsrs	r2, r6, #29
 8000cf0:	00c9      	lsls	r1, r1, #3
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	0409      	lsls	r1, r1, #16
 8000cf8:	4311      	orrs	r1, r2
 8000cfa:	468b      	mov	fp, r1
 8000cfc:	49bf      	ldr	r1, [pc, #764]	@ (8000ffc <__aeabi_ddiv+0x380>)
 8000cfe:	00f2      	lsls	r2, r6, #3
 8000d00:	468c      	mov	ip, r1
 8000d02:	4651      	mov	r1, sl
 8000d04:	4463      	add	r3, ip
 8000d06:	1acb      	subs	r3, r1, r3
 8000d08:	469a      	mov	sl, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9e02      	ldr	r6, [sp, #8]
 8000d0e:	406e      	eors	r6, r5
 8000d10:	2c0f      	cmp	r4, #15
 8000d12:	d827      	bhi.n	8000d64 <__aeabi_ddiv+0xe8>
 8000d14:	49ba      	ldr	r1, [pc, #744]	@ (8001000 <__aeabi_ddiv+0x384>)
 8000d16:	00a4      	lsls	r4, r4, #2
 8000d18:	5909      	ldr	r1, [r1, r4]
 8000d1a:	468f      	mov	pc, r1
 8000d1c:	46cb      	mov	fp, r9
 8000d1e:	4642      	mov	r2, r8
 8000d20:	9e02      	ldr	r6, [sp, #8]
 8000d22:	9b03      	ldr	r3, [sp, #12]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d016      	beq.n	8000d56 <__aeabi_ddiv+0xda>
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0xb2>
 8000d2c:	e2a6      	b.n	800127c <__aeabi_ddiv+0x600>
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d000      	beq.n	8000d34 <__aeabi_ddiv+0xb8>
 8000d32:	e0df      	b.n	8000ef4 <__aeabi_ddiv+0x278>
 8000d34:	2200      	movs	r2, #0
 8000d36:	2300      	movs	r3, #0
 8000d38:	2400      	movs	r4, #0
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	051b      	lsls	r3, r3, #20
 8000d3e:	4323      	orrs	r3, r4
 8000d40:	07f6      	lsls	r6, r6, #31
 8000d42:	4333      	orrs	r3, r6
 8000d44:	4640      	mov	r0, r8
 8000d46:	0019      	movs	r1, r3
 8000d48:	b007      	add	sp, #28
 8000d4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d4c:	46bb      	mov	fp, r7
 8000d4e:	46b2      	mov	sl, r6
 8000d50:	46a9      	mov	r9, r5
 8000d52:	46a0      	mov	r8, r4
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d56:	2200      	movs	r2, #0
 8000d58:	2400      	movs	r4, #0
 8000d5a:	4690      	mov	r8, r2
 8000d5c:	4ba6      	ldr	r3, [pc, #664]	@ (8000ff8 <__aeabi_ddiv+0x37c>)
 8000d5e:	e7ed      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 8000d60:	002e      	movs	r6, r5
 8000d62:	e7df      	b.n	8000d24 <__aeabi_ddiv+0xa8>
 8000d64:	45cb      	cmp	fp, r9
 8000d66:	d200      	bcs.n	8000d6a <__aeabi_ddiv+0xee>
 8000d68:	e1d4      	b.n	8001114 <__aeabi_ddiv+0x498>
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_ddiv+0xf2>
 8000d6c:	e1cf      	b.n	800110e <__aeabi_ddiv+0x492>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	425b      	negs	r3, r3
 8000d72:	469c      	mov	ip, r3
 8000d74:	4644      	mov	r4, r8
 8000d76:	4648      	mov	r0, r9
 8000d78:	2700      	movs	r7, #0
 8000d7a:	44e2      	add	sl, ip
 8000d7c:	465b      	mov	r3, fp
 8000d7e:	0e15      	lsrs	r5, r2, #24
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	431d      	orrs	r5, r3
 8000d84:	0c19      	lsrs	r1, r3, #16
 8000d86:	042b      	lsls	r3, r5, #16
 8000d88:	0212      	lsls	r2, r2, #8
 8000d8a:	9500      	str	r5, [sp, #0]
 8000d8c:	0c1d      	lsrs	r5, r3, #16
 8000d8e:	4691      	mov	r9, r2
 8000d90:	9102      	str	r1, [sp, #8]
 8000d92:	9503      	str	r5, [sp, #12]
 8000d94:	f7ff fa58 	bl	8000248 <__aeabi_uidivmod>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	436a      	muls	r2, r5
 8000d9c:	040b      	lsls	r3, r1, #16
 8000d9e:	0c21      	lsrs	r1, r4, #16
 8000da0:	4680      	mov	r8, r0
 8000da2:	4319      	orrs	r1, r3
 8000da4:	428a      	cmp	r2, r1
 8000da6:	d909      	bls.n	8000dbc <__aeabi_ddiv+0x140>
 8000da8:	9d00      	ldr	r5, [sp, #0]
 8000daa:	2301      	movs	r3, #1
 8000dac:	46ac      	mov	ip, r5
 8000dae:	425b      	negs	r3, r3
 8000db0:	4461      	add	r1, ip
 8000db2:	469c      	mov	ip, r3
 8000db4:	44e0      	add	r8, ip
 8000db6:	428d      	cmp	r5, r1
 8000db8:	d800      	bhi.n	8000dbc <__aeabi_ddiv+0x140>
 8000dba:	e1fb      	b.n	80011b4 <__aeabi_ddiv+0x538>
 8000dbc:	1a88      	subs	r0, r1, r2
 8000dbe:	9902      	ldr	r1, [sp, #8]
 8000dc0:	f7ff fa42 	bl	8000248 <__aeabi_uidivmod>
 8000dc4:	9a03      	ldr	r2, [sp, #12]
 8000dc6:	0424      	lsls	r4, r4, #16
 8000dc8:	4342      	muls	r2, r0
 8000dca:	0409      	lsls	r1, r1, #16
 8000dcc:	0c24      	lsrs	r4, r4, #16
 8000dce:	0003      	movs	r3, r0
 8000dd0:	430c      	orrs	r4, r1
 8000dd2:	42a2      	cmp	r2, r4
 8000dd4:	d906      	bls.n	8000de4 <__aeabi_ddiv+0x168>
 8000dd6:	9900      	ldr	r1, [sp, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	468c      	mov	ip, r1
 8000ddc:	4464      	add	r4, ip
 8000dde:	42a1      	cmp	r1, r4
 8000de0:	d800      	bhi.n	8000de4 <__aeabi_ddiv+0x168>
 8000de2:	e1e1      	b.n	80011a8 <__aeabi_ddiv+0x52c>
 8000de4:	1aa0      	subs	r0, r4, r2
 8000de6:	4642      	mov	r2, r8
 8000de8:	0412      	lsls	r2, r2, #16
 8000dea:	431a      	orrs	r2, r3
 8000dec:	4693      	mov	fp, r2
 8000dee:	464b      	mov	r3, r9
 8000df0:	4659      	mov	r1, fp
 8000df2:	0c1b      	lsrs	r3, r3, #16
 8000df4:	001d      	movs	r5, r3
 8000df6:	9304      	str	r3, [sp, #16]
 8000df8:	040b      	lsls	r3, r1, #16
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	0409      	lsls	r1, r1, #16
 8000dfe:	0c09      	lsrs	r1, r1, #16
 8000e00:	000c      	movs	r4, r1
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435c      	muls	r4, r3
 8000e06:	0c12      	lsrs	r2, r2, #16
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4688      	mov	r8, r1
 8000e0c:	4351      	muls	r1, r2
 8000e0e:	436a      	muls	r2, r5
 8000e10:	0c25      	lsrs	r5, r4, #16
 8000e12:	46ac      	mov	ip, r5
 8000e14:	185b      	adds	r3, r3, r1
 8000e16:	4463      	add	r3, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d903      	bls.n	8000e24 <__aeabi_ddiv+0x1a8>
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0249      	lsls	r1, r1, #9
 8000e20:	468c      	mov	ip, r1
 8000e22:	4462      	add	r2, ip
 8000e24:	0c19      	lsrs	r1, r3, #16
 8000e26:	0424      	lsls	r4, r4, #16
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	0c24      	lsrs	r4, r4, #16
 8000e2c:	188a      	adds	r2, r1, r2
 8000e2e:	191c      	adds	r4, r3, r4
 8000e30:	4290      	cmp	r0, r2
 8000e32:	d302      	bcc.n	8000e3a <__aeabi_ddiv+0x1be>
 8000e34:	d116      	bne.n	8000e64 <__aeabi_ddiv+0x1e8>
 8000e36:	42a7      	cmp	r7, r4
 8000e38:	d214      	bcs.n	8000e64 <__aeabi_ddiv+0x1e8>
 8000e3a:	465b      	mov	r3, fp
 8000e3c:	9d00      	ldr	r5, [sp, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	444f      	add	r7, r9
 8000e42:	9305      	str	r3, [sp, #20]
 8000e44:	454f      	cmp	r7, r9
 8000e46:	419b      	sbcs	r3, r3
 8000e48:	46ac      	mov	ip, r5
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	4463      	add	r3, ip
 8000e4e:	18c0      	adds	r0, r0, r3
 8000e50:	4285      	cmp	r5, r0
 8000e52:	d300      	bcc.n	8000e56 <__aeabi_ddiv+0x1da>
 8000e54:	e1a1      	b.n	800119a <__aeabi_ddiv+0x51e>
 8000e56:	4282      	cmp	r2, r0
 8000e58:	d900      	bls.n	8000e5c <__aeabi_ddiv+0x1e0>
 8000e5a:	e1f6      	b.n	800124a <__aeabi_ddiv+0x5ce>
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x1e4>
 8000e5e:	e1f1      	b.n	8001244 <__aeabi_ddiv+0x5c8>
 8000e60:	9b05      	ldr	r3, [sp, #20]
 8000e62:	469b      	mov	fp, r3
 8000e64:	1b3c      	subs	r4, r7, r4
 8000e66:	42a7      	cmp	r7, r4
 8000e68:	41bf      	sbcs	r7, r7
 8000e6a:	9d00      	ldr	r5, [sp, #0]
 8000e6c:	1a80      	subs	r0, r0, r2
 8000e6e:	427f      	negs	r7, r7
 8000e70:	1bc0      	subs	r0, r0, r7
 8000e72:	4285      	cmp	r5, r0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x1fc>
 8000e76:	e1d0      	b.n	800121a <__aeabi_ddiv+0x59e>
 8000e78:	9902      	ldr	r1, [sp, #8]
 8000e7a:	f7ff f9e5 	bl	8000248 <__aeabi_uidivmod>
 8000e7e:	9a03      	ldr	r2, [sp, #12]
 8000e80:	040b      	lsls	r3, r1, #16
 8000e82:	4342      	muls	r2, r0
 8000e84:	0c21      	lsrs	r1, r4, #16
 8000e86:	0007      	movs	r7, r0
 8000e88:	4319      	orrs	r1, r3
 8000e8a:	428a      	cmp	r2, r1
 8000e8c:	d900      	bls.n	8000e90 <__aeabi_ddiv+0x214>
 8000e8e:	e178      	b.n	8001182 <__aeabi_ddiv+0x506>
 8000e90:	1a88      	subs	r0, r1, r2
 8000e92:	9902      	ldr	r1, [sp, #8]
 8000e94:	f7ff f9d8 	bl	8000248 <__aeabi_uidivmod>
 8000e98:	9a03      	ldr	r2, [sp, #12]
 8000e9a:	0424      	lsls	r4, r4, #16
 8000e9c:	4342      	muls	r2, r0
 8000e9e:	0409      	lsls	r1, r1, #16
 8000ea0:	0c24      	lsrs	r4, r4, #16
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	430c      	orrs	r4, r1
 8000ea6:	42a2      	cmp	r2, r4
 8000ea8:	d900      	bls.n	8000eac <__aeabi_ddiv+0x230>
 8000eaa:	e15d      	b.n	8001168 <__aeabi_ddiv+0x4ec>
 8000eac:	4641      	mov	r1, r8
 8000eae:	1aa4      	subs	r4, r4, r2
 8000eb0:	043a      	lsls	r2, r7, #16
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	9d04      	ldr	r5, [sp, #16]
 8000eb6:	0413      	lsls	r3, r2, #16
 8000eb8:	0c1b      	lsrs	r3, r3, #16
 8000eba:	4359      	muls	r1, r3
 8000ebc:	4647      	mov	r7, r8
 8000ebe:	436b      	muls	r3, r5
 8000ec0:	469c      	mov	ip, r3
 8000ec2:	0c10      	lsrs	r0, r2, #16
 8000ec4:	4347      	muls	r7, r0
 8000ec6:	0c0b      	lsrs	r3, r1, #16
 8000ec8:	44bc      	add	ip, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	4368      	muls	r0, r5
 8000ece:	429f      	cmp	r7, r3
 8000ed0:	d903      	bls.n	8000eda <__aeabi_ddiv+0x25e>
 8000ed2:	2580      	movs	r5, #128	@ 0x80
 8000ed4:	026d      	lsls	r5, r5, #9
 8000ed6:	46ac      	mov	ip, r5
 8000ed8:	4460      	add	r0, ip
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0409      	lsls	r1, r1, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c09      	lsrs	r1, r1, #16
 8000ee2:	183f      	adds	r7, r7, r0
 8000ee4:	185b      	adds	r3, r3, r1
 8000ee6:	42bc      	cmp	r4, r7
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x270>
 8000eea:	e102      	b.n	80010f2 <__aeabi_ddiv+0x476>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x274>
 8000eee:	e0fd      	b.n	80010ec <__aeabi_ddiv+0x470>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	4b43      	ldr	r3, [pc, #268]	@ (8001004 <__aeabi_ddiv+0x388>)
 8000ef6:	4453      	add	r3, sl
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_ddiv+0x282>
 8000efc:	e0ae      	b.n	800105c <__aeabi_ddiv+0x3e0>
 8000efe:	0751      	lsls	r1, r2, #29
 8000f00:	d000      	beq.n	8000f04 <__aeabi_ddiv+0x288>
 8000f02:	e198      	b.n	8001236 <__aeabi_ddiv+0x5ba>
 8000f04:	4659      	mov	r1, fp
 8000f06:	01c9      	lsls	r1, r1, #7
 8000f08:	d506      	bpl.n	8000f18 <__aeabi_ddiv+0x29c>
 8000f0a:	4659      	mov	r1, fp
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001008 <__aeabi_ddiv+0x38c>)
 8000f0e:	4019      	ands	r1, r3
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	468b      	mov	fp, r1
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4453      	add	r3, sl
 8000f18:	493c      	ldr	r1, [pc, #240]	@ (800100c <__aeabi_ddiv+0x390>)
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	dd00      	ble.n	8000f20 <__aeabi_ddiv+0x2a4>
 8000f1e:	e71a      	b.n	8000d56 <__aeabi_ddiv+0xda>
 8000f20:	4659      	mov	r1, fp
 8000f22:	08d2      	lsrs	r2, r2, #3
 8000f24:	0749      	lsls	r1, r1, #29
 8000f26:	4311      	orrs	r1, r2
 8000f28:	465a      	mov	r2, fp
 8000f2a:	055b      	lsls	r3, r3, #21
 8000f2c:	0254      	lsls	r4, r2, #9
 8000f2e:	4688      	mov	r8, r1
 8000f30:	0b24      	lsrs	r4, r4, #12
 8000f32:	0d5b      	lsrs	r3, r3, #21
 8000f34:	e702      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 8000f36:	465a      	mov	r2, fp
 8000f38:	9b00      	ldr	r3, [sp, #0]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_ddiv+0x2c4>
 8000f3e:	e07e      	b.n	800103e <__aeabi_ddiv+0x3c2>
 8000f40:	465b      	mov	r3, fp
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x2cc>
 8000f46:	e100      	b.n	800114a <__aeabi_ddiv+0x4ce>
 8000f48:	4658      	mov	r0, fp
 8000f4a:	f001 f91b 	bl	8002184 <__clzsi2>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	0003      	movs	r3, r0
 8000f52:	3a0b      	subs	r2, #11
 8000f54:	271d      	movs	r7, #29
 8000f56:	9e00      	ldr	r6, [sp, #0]
 8000f58:	1aba      	subs	r2, r7, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	4658      	mov	r0, fp
 8000f5e:	40d6      	lsrs	r6, r2
 8000f60:	3908      	subs	r1, #8
 8000f62:	4088      	lsls	r0, r1
 8000f64:	0032      	movs	r2, r6
 8000f66:	4302      	orrs	r2, r0
 8000f68:	4693      	mov	fp, r2
 8000f6a:	9a00      	ldr	r2, [sp, #0]
 8000f6c:	408a      	lsls	r2, r1
 8000f6e:	4928      	ldr	r1, [pc, #160]	@ (8001010 <__aeabi_ddiv+0x394>)
 8000f70:	4453      	add	r3, sl
 8000f72:	468a      	mov	sl, r1
 8000f74:	449a      	add	sl, r3
 8000f76:	2300      	movs	r3, #0
 8000f78:	e6c8      	b.n	8000d0c <__aeabi_ddiv+0x90>
 8000f7a:	465b      	mov	r3, fp
 8000f7c:	4303      	orrs	r3, r0
 8000f7e:	4699      	mov	r9, r3
 8000f80:	d056      	beq.n	8001030 <__aeabi_ddiv+0x3b4>
 8000f82:	465b      	mov	r3, fp
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_ddiv+0x30e>
 8000f88:	e0cd      	b.n	8001126 <__aeabi_ddiv+0x4aa>
 8000f8a:	4658      	mov	r0, fp
 8000f8c:	f001 f8fa 	bl	8002184 <__clzsi2>
 8000f90:	230b      	movs	r3, #11
 8000f92:	425b      	negs	r3, r3
 8000f94:	469c      	mov	ip, r3
 8000f96:	0002      	movs	r2, r0
 8000f98:	4484      	add	ip, r0
 8000f9a:	4666      	mov	r6, ip
 8000f9c:	231d      	movs	r3, #29
 8000f9e:	1b9b      	subs	r3, r3, r6
 8000fa0:	0026      	movs	r6, r4
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	4658      	mov	r0, fp
 8000fa6:	40de      	lsrs	r6, r3
 8000fa8:	3908      	subs	r1, #8
 8000faa:	4088      	lsls	r0, r1
 8000fac:	0033      	movs	r3, r6
 8000fae:	4303      	orrs	r3, r0
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	0023      	movs	r3, r4
 8000fb4:	408b      	lsls	r3, r1
 8000fb6:	4698      	mov	r8, r3
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <__aeabi_ddiv+0x398>)
 8000fba:	2400      	movs	r4, #0
 8000fbc:	1a9b      	subs	r3, r3, r2
 8000fbe:	469a      	mov	sl, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9303      	str	r3, [sp, #12]
 8000fc4:	e682      	b.n	8000ccc <__aeabi_ddiv+0x50>
 8000fc6:	465a      	mov	r2, fp
 8000fc8:	4302      	orrs	r2, r0
 8000fca:	4691      	mov	r9, r2
 8000fcc:	d12a      	bne.n	8001024 <__aeabi_ddiv+0x3a8>
 8000fce:	2200      	movs	r2, #0
 8000fd0:	469a      	mov	sl, r3
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	2408      	movs	r4, #8
 8000fd8:	9303      	str	r3, [sp, #12]
 8000fda:	e677      	b.n	8000ccc <__aeabi_ddiv+0x50>
 8000fdc:	465a      	mov	r2, fp
 8000fde:	9b00      	ldr	r3, [sp, #0]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <__aeabi_ddiv+0x39c>)
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	44e2      	add	sl, ip
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d117      	bne.n	800101c <__aeabi_ddiv+0x3a0>
 8000fec:	2302      	movs	r3, #2
 8000fee:	431c      	orrs	r4, r3
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	469b      	mov	fp, r3
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	e689      	b.n	8000d0c <__aeabi_ddiv+0x90>
 8000ff8:	000007ff 	.word	0x000007ff
 8000ffc:	fffffc01 	.word	0xfffffc01
 8001000:	0800a7f4 	.word	0x0800a7f4
 8001004:	000003ff 	.word	0x000003ff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	000007fe 	.word	0x000007fe
 8001010:	000003f3 	.word	0x000003f3
 8001014:	fffffc0d 	.word	0xfffffc0d
 8001018:	fffff801 	.word	0xfffff801
 800101c:	2303      	movs	r3, #3
 800101e:	0032      	movs	r2, r6
 8001020:	431c      	orrs	r4, r3
 8001022:	e673      	b.n	8000d0c <__aeabi_ddiv+0x90>
 8001024:	469a      	mov	sl, r3
 8001026:	2303      	movs	r3, #3
 8001028:	46d9      	mov	r9, fp
 800102a:	240c      	movs	r4, #12
 800102c:	9303      	str	r3, [sp, #12]
 800102e:	e64d      	b.n	8000ccc <__aeabi_ddiv+0x50>
 8001030:	2300      	movs	r3, #0
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	3301      	adds	r3, #1
 8001038:	2404      	movs	r4, #4
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	e646      	b.n	8000ccc <__aeabi_ddiv+0x50>
 800103e:	2301      	movs	r3, #1
 8001040:	431c      	orrs	r4, r3
 8001042:	2300      	movs	r3, #0
 8001044:	469b      	mov	fp, r3
 8001046:	3301      	adds	r3, #1
 8001048:	e660      	b.n	8000d0c <__aeabi_ddiv+0x90>
 800104a:	2300      	movs	r3, #0
 800104c:	2480      	movs	r4, #128	@ 0x80
 800104e:	4698      	mov	r8, r3
 8001050:	2600      	movs	r6, #0
 8001052:	4b92      	ldr	r3, [pc, #584]	@ (800129c <__aeabi_ddiv+0x620>)
 8001054:	0324      	lsls	r4, r4, #12
 8001056:	e671      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 8001058:	2201      	movs	r2, #1
 800105a:	4252      	negs	r2, r2
 800105c:	2101      	movs	r1, #1
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	2938      	cmp	r1, #56	@ 0x38
 8001062:	dd00      	ble.n	8001066 <__aeabi_ddiv+0x3ea>
 8001064:	e666      	b.n	8000d34 <__aeabi_ddiv+0xb8>
 8001066:	291f      	cmp	r1, #31
 8001068:	dc00      	bgt.n	800106c <__aeabi_ddiv+0x3f0>
 800106a:	e0ab      	b.n	80011c4 <__aeabi_ddiv+0x548>
 800106c:	201f      	movs	r0, #31
 800106e:	4240      	negs	r0, r0
 8001070:	1ac3      	subs	r3, r0, r3
 8001072:	4658      	mov	r0, fp
 8001074:	40d8      	lsrs	r0, r3
 8001076:	0003      	movs	r3, r0
 8001078:	2920      	cmp	r1, #32
 800107a:	d004      	beq.n	8001086 <__aeabi_ddiv+0x40a>
 800107c:	4658      	mov	r0, fp
 800107e:	4988      	ldr	r1, [pc, #544]	@ (80012a0 <__aeabi_ddiv+0x624>)
 8001080:	4451      	add	r1, sl
 8001082:	4088      	lsls	r0, r1
 8001084:	4302      	orrs	r2, r0
 8001086:	1e51      	subs	r1, r2, #1
 8001088:	418a      	sbcs	r2, r1
 800108a:	431a      	orrs	r2, r3
 800108c:	2307      	movs	r3, #7
 800108e:	0019      	movs	r1, r3
 8001090:	2400      	movs	r4, #0
 8001092:	4011      	ands	r1, r2
 8001094:	4213      	tst	r3, r2
 8001096:	d00c      	beq.n	80010b2 <__aeabi_ddiv+0x436>
 8001098:	230f      	movs	r3, #15
 800109a:	4013      	ands	r3, r2
 800109c:	2b04      	cmp	r3, #4
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x426>
 80010a0:	e0f9      	b.n	8001296 <__aeabi_ddiv+0x61a>
 80010a2:	1d11      	adds	r1, r2, #4
 80010a4:	4291      	cmp	r1, r2
 80010a6:	419b      	sbcs	r3, r3
 80010a8:	000a      	movs	r2, r1
 80010aa:	425b      	negs	r3, r3
 80010ac:	0759      	lsls	r1, r3, #29
 80010ae:	025b      	lsls	r3, r3, #9
 80010b0:	0b1c      	lsrs	r4, r3, #12
 80010b2:	08d2      	lsrs	r2, r2, #3
 80010b4:	430a      	orrs	r2, r1
 80010b6:	4690      	mov	r8, r2
 80010b8:	2300      	movs	r3, #0
 80010ba:	e63f      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 80010bc:	2480      	movs	r4, #128	@ 0x80
 80010be:	464b      	mov	r3, r9
 80010c0:	0324      	lsls	r4, r4, #12
 80010c2:	4223      	tst	r3, r4
 80010c4:	d009      	beq.n	80010da <__aeabi_ddiv+0x45e>
 80010c6:	465b      	mov	r3, fp
 80010c8:	4223      	tst	r3, r4
 80010ca:	d106      	bne.n	80010da <__aeabi_ddiv+0x45e>
 80010cc:	431c      	orrs	r4, r3
 80010ce:	0324      	lsls	r4, r4, #12
 80010d0:	002e      	movs	r6, r5
 80010d2:	4690      	mov	r8, r2
 80010d4:	4b71      	ldr	r3, [pc, #452]	@ (800129c <__aeabi_ddiv+0x620>)
 80010d6:	0b24      	lsrs	r4, r4, #12
 80010d8:	e630      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 80010da:	2480      	movs	r4, #128	@ 0x80
 80010dc:	464b      	mov	r3, r9
 80010de:	0324      	lsls	r4, r4, #12
 80010e0:	431c      	orrs	r4, r3
 80010e2:	0324      	lsls	r4, r4, #12
 80010e4:	9e02      	ldr	r6, [sp, #8]
 80010e6:	4b6d      	ldr	r3, [pc, #436]	@ (800129c <__aeabi_ddiv+0x620>)
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	e627      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x476>
 80010f0:	e700      	b.n	8000ef4 <__aeabi_ddiv+0x278>
 80010f2:	9800      	ldr	r0, [sp, #0]
 80010f4:	1e51      	subs	r1, r2, #1
 80010f6:	4684      	mov	ip, r0
 80010f8:	4464      	add	r4, ip
 80010fa:	4284      	cmp	r4, r0
 80010fc:	d200      	bcs.n	8001100 <__aeabi_ddiv+0x484>
 80010fe:	e084      	b.n	800120a <__aeabi_ddiv+0x58e>
 8001100:	42bc      	cmp	r4, r7
 8001102:	d200      	bcs.n	8001106 <__aeabi_ddiv+0x48a>
 8001104:	e0ae      	b.n	8001264 <__aeabi_ddiv+0x5e8>
 8001106:	d100      	bne.n	800110a <__aeabi_ddiv+0x48e>
 8001108:	e0c1      	b.n	800128e <__aeabi_ddiv+0x612>
 800110a:	000a      	movs	r2, r1
 800110c:	e6f0      	b.n	8000ef0 <__aeabi_ddiv+0x274>
 800110e:	4542      	cmp	r2, r8
 8001110:	d900      	bls.n	8001114 <__aeabi_ddiv+0x498>
 8001112:	e62c      	b.n	8000d6e <__aeabi_ddiv+0xf2>
 8001114:	464b      	mov	r3, r9
 8001116:	07dc      	lsls	r4, r3, #31
 8001118:	0858      	lsrs	r0, r3, #1
 800111a:	4643      	mov	r3, r8
 800111c:	085b      	lsrs	r3, r3, #1
 800111e:	431c      	orrs	r4, r3
 8001120:	4643      	mov	r3, r8
 8001122:	07df      	lsls	r7, r3, #31
 8001124:	e62a      	b.n	8000d7c <__aeabi_ddiv+0x100>
 8001126:	f001 f82d 	bl	8002184 <__clzsi2>
 800112a:	2315      	movs	r3, #21
 800112c:	469c      	mov	ip, r3
 800112e:	4484      	add	ip, r0
 8001130:	0002      	movs	r2, r0
 8001132:	4663      	mov	r3, ip
 8001134:	3220      	adds	r2, #32
 8001136:	2b1c      	cmp	r3, #28
 8001138:	dc00      	bgt.n	800113c <__aeabi_ddiv+0x4c0>
 800113a:	e72e      	b.n	8000f9a <__aeabi_ddiv+0x31e>
 800113c:	0023      	movs	r3, r4
 800113e:	3808      	subs	r0, #8
 8001140:	4083      	lsls	r3, r0
 8001142:	4699      	mov	r9, r3
 8001144:	2300      	movs	r3, #0
 8001146:	4698      	mov	r8, r3
 8001148:	e736      	b.n	8000fb8 <__aeabi_ddiv+0x33c>
 800114a:	f001 f81b 	bl	8002184 <__clzsi2>
 800114e:	0002      	movs	r2, r0
 8001150:	0003      	movs	r3, r0
 8001152:	3215      	adds	r2, #21
 8001154:	3320      	adds	r3, #32
 8001156:	2a1c      	cmp	r2, #28
 8001158:	dc00      	bgt.n	800115c <__aeabi_ddiv+0x4e0>
 800115a:	e6fb      	b.n	8000f54 <__aeabi_ddiv+0x2d8>
 800115c:	9900      	ldr	r1, [sp, #0]
 800115e:	3808      	subs	r0, #8
 8001160:	4081      	lsls	r1, r0
 8001162:	2200      	movs	r2, #0
 8001164:	468b      	mov	fp, r1
 8001166:	e702      	b.n	8000f6e <__aeabi_ddiv+0x2f2>
 8001168:	9900      	ldr	r1, [sp, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	468c      	mov	ip, r1
 800116e:	4464      	add	r4, ip
 8001170:	42a1      	cmp	r1, r4
 8001172:	d900      	bls.n	8001176 <__aeabi_ddiv+0x4fa>
 8001174:	e69a      	b.n	8000eac <__aeabi_ddiv+0x230>
 8001176:	42a2      	cmp	r2, r4
 8001178:	d800      	bhi.n	800117c <__aeabi_ddiv+0x500>
 800117a:	e697      	b.n	8000eac <__aeabi_ddiv+0x230>
 800117c:	1e83      	subs	r3, r0, #2
 800117e:	4464      	add	r4, ip
 8001180:	e694      	b.n	8000eac <__aeabi_ddiv+0x230>
 8001182:	46ac      	mov	ip, r5
 8001184:	4461      	add	r1, ip
 8001186:	3f01      	subs	r7, #1
 8001188:	428d      	cmp	r5, r1
 800118a:	d900      	bls.n	800118e <__aeabi_ddiv+0x512>
 800118c:	e680      	b.n	8000e90 <__aeabi_ddiv+0x214>
 800118e:	428a      	cmp	r2, r1
 8001190:	d800      	bhi.n	8001194 <__aeabi_ddiv+0x518>
 8001192:	e67d      	b.n	8000e90 <__aeabi_ddiv+0x214>
 8001194:	1e87      	subs	r7, r0, #2
 8001196:	4461      	add	r1, ip
 8001198:	e67a      	b.n	8000e90 <__aeabi_ddiv+0x214>
 800119a:	4285      	cmp	r5, r0
 800119c:	d000      	beq.n	80011a0 <__aeabi_ddiv+0x524>
 800119e:	e65f      	b.n	8000e60 <__aeabi_ddiv+0x1e4>
 80011a0:	45b9      	cmp	r9, r7
 80011a2:	d900      	bls.n	80011a6 <__aeabi_ddiv+0x52a>
 80011a4:	e65c      	b.n	8000e60 <__aeabi_ddiv+0x1e4>
 80011a6:	e656      	b.n	8000e56 <__aeabi_ddiv+0x1da>
 80011a8:	42a2      	cmp	r2, r4
 80011aa:	d800      	bhi.n	80011ae <__aeabi_ddiv+0x532>
 80011ac:	e61a      	b.n	8000de4 <__aeabi_ddiv+0x168>
 80011ae:	1e83      	subs	r3, r0, #2
 80011b0:	4464      	add	r4, ip
 80011b2:	e617      	b.n	8000de4 <__aeabi_ddiv+0x168>
 80011b4:	428a      	cmp	r2, r1
 80011b6:	d800      	bhi.n	80011ba <__aeabi_ddiv+0x53e>
 80011b8:	e600      	b.n	8000dbc <__aeabi_ddiv+0x140>
 80011ba:	46ac      	mov	ip, r5
 80011bc:	1e83      	subs	r3, r0, #2
 80011be:	4698      	mov	r8, r3
 80011c0:	4461      	add	r1, ip
 80011c2:	e5fb      	b.n	8000dbc <__aeabi_ddiv+0x140>
 80011c4:	4837      	ldr	r0, [pc, #220]	@ (80012a4 <__aeabi_ddiv+0x628>)
 80011c6:	0014      	movs	r4, r2
 80011c8:	4450      	add	r0, sl
 80011ca:	4082      	lsls	r2, r0
 80011cc:	465b      	mov	r3, fp
 80011ce:	0017      	movs	r7, r2
 80011d0:	4083      	lsls	r3, r0
 80011d2:	40cc      	lsrs	r4, r1
 80011d4:	1e7a      	subs	r2, r7, #1
 80011d6:	4197      	sbcs	r7, r2
 80011d8:	4323      	orrs	r3, r4
 80011da:	433b      	orrs	r3, r7
 80011dc:	001a      	movs	r2, r3
 80011de:	465b      	mov	r3, fp
 80011e0:	40cb      	lsrs	r3, r1
 80011e2:	0751      	lsls	r1, r2, #29
 80011e4:	d009      	beq.n	80011fa <__aeabi_ddiv+0x57e>
 80011e6:	210f      	movs	r1, #15
 80011e8:	4011      	ands	r1, r2
 80011ea:	2904      	cmp	r1, #4
 80011ec:	d005      	beq.n	80011fa <__aeabi_ddiv+0x57e>
 80011ee:	1d11      	adds	r1, r2, #4
 80011f0:	4291      	cmp	r1, r2
 80011f2:	4192      	sbcs	r2, r2
 80011f4:	4252      	negs	r2, r2
 80011f6:	189b      	adds	r3, r3, r2
 80011f8:	000a      	movs	r2, r1
 80011fa:	0219      	lsls	r1, r3, #8
 80011fc:	d400      	bmi.n	8001200 <__aeabi_ddiv+0x584>
 80011fe:	e755      	b.n	80010ac <__aeabi_ddiv+0x430>
 8001200:	2200      	movs	r2, #0
 8001202:	2301      	movs	r3, #1
 8001204:	2400      	movs	r4, #0
 8001206:	4690      	mov	r8, r2
 8001208:	e598      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 800120a:	000a      	movs	r2, r1
 800120c:	42bc      	cmp	r4, r7
 800120e:	d000      	beq.n	8001212 <__aeabi_ddiv+0x596>
 8001210:	e66e      	b.n	8000ef0 <__aeabi_ddiv+0x274>
 8001212:	454b      	cmp	r3, r9
 8001214:	d000      	beq.n	8001218 <__aeabi_ddiv+0x59c>
 8001216:	e66b      	b.n	8000ef0 <__aeabi_ddiv+0x274>
 8001218:	e66c      	b.n	8000ef4 <__aeabi_ddiv+0x278>
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <__aeabi_ddiv+0x62c>)
 800121c:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <__aeabi_ddiv+0x630>)
 800121e:	4453      	add	r3, sl
 8001220:	4592      	cmp	sl, r2
 8001222:	da00      	bge.n	8001226 <__aeabi_ddiv+0x5aa>
 8001224:	e718      	b.n	8001058 <__aeabi_ddiv+0x3dc>
 8001226:	2101      	movs	r1, #1
 8001228:	4249      	negs	r1, r1
 800122a:	1d0a      	adds	r2, r1, #4
 800122c:	428a      	cmp	r2, r1
 800122e:	4189      	sbcs	r1, r1
 8001230:	4249      	negs	r1, r1
 8001232:	448b      	add	fp, r1
 8001234:	e666      	b.n	8000f04 <__aeabi_ddiv+0x288>
 8001236:	210f      	movs	r1, #15
 8001238:	4011      	ands	r1, r2
 800123a:	2904      	cmp	r1, #4
 800123c:	d100      	bne.n	8001240 <__aeabi_ddiv+0x5c4>
 800123e:	e661      	b.n	8000f04 <__aeabi_ddiv+0x288>
 8001240:	0011      	movs	r1, r2
 8001242:	e7f2      	b.n	800122a <__aeabi_ddiv+0x5ae>
 8001244:	42bc      	cmp	r4, r7
 8001246:	d800      	bhi.n	800124a <__aeabi_ddiv+0x5ce>
 8001248:	e60a      	b.n	8000e60 <__aeabi_ddiv+0x1e4>
 800124a:	2302      	movs	r3, #2
 800124c:	425b      	negs	r3, r3
 800124e:	469c      	mov	ip, r3
 8001250:	9900      	ldr	r1, [sp, #0]
 8001252:	444f      	add	r7, r9
 8001254:	454f      	cmp	r7, r9
 8001256:	419b      	sbcs	r3, r3
 8001258:	44e3      	add	fp, ip
 800125a:	468c      	mov	ip, r1
 800125c:	425b      	negs	r3, r3
 800125e:	4463      	add	r3, ip
 8001260:	18c0      	adds	r0, r0, r3
 8001262:	e5ff      	b.n	8000e64 <__aeabi_ddiv+0x1e8>
 8001264:	4649      	mov	r1, r9
 8001266:	9d00      	ldr	r5, [sp, #0]
 8001268:	0048      	lsls	r0, r1, #1
 800126a:	4548      	cmp	r0, r9
 800126c:	4189      	sbcs	r1, r1
 800126e:	46ac      	mov	ip, r5
 8001270:	4249      	negs	r1, r1
 8001272:	4461      	add	r1, ip
 8001274:	4681      	mov	r9, r0
 8001276:	3a02      	subs	r2, #2
 8001278:	1864      	adds	r4, r4, r1
 800127a:	e7c7      	b.n	800120c <__aeabi_ddiv+0x590>
 800127c:	2480      	movs	r4, #128	@ 0x80
 800127e:	465b      	mov	r3, fp
 8001280:	0324      	lsls	r4, r4, #12
 8001282:	431c      	orrs	r4, r3
 8001284:	0324      	lsls	r4, r4, #12
 8001286:	4690      	mov	r8, r2
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__aeabi_ddiv+0x620>)
 800128a:	0b24      	lsrs	r4, r4, #12
 800128c:	e556      	b.n	8000d3c <__aeabi_ddiv+0xc0>
 800128e:	4599      	cmp	r9, r3
 8001290:	d3e8      	bcc.n	8001264 <__aeabi_ddiv+0x5e8>
 8001292:	000a      	movs	r2, r1
 8001294:	e7bd      	b.n	8001212 <__aeabi_ddiv+0x596>
 8001296:	2300      	movs	r3, #0
 8001298:	e708      	b.n	80010ac <__aeabi_ddiv+0x430>
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	000007ff 	.word	0x000007ff
 80012a0:	0000043e 	.word	0x0000043e
 80012a4:	0000041e 	.word	0x0000041e
 80012a8:	000003ff 	.word	0x000003ff
 80012ac:	fffffc02 	.word	0xfffffc02

080012b0 <__aeabi_dmul>:
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	4657      	mov	r7, sl
 80012b4:	46de      	mov	lr, fp
 80012b6:	464e      	mov	r6, r9
 80012b8:	4645      	mov	r5, r8
 80012ba:	b5e0      	push	{r5, r6, r7, lr}
 80012bc:	001f      	movs	r7, r3
 80012be:	030b      	lsls	r3, r1, #12
 80012c0:	0b1b      	lsrs	r3, r3, #12
 80012c2:	0016      	movs	r6, r2
 80012c4:	469a      	mov	sl, r3
 80012c6:	0fca      	lsrs	r2, r1, #31
 80012c8:	004b      	lsls	r3, r1, #1
 80012ca:	0004      	movs	r4, r0
 80012cc:	4693      	mov	fp, r2
 80012ce:	b087      	sub	sp, #28
 80012d0:	0d5b      	lsrs	r3, r3, #21
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dmul+0x26>
 80012d4:	e0d5      	b.n	8001482 <__aeabi_dmul+0x1d2>
 80012d6:	4abb      	ldr	r2, [pc, #748]	@ (80015c4 <__aeabi_dmul+0x314>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d100      	bne.n	80012de <__aeabi_dmul+0x2e>
 80012dc:	e0f8      	b.n	80014d0 <__aeabi_dmul+0x220>
 80012de:	4651      	mov	r1, sl
 80012e0:	0f42      	lsrs	r2, r0, #29
 80012e2:	00c9      	lsls	r1, r1, #3
 80012e4:	430a      	orrs	r2, r1
 80012e6:	2180      	movs	r1, #128	@ 0x80
 80012e8:	0409      	lsls	r1, r1, #16
 80012ea:	4311      	orrs	r1, r2
 80012ec:	00c2      	lsls	r2, r0, #3
 80012ee:	4691      	mov	r9, r2
 80012f0:	4ab5      	ldr	r2, [pc, #724]	@ (80015c8 <__aeabi_dmul+0x318>)
 80012f2:	468a      	mov	sl, r1
 80012f4:	189d      	adds	r5, r3, r2
 80012f6:	2300      	movs	r3, #0
 80012f8:	4698      	mov	r8, r3
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	033c      	lsls	r4, r7, #12
 80012fe:	007b      	lsls	r3, r7, #1
 8001300:	0ffa      	lsrs	r2, r7, #31
 8001302:	0030      	movs	r0, r6
 8001304:	0b24      	lsrs	r4, r4, #12
 8001306:	0d5b      	lsrs	r3, r3, #21
 8001308:	9200      	str	r2, [sp, #0]
 800130a:	d100      	bne.n	800130e <__aeabi_dmul+0x5e>
 800130c:	e096      	b.n	800143c <__aeabi_dmul+0x18c>
 800130e:	4aad      	ldr	r2, [pc, #692]	@ (80015c4 <__aeabi_dmul+0x314>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d031      	beq.n	8001378 <__aeabi_dmul+0xc8>
 8001314:	0f72      	lsrs	r2, r6, #29
 8001316:	00e4      	lsls	r4, r4, #3
 8001318:	4322      	orrs	r2, r4
 800131a:	2480      	movs	r4, #128	@ 0x80
 800131c:	0424      	lsls	r4, r4, #16
 800131e:	4314      	orrs	r4, r2
 8001320:	4aa9      	ldr	r2, [pc, #676]	@ (80015c8 <__aeabi_dmul+0x318>)
 8001322:	00f0      	lsls	r0, r6, #3
 8001324:	4694      	mov	ip, r2
 8001326:	4463      	add	r3, ip
 8001328:	195b      	adds	r3, r3, r5
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	9201      	str	r2, [sp, #4]
 800132e:	4642      	mov	r2, r8
 8001330:	2600      	movs	r6, #0
 8001332:	2a0a      	cmp	r2, #10
 8001334:	dc42      	bgt.n	80013bc <__aeabi_dmul+0x10c>
 8001336:	465a      	mov	r2, fp
 8001338:	9900      	ldr	r1, [sp, #0]
 800133a:	404a      	eors	r2, r1
 800133c:	4693      	mov	fp, r2
 800133e:	4642      	mov	r2, r8
 8001340:	2a02      	cmp	r2, #2
 8001342:	dc32      	bgt.n	80013aa <__aeabi_dmul+0xfa>
 8001344:	3a01      	subs	r2, #1
 8001346:	2a01      	cmp	r2, #1
 8001348:	d900      	bls.n	800134c <__aeabi_dmul+0x9c>
 800134a:	e149      	b.n	80015e0 <__aeabi_dmul+0x330>
 800134c:	2e02      	cmp	r6, #2
 800134e:	d100      	bne.n	8001352 <__aeabi_dmul+0xa2>
 8001350:	e0ca      	b.n	80014e8 <__aeabi_dmul+0x238>
 8001352:	2e01      	cmp	r6, #1
 8001354:	d13d      	bne.n	80013d2 <__aeabi_dmul+0x122>
 8001356:	2300      	movs	r3, #0
 8001358:	2400      	movs	r4, #0
 800135a:	2200      	movs	r2, #0
 800135c:	0010      	movs	r0, r2
 800135e:	465a      	mov	r2, fp
 8001360:	051b      	lsls	r3, r3, #20
 8001362:	4323      	orrs	r3, r4
 8001364:	07d2      	lsls	r2, r2, #31
 8001366:	4313      	orrs	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	b007      	add	sp, #28
 800136c:	bcf0      	pop	{r4, r5, r6, r7}
 800136e:	46bb      	mov	fp, r7
 8001370:	46b2      	mov	sl, r6
 8001372:	46a9      	mov	r9, r5
 8001374:	46a0      	mov	r8, r4
 8001376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001378:	4b92      	ldr	r3, [pc, #584]	@ (80015c4 <__aeabi_dmul+0x314>)
 800137a:	4326      	orrs	r6, r4
 800137c:	18eb      	adds	r3, r5, r3
 800137e:	2e00      	cmp	r6, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_dmul+0xd4>
 8001382:	e0bb      	b.n	80014fc <__aeabi_dmul+0x24c>
 8001384:	2203      	movs	r2, #3
 8001386:	4641      	mov	r1, r8
 8001388:	4311      	orrs	r1, r2
 800138a:	465a      	mov	r2, fp
 800138c:	4688      	mov	r8, r1
 800138e:	9900      	ldr	r1, [sp, #0]
 8001390:	404a      	eors	r2, r1
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	0109      	lsls	r1, r1, #4
 8001396:	468c      	mov	ip, r1
 8001398:	0029      	movs	r1, r5
 800139a:	4461      	add	r1, ip
 800139c:	9101      	str	r1, [sp, #4]
 800139e:	4641      	mov	r1, r8
 80013a0:	290a      	cmp	r1, #10
 80013a2:	dd00      	ble.n	80013a6 <__aeabi_dmul+0xf6>
 80013a4:	e233      	b.n	800180e <__aeabi_dmul+0x55e>
 80013a6:	4693      	mov	fp, r2
 80013a8:	2603      	movs	r6, #3
 80013aa:	4642      	mov	r2, r8
 80013ac:	2701      	movs	r7, #1
 80013ae:	4097      	lsls	r7, r2
 80013b0:	21a6      	movs	r1, #166	@ 0xa6
 80013b2:	003a      	movs	r2, r7
 80013b4:	00c9      	lsls	r1, r1, #3
 80013b6:	400a      	ands	r2, r1
 80013b8:	420f      	tst	r7, r1
 80013ba:	d031      	beq.n	8001420 <__aeabi_dmul+0x170>
 80013bc:	9e02      	ldr	r6, [sp, #8]
 80013be:	2e02      	cmp	r6, #2
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dmul+0x114>
 80013c2:	e235      	b.n	8001830 <__aeabi_dmul+0x580>
 80013c4:	2e03      	cmp	r6, #3
 80013c6:	d100      	bne.n	80013ca <__aeabi_dmul+0x11a>
 80013c8:	e1d2      	b.n	8001770 <__aeabi_dmul+0x4c0>
 80013ca:	4654      	mov	r4, sl
 80013cc:	4648      	mov	r0, r9
 80013ce:	2e01      	cmp	r6, #1
 80013d0:	d0c1      	beq.n	8001356 <__aeabi_dmul+0xa6>
 80013d2:	9a01      	ldr	r2, [sp, #4]
 80013d4:	4b7d      	ldr	r3, [pc, #500]	@ (80015cc <__aeabi_dmul+0x31c>)
 80013d6:	4694      	mov	ip, r2
 80013d8:	4463      	add	r3, ip
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dc00      	bgt.n	80013e0 <__aeabi_dmul+0x130>
 80013de:	e0c0      	b.n	8001562 <__aeabi_dmul+0x2b2>
 80013e0:	0742      	lsls	r2, r0, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_dmul+0x148>
 80013e4:	220f      	movs	r2, #15
 80013e6:	4002      	ands	r2, r0
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_dmul+0x148>
 80013ec:	1d02      	adds	r2, r0, #4
 80013ee:	4282      	cmp	r2, r0
 80013f0:	4180      	sbcs	r0, r0
 80013f2:	4240      	negs	r0, r0
 80013f4:	1824      	adds	r4, r4, r0
 80013f6:	0010      	movs	r0, r2
 80013f8:	01e2      	lsls	r2, r4, #7
 80013fa:	d506      	bpl.n	800140a <__aeabi_dmul+0x15a>
 80013fc:	4b74      	ldr	r3, [pc, #464]	@ (80015d0 <__aeabi_dmul+0x320>)
 80013fe:	9a01      	ldr	r2, [sp, #4]
 8001400:	401c      	ands	r4, r3
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	4694      	mov	ip, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4463      	add	r3, ip
 800140a:	4a72      	ldr	r2, [pc, #456]	@ (80015d4 <__aeabi_dmul+0x324>)
 800140c:	4293      	cmp	r3, r2
 800140e:	dc6b      	bgt.n	80014e8 <__aeabi_dmul+0x238>
 8001410:	0762      	lsls	r2, r4, #29
 8001412:	08c0      	lsrs	r0, r0, #3
 8001414:	0264      	lsls	r4, r4, #9
 8001416:	055b      	lsls	r3, r3, #21
 8001418:	4302      	orrs	r2, r0
 800141a:	0b24      	lsrs	r4, r4, #12
 800141c:	0d5b      	lsrs	r3, r3, #21
 800141e:	e79d      	b.n	800135c <__aeabi_dmul+0xac>
 8001420:	2190      	movs	r1, #144	@ 0x90
 8001422:	0089      	lsls	r1, r1, #2
 8001424:	420f      	tst	r7, r1
 8001426:	d163      	bne.n	80014f0 <__aeabi_dmul+0x240>
 8001428:	2288      	movs	r2, #136	@ 0x88
 800142a:	423a      	tst	r2, r7
 800142c:	d100      	bne.n	8001430 <__aeabi_dmul+0x180>
 800142e:	e0d7      	b.n	80015e0 <__aeabi_dmul+0x330>
 8001430:	9b00      	ldr	r3, [sp, #0]
 8001432:	46a2      	mov	sl, r4
 8001434:	469b      	mov	fp, r3
 8001436:	4681      	mov	r9, r0
 8001438:	9602      	str	r6, [sp, #8]
 800143a:	e7bf      	b.n	80013bc <__aeabi_dmul+0x10c>
 800143c:	0023      	movs	r3, r4
 800143e:	4333      	orrs	r3, r6
 8001440:	d100      	bne.n	8001444 <__aeabi_dmul+0x194>
 8001442:	e07f      	b.n	8001544 <__aeabi_dmul+0x294>
 8001444:	2c00      	cmp	r4, #0
 8001446:	d100      	bne.n	800144a <__aeabi_dmul+0x19a>
 8001448:	e1ad      	b.n	80017a6 <__aeabi_dmul+0x4f6>
 800144a:	0020      	movs	r0, r4
 800144c:	f000 fe9a 	bl	8002184 <__clzsi2>
 8001450:	0002      	movs	r2, r0
 8001452:	0003      	movs	r3, r0
 8001454:	3a0b      	subs	r2, #11
 8001456:	201d      	movs	r0, #29
 8001458:	0019      	movs	r1, r3
 800145a:	1a82      	subs	r2, r0, r2
 800145c:	0030      	movs	r0, r6
 800145e:	3908      	subs	r1, #8
 8001460:	40d0      	lsrs	r0, r2
 8001462:	408c      	lsls	r4, r1
 8001464:	4304      	orrs	r4, r0
 8001466:	0030      	movs	r0, r6
 8001468:	4088      	lsls	r0, r1
 800146a:	4a5b      	ldr	r2, [pc, #364]	@ (80015d8 <__aeabi_dmul+0x328>)
 800146c:	1aeb      	subs	r3, r5, r3
 800146e:	4694      	mov	ip, r2
 8001470:	4463      	add	r3, ip
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	4642      	mov	r2, r8
 8001478:	2600      	movs	r6, #0
 800147a:	2a0a      	cmp	r2, #10
 800147c:	dc00      	bgt.n	8001480 <__aeabi_dmul+0x1d0>
 800147e:	e75a      	b.n	8001336 <__aeabi_dmul+0x86>
 8001480:	e79c      	b.n	80013bc <__aeabi_dmul+0x10c>
 8001482:	4653      	mov	r3, sl
 8001484:	4303      	orrs	r3, r0
 8001486:	4699      	mov	r9, r3
 8001488:	d054      	beq.n	8001534 <__aeabi_dmul+0x284>
 800148a:	4653      	mov	r3, sl
 800148c:	2b00      	cmp	r3, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x1e2>
 8001490:	e177      	b.n	8001782 <__aeabi_dmul+0x4d2>
 8001492:	4650      	mov	r0, sl
 8001494:	f000 fe76 	bl	8002184 <__clzsi2>
 8001498:	230b      	movs	r3, #11
 800149a:	425b      	negs	r3, r3
 800149c:	469c      	mov	ip, r3
 800149e:	0002      	movs	r2, r0
 80014a0:	4484      	add	ip, r0
 80014a2:	0011      	movs	r1, r2
 80014a4:	4650      	mov	r0, sl
 80014a6:	3908      	subs	r1, #8
 80014a8:	4088      	lsls	r0, r1
 80014aa:	231d      	movs	r3, #29
 80014ac:	4680      	mov	r8, r0
 80014ae:	4660      	mov	r0, ip
 80014b0:	1a1b      	subs	r3, r3, r0
 80014b2:	0020      	movs	r0, r4
 80014b4:	40d8      	lsrs	r0, r3
 80014b6:	0003      	movs	r3, r0
 80014b8:	4640      	mov	r0, r8
 80014ba:	4303      	orrs	r3, r0
 80014bc:	469a      	mov	sl, r3
 80014be:	0023      	movs	r3, r4
 80014c0:	408b      	lsls	r3, r1
 80014c2:	4699      	mov	r9, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	4d44      	ldr	r5, [pc, #272]	@ (80015d8 <__aeabi_dmul+0x328>)
 80014c8:	4698      	mov	r8, r3
 80014ca:	1aad      	subs	r5, r5, r2
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	e715      	b.n	80012fc <__aeabi_dmul+0x4c>
 80014d0:	4652      	mov	r2, sl
 80014d2:	4302      	orrs	r2, r0
 80014d4:	4691      	mov	r9, r2
 80014d6:	d126      	bne.n	8001526 <__aeabi_dmul+0x276>
 80014d8:	2200      	movs	r2, #0
 80014da:	001d      	movs	r5, r3
 80014dc:	2302      	movs	r3, #2
 80014de:	4692      	mov	sl, r2
 80014e0:	3208      	adds	r2, #8
 80014e2:	4690      	mov	r8, r2
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	e709      	b.n	80012fc <__aeabi_dmul+0x4c>
 80014e8:	2400      	movs	r4, #0
 80014ea:	2200      	movs	r2, #0
 80014ec:	4b35      	ldr	r3, [pc, #212]	@ (80015c4 <__aeabi_dmul+0x314>)
 80014ee:	e735      	b.n	800135c <__aeabi_dmul+0xac>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2480      	movs	r4, #128	@ 0x80
 80014f4:	469b      	mov	fp, r3
 80014f6:	0324      	lsls	r4, r4, #12
 80014f8:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <__aeabi_dmul+0x314>)
 80014fa:	e72f      	b.n	800135c <__aeabi_dmul+0xac>
 80014fc:	2202      	movs	r2, #2
 80014fe:	4641      	mov	r1, r8
 8001500:	4311      	orrs	r1, r2
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	4694      	mov	ip, r2
 8001508:	002a      	movs	r2, r5
 800150a:	4462      	add	r2, ip
 800150c:	4688      	mov	r8, r1
 800150e:	9201      	str	r2, [sp, #4]
 8001510:	290a      	cmp	r1, #10
 8001512:	dd00      	ble.n	8001516 <__aeabi_dmul+0x266>
 8001514:	e752      	b.n	80013bc <__aeabi_dmul+0x10c>
 8001516:	465a      	mov	r2, fp
 8001518:	2000      	movs	r0, #0
 800151a:	9900      	ldr	r1, [sp, #0]
 800151c:	0004      	movs	r4, r0
 800151e:	404a      	eors	r2, r1
 8001520:	4693      	mov	fp, r2
 8001522:	2602      	movs	r6, #2
 8001524:	e70b      	b.n	800133e <__aeabi_dmul+0x8e>
 8001526:	220c      	movs	r2, #12
 8001528:	001d      	movs	r5, r3
 800152a:	2303      	movs	r3, #3
 800152c:	4681      	mov	r9, r0
 800152e:	4690      	mov	r8, r2
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	e6e3      	b.n	80012fc <__aeabi_dmul+0x4c>
 8001534:	2300      	movs	r3, #0
 8001536:	469a      	mov	sl, r3
 8001538:	3304      	adds	r3, #4
 800153a:	4698      	mov	r8, r3
 800153c:	3b03      	subs	r3, #3
 800153e:	2500      	movs	r5, #0
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	e6db      	b.n	80012fc <__aeabi_dmul+0x4c>
 8001544:	4642      	mov	r2, r8
 8001546:	3301      	adds	r3, #1
 8001548:	431a      	orrs	r2, r3
 800154a:	002b      	movs	r3, r5
 800154c:	4690      	mov	r8, r2
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	4642      	mov	r2, r8
 8001554:	2400      	movs	r4, #0
 8001556:	2000      	movs	r0, #0
 8001558:	2601      	movs	r6, #1
 800155a:	2a0a      	cmp	r2, #10
 800155c:	dc00      	bgt.n	8001560 <__aeabi_dmul+0x2b0>
 800155e:	e6ea      	b.n	8001336 <__aeabi_dmul+0x86>
 8001560:	e72c      	b.n	80013bc <__aeabi_dmul+0x10c>
 8001562:	2201      	movs	r2, #1
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	2a38      	cmp	r2, #56	@ 0x38
 8001568:	dd00      	ble.n	800156c <__aeabi_dmul+0x2bc>
 800156a:	e6f4      	b.n	8001356 <__aeabi_dmul+0xa6>
 800156c:	2a1f      	cmp	r2, #31
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dmul+0x2c2>
 8001570:	e12a      	b.n	80017c8 <__aeabi_dmul+0x518>
 8001572:	211f      	movs	r1, #31
 8001574:	4249      	negs	r1, r1
 8001576:	1acb      	subs	r3, r1, r3
 8001578:	0021      	movs	r1, r4
 800157a:	40d9      	lsrs	r1, r3
 800157c:	000b      	movs	r3, r1
 800157e:	2a20      	cmp	r2, #32
 8001580:	d005      	beq.n	800158e <__aeabi_dmul+0x2de>
 8001582:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <__aeabi_dmul+0x32c>)
 8001584:	9d01      	ldr	r5, [sp, #4]
 8001586:	4694      	mov	ip, r2
 8001588:	4465      	add	r5, ip
 800158a:	40ac      	lsls	r4, r5
 800158c:	4320      	orrs	r0, r4
 800158e:	1e42      	subs	r2, r0, #1
 8001590:	4190      	sbcs	r0, r2
 8001592:	4318      	orrs	r0, r3
 8001594:	2307      	movs	r3, #7
 8001596:	0019      	movs	r1, r3
 8001598:	2400      	movs	r4, #0
 800159a:	4001      	ands	r1, r0
 800159c:	4203      	tst	r3, r0
 800159e:	d00c      	beq.n	80015ba <__aeabi_dmul+0x30a>
 80015a0:	230f      	movs	r3, #15
 80015a2:	4003      	ands	r3, r0
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x2fa>
 80015a8:	e140      	b.n	800182c <__aeabi_dmul+0x57c>
 80015aa:	1d03      	adds	r3, r0, #4
 80015ac:	4283      	cmp	r3, r0
 80015ae:	41a4      	sbcs	r4, r4
 80015b0:	0018      	movs	r0, r3
 80015b2:	4264      	negs	r4, r4
 80015b4:	0761      	lsls	r1, r4, #29
 80015b6:	0264      	lsls	r4, r4, #9
 80015b8:	0b24      	lsrs	r4, r4, #12
 80015ba:	08c2      	lsrs	r2, r0, #3
 80015bc:	2300      	movs	r3, #0
 80015be:	430a      	orrs	r2, r1
 80015c0:	e6cc      	b.n	800135c <__aeabi_dmul+0xac>
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	000007ff 	.word	0x000007ff
 80015c8:	fffffc01 	.word	0xfffffc01
 80015cc:	000003ff 	.word	0x000003ff
 80015d0:	feffffff 	.word	0xfeffffff
 80015d4:	000007fe 	.word	0x000007fe
 80015d8:	fffffc0d 	.word	0xfffffc0d
 80015dc:	0000043e 	.word	0x0000043e
 80015e0:	4649      	mov	r1, r9
 80015e2:	464a      	mov	r2, r9
 80015e4:	0409      	lsls	r1, r1, #16
 80015e6:	0c09      	lsrs	r1, r1, #16
 80015e8:	000d      	movs	r5, r1
 80015ea:	0c16      	lsrs	r6, r2, #16
 80015ec:	0c02      	lsrs	r2, r0, #16
 80015ee:	0400      	lsls	r0, r0, #16
 80015f0:	0c00      	lsrs	r0, r0, #16
 80015f2:	4345      	muls	r5, r0
 80015f4:	46ac      	mov	ip, r5
 80015f6:	0005      	movs	r5, r0
 80015f8:	4375      	muls	r5, r6
 80015fa:	46a8      	mov	r8, r5
 80015fc:	0015      	movs	r5, r2
 80015fe:	000f      	movs	r7, r1
 8001600:	4375      	muls	r5, r6
 8001602:	9200      	str	r2, [sp, #0]
 8001604:	9502      	str	r5, [sp, #8]
 8001606:	002a      	movs	r2, r5
 8001608:	9d00      	ldr	r5, [sp, #0]
 800160a:	436f      	muls	r7, r5
 800160c:	4665      	mov	r5, ip
 800160e:	0c2d      	lsrs	r5, r5, #16
 8001610:	46a9      	mov	r9, r5
 8001612:	4447      	add	r7, r8
 8001614:	444f      	add	r7, r9
 8001616:	45b8      	cmp	r8, r7
 8001618:	d905      	bls.n	8001626 <__aeabi_dmul+0x376>
 800161a:	0015      	movs	r5, r2
 800161c:	2280      	movs	r2, #128	@ 0x80
 800161e:	0252      	lsls	r2, r2, #9
 8001620:	4690      	mov	r8, r2
 8001622:	4445      	add	r5, r8
 8001624:	9502      	str	r5, [sp, #8]
 8001626:	0c3d      	lsrs	r5, r7, #16
 8001628:	9503      	str	r5, [sp, #12]
 800162a:	4665      	mov	r5, ip
 800162c:	042d      	lsls	r5, r5, #16
 800162e:	043f      	lsls	r7, r7, #16
 8001630:	0c2d      	lsrs	r5, r5, #16
 8001632:	46ac      	mov	ip, r5
 8001634:	003d      	movs	r5, r7
 8001636:	4465      	add	r5, ip
 8001638:	9504      	str	r5, [sp, #16]
 800163a:	0c25      	lsrs	r5, r4, #16
 800163c:	0424      	lsls	r4, r4, #16
 800163e:	0c24      	lsrs	r4, r4, #16
 8001640:	46ac      	mov	ip, r5
 8001642:	0025      	movs	r5, r4
 8001644:	4375      	muls	r5, r6
 8001646:	46a8      	mov	r8, r5
 8001648:	4665      	mov	r5, ip
 800164a:	000f      	movs	r7, r1
 800164c:	4369      	muls	r1, r5
 800164e:	4441      	add	r1, r8
 8001650:	4689      	mov	r9, r1
 8001652:	4367      	muls	r7, r4
 8001654:	0c39      	lsrs	r1, r7, #16
 8001656:	4449      	add	r1, r9
 8001658:	436e      	muls	r6, r5
 800165a:	4588      	cmp	r8, r1
 800165c:	d903      	bls.n	8001666 <__aeabi_dmul+0x3b6>
 800165e:	2280      	movs	r2, #128	@ 0x80
 8001660:	0252      	lsls	r2, r2, #9
 8001662:	4690      	mov	r8, r2
 8001664:	4446      	add	r6, r8
 8001666:	0c0d      	lsrs	r5, r1, #16
 8001668:	46a8      	mov	r8, r5
 800166a:	0035      	movs	r5, r6
 800166c:	4445      	add	r5, r8
 800166e:	9505      	str	r5, [sp, #20]
 8001670:	9d03      	ldr	r5, [sp, #12]
 8001672:	043f      	lsls	r7, r7, #16
 8001674:	46a8      	mov	r8, r5
 8001676:	0c3f      	lsrs	r7, r7, #16
 8001678:	0409      	lsls	r1, r1, #16
 800167a:	19c9      	adds	r1, r1, r7
 800167c:	4488      	add	r8, r1
 800167e:	4645      	mov	r5, r8
 8001680:	9503      	str	r5, [sp, #12]
 8001682:	4655      	mov	r5, sl
 8001684:	042e      	lsls	r6, r5, #16
 8001686:	0c36      	lsrs	r6, r6, #16
 8001688:	0c2f      	lsrs	r7, r5, #16
 800168a:	0035      	movs	r5, r6
 800168c:	4345      	muls	r5, r0
 800168e:	4378      	muls	r0, r7
 8001690:	4681      	mov	r9, r0
 8001692:	0038      	movs	r0, r7
 8001694:	46a8      	mov	r8, r5
 8001696:	0c2d      	lsrs	r5, r5, #16
 8001698:	46aa      	mov	sl, r5
 800169a:	9a00      	ldr	r2, [sp, #0]
 800169c:	4350      	muls	r0, r2
 800169e:	4372      	muls	r2, r6
 80016a0:	444a      	add	r2, r9
 80016a2:	4452      	add	r2, sl
 80016a4:	4591      	cmp	r9, r2
 80016a6:	d903      	bls.n	80016b0 <__aeabi_dmul+0x400>
 80016a8:	2580      	movs	r5, #128	@ 0x80
 80016aa:	026d      	lsls	r5, r5, #9
 80016ac:	46a9      	mov	r9, r5
 80016ae:	4448      	add	r0, r9
 80016b0:	0c15      	lsrs	r5, r2, #16
 80016b2:	46a9      	mov	r9, r5
 80016b4:	4645      	mov	r5, r8
 80016b6:	042d      	lsls	r5, r5, #16
 80016b8:	0c2d      	lsrs	r5, r5, #16
 80016ba:	46a8      	mov	r8, r5
 80016bc:	4665      	mov	r5, ip
 80016be:	437d      	muls	r5, r7
 80016c0:	0412      	lsls	r2, r2, #16
 80016c2:	4448      	add	r0, r9
 80016c4:	4490      	add	r8, r2
 80016c6:	46a9      	mov	r9, r5
 80016c8:	0032      	movs	r2, r6
 80016ca:	4665      	mov	r5, ip
 80016cc:	4362      	muls	r2, r4
 80016ce:	436e      	muls	r6, r5
 80016d0:	437c      	muls	r4, r7
 80016d2:	0c17      	lsrs	r7, r2, #16
 80016d4:	1936      	adds	r6, r6, r4
 80016d6:	19bf      	adds	r7, r7, r6
 80016d8:	42bc      	cmp	r4, r7
 80016da:	d903      	bls.n	80016e4 <__aeabi_dmul+0x434>
 80016dc:	2480      	movs	r4, #128	@ 0x80
 80016de:	0264      	lsls	r4, r4, #9
 80016e0:	46a4      	mov	ip, r4
 80016e2:	44e1      	add	r9, ip
 80016e4:	9c02      	ldr	r4, [sp, #8]
 80016e6:	9e03      	ldr	r6, [sp, #12]
 80016e8:	46a4      	mov	ip, r4
 80016ea:	9d05      	ldr	r5, [sp, #20]
 80016ec:	4466      	add	r6, ip
 80016ee:	428e      	cmp	r6, r1
 80016f0:	4189      	sbcs	r1, r1
 80016f2:	46ac      	mov	ip, r5
 80016f4:	0412      	lsls	r2, r2, #16
 80016f6:	043c      	lsls	r4, r7, #16
 80016f8:	0c12      	lsrs	r2, r2, #16
 80016fa:	18a2      	adds	r2, r4, r2
 80016fc:	4462      	add	r2, ip
 80016fe:	4249      	negs	r1, r1
 8001700:	1854      	adds	r4, r2, r1
 8001702:	4446      	add	r6, r8
 8001704:	46a4      	mov	ip, r4
 8001706:	4546      	cmp	r6, r8
 8001708:	41a4      	sbcs	r4, r4
 800170a:	4682      	mov	sl, r0
 800170c:	4264      	negs	r4, r4
 800170e:	46a0      	mov	r8, r4
 8001710:	42aa      	cmp	r2, r5
 8001712:	4192      	sbcs	r2, r2
 8001714:	458c      	cmp	ip, r1
 8001716:	4189      	sbcs	r1, r1
 8001718:	44e2      	add	sl, ip
 800171a:	44d0      	add	r8, sl
 800171c:	4249      	negs	r1, r1
 800171e:	4252      	negs	r2, r2
 8001720:	430a      	orrs	r2, r1
 8001722:	45a0      	cmp	r8, r4
 8001724:	41a4      	sbcs	r4, r4
 8001726:	4582      	cmp	sl, r0
 8001728:	4189      	sbcs	r1, r1
 800172a:	4264      	negs	r4, r4
 800172c:	4249      	negs	r1, r1
 800172e:	430c      	orrs	r4, r1
 8001730:	4641      	mov	r1, r8
 8001732:	0c3f      	lsrs	r7, r7, #16
 8001734:	19d2      	adds	r2, r2, r7
 8001736:	1912      	adds	r2, r2, r4
 8001738:	0dcc      	lsrs	r4, r1, #23
 800173a:	9904      	ldr	r1, [sp, #16]
 800173c:	0270      	lsls	r0, r6, #9
 800173e:	4308      	orrs	r0, r1
 8001740:	1e41      	subs	r1, r0, #1
 8001742:	4188      	sbcs	r0, r1
 8001744:	4641      	mov	r1, r8
 8001746:	444a      	add	r2, r9
 8001748:	0df6      	lsrs	r6, r6, #23
 800174a:	0252      	lsls	r2, r2, #9
 800174c:	4330      	orrs	r0, r6
 800174e:	0249      	lsls	r1, r1, #9
 8001750:	4314      	orrs	r4, r2
 8001752:	4308      	orrs	r0, r1
 8001754:	01d2      	lsls	r2, r2, #7
 8001756:	d535      	bpl.n	80017c4 <__aeabi_dmul+0x514>
 8001758:	2201      	movs	r2, #1
 800175a:	0843      	lsrs	r3, r0, #1
 800175c:	4002      	ands	r2, r0
 800175e:	4313      	orrs	r3, r2
 8001760:	07e0      	lsls	r0, r4, #31
 8001762:	4318      	orrs	r0, r3
 8001764:	0864      	lsrs	r4, r4, #1
 8001766:	e634      	b.n	80013d2 <__aeabi_dmul+0x122>
 8001768:	9b00      	ldr	r3, [sp, #0]
 800176a:	46a2      	mov	sl, r4
 800176c:	469b      	mov	fp, r3
 800176e:	4681      	mov	r9, r0
 8001770:	2480      	movs	r4, #128	@ 0x80
 8001772:	4653      	mov	r3, sl
 8001774:	0324      	lsls	r4, r4, #12
 8001776:	431c      	orrs	r4, r3
 8001778:	0324      	lsls	r4, r4, #12
 800177a:	464a      	mov	r2, r9
 800177c:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <__aeabi_dmul+0x588>)
 800177e:	0b24      	lsrs	r4, r4, #12
 8001780:	e5ec      	b.n	800135c <__aeabi_dmul+0xac>
 8001782:	f000 fcff 	bl	8002184 <__clzsi2>
 8001786:	2315      	movs	r3, #21
 8001788:	469c      	mov	ip, r3
 800178a:	4484      	add	ip, r0
 800178c:	0002      	movs	r2, r0
 800178e:	4663      	mov	r3, ip
 8001790:	3220      	adds	r2, #32
 8001792:	2b1c      	cmp	r3, #28
 8001794:	dc00      	bgt.n	8001798 <__aeabi_dmul+0x4e8>
 8001796:	e684      	b.n	80014a2 <__aeabi_dmul+0x1f2>
 8001798:	2300      	movs	r3, #0
 800179a:	4699      	mov	r9, r3
 800179c:	0023      	movs	r3, r4
 800179e:	3808      	subs	r0, #8
 80017a0:	4083      	lsls	r3, r0
 80017a2:	469a      	mov	sl, r3
 80017a4:	e68e      	b.n	80014c4 <__aeabi_dmul+0x214>
 80017a6:	f000 fced 	bl	8002184 <__clzsi2>
 80017aa:	0002      	movs	r2, r0
 80017ac:	0003      	movs	r3, r0
 80017ae:	3215      	adds	r2, #21
 80017b0:	3320      	adds	r3, #32
 80017b2:	2a1c      	cmp	r2, #28
 80017b4:	dc00      	bgt.n	80017b8 <__aeabi_dmul+0x508>
 80017b6:	e64e      	b.n	8001456 <__aeabi_dmul+0x1a6>
 80017b8:	0002      	movs	r2, r0
 80017ba:	0034      	movs	r4, r6
 80017bc:	3a08      	subs	r2, #8
 80017be:	2000      	movs	r0, #0
 80017c0:	4094      	lsls	r4, r2
 80017c2:	e652      	b.n	800146a <__aeabi_dmul+0x1ba>
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	e604      	b.n	80013d2 <__aeabi_dmul+0x122>
 80017c8:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <__aeabi_dmul+0x58c>)
 80017ca:	0021      	movs	r1, r4
 80017cc:	469c      	mov	ip, r3
 80017ce:	0003      	movs	r3, r0
 80017d0:	9d01      	ldr	r5, [sp, #4]
 80017d2:	40d3      	lsrs	r3, r2
 80017d4:	4465      	add	r5, ip
 80017d6:	40a9      	lsls	r1, r5
 80017d8:	4319      	orrs	r1, r3
 80017da:	0003      	movs	r3, r0
 80017dc:	40ab      	lsls	r3, r5
 80017de:	1e58      	subs	r0, r3, #1
 80017e0:	4183      	sbcs	r3, r0
 80017e2:	4319      	orrs	r1, r3
 80017e4:	0008      	movs	r0, r1
 80017e6:	40d4      	lsrs	r4, r2
 80017e8:	074b      	lsls	r3, r1, #29
 80017ea:	d009      	beq.n	8001800 <__aeabi_dmul+0x550>
 80017ec:	230f      	movs	r3, #15
 80017ee:	400b      	ands	r3, r1
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d005      	beq.n	8001800 <__aeabi_dmul+0x550>
 80017f4:	1d0b      	adds	r3, r1, #4
 80017f6:	428b      	cmp	r3, r1
 80017f8:	4180      	sbcs	r0, r0
 80017fa:	4240      	negs	r0, r0
 80017fc:	1824      	adds	r4, r4, r0
 80017fe:	0018      	movs	r0, r3
 8001800:	0223      	lsls	r3, r4, #8
 8001802:	d400      	bmi.n	8001806 <__aeabi_dmul+0x556>
 8001804:	e6d6      	b.n	80015b4 <__aeabi_dmul+0x304>
 8001806:	2301      	movs	r3, #1
 8001808:	2400      	movs	r4, #0
 800180a:	2200      	movs	r2, #0
 800180c:	e5a6      	b.n	800135c <__aeabi_dmul+0xac>
 800180e:	290f      	cmp	r1, #15
 8001810:	d1aa      	bne.n	8001768 <__aeabi_dmul+0x4b8>
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	4652      	mov	r2, sl
 8001816:	031b      	lsls	r3, r3, #12
 8001818:	421a      	tst	r2, r3
 800181a:	d0a9      	beq.n	8001770 <__aeabi_dmul+0x4c0>
 800181c:	421c      	tst	r4, r3
 800181e:	d1a7      	bne.n	8001770 <__aeabi_dmul+0x4c0>
 8001820:	431c      	orrs	r4, r3
 8001822:	9b00      	ldr	r3, [sp, #0]
 8001824:	0002      	movs	r2, r0
 8001826:	469b      	mov	fp, r3
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <__aeabi_dmul+0x588>)
 800182a:	e597      	b.n	800135c <__aeabi_dmul+0xac>
 800182c:	2400      	movs	r4, #0
 800182e:	e6c1      	b.n	80015b4 <__aeabi_dmul+0x304>
 8001830:	2400      	movs	r4, #0
 8001832:	4b01      	ldr	r3, [pc, #4]	@ (8001838 <__aeabi_dmul+0x588>)
 8001834:	0022      	movs	r2, r4
 8001836:	e591      	b.n	800135c <__aeabi_dmul+0xac>
 8001838:	000007ff 	.word	0x000007ff
 800183c:	0000041e 	.word	0x0000041e

08001840 <__aeabi_dsub>:
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	464e      	mov	r6, r9
 8001844:	4645      	mov	r5, r8
 8001846:	46de      	mov	lr, fp
 8001848:	4657      	mov	r7, sl
 800184a:	b5e0      	push	{r5, r6, r7, lr}
 800184c:	b085      	sub	sp, #20
 800184e:	9000      	str	r0, [sp, #0]
 8001850:	9101      	str	r1, [sp, #4]
 8001852:	030c      	lsls	r4, r1, #12
 8001854:	004f      	lsls	r7, r1, #1
 8001856:	0fce      	lsrs	r6, r1, #31
 8001858:	0a61      	lsrs	r1, r4, #9
 800185a:	9c00      	ldr	r4, [sp, #0]
 800185c:	46b0      	mov	r8, r6
 800185e:	0f64      	lsrs	r4, r4, #29
 8001860:	430c      	orrs	r4, r1
 8001862:	9900      	ldr	r1, [sp, #0]
 8001864:	0d7f      	lsrs	r7, r7, #21
 8001866:	00c8      	lsls	r0, r1, #3
 8001868:	0011      	movs	r1, r2
 800186a:	001a      	movs	r2, r3
 800186c:	031b      	lsls	r3, r3, #12
 800186e:	469c      	mov	ip, r3
 8001870:	9100      	str	r1, [sp, #0]
 8001872:	9201      	str	r2, [sp, #4]
 8001874:	0051      	lsls	r1, r2, #1
 8001876:	0d4b      	lsrs	r3, r1, #21
 8001878:	4699      	mov	r9, r3
 800187a:	9b01      	ldr	r3, [sp, #4]
 800187c:	9d00      	ldr	r5, [sp, #0]
 800187e:	0fd9      	lsrs	r1, r3, #31
 8001880:	4663      	mov	r3, ip
 8001882:	0f6a      	lsrs	r2, r5, #29
 8001884:	0a5b      	lsrs	r3, r3, #9
 8001886:	4313      	orrs	r3, r2
 8001888:	00ea      	lsls	r2, r5, #3
 800188a:	4694      	mov	ip, r2
 800188c:	4693      	mov	fp, r2
 800188e:	4ac1      	ldr	r2, [pc, #772]	@ (8001b94 <__aeabi_dsub+0x354>)
 8001890:	9003      	str	r0, [sp, #12]
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	4591      	cmp	r9, r2
 8001896:	d100      	bne.n	800189a <__aeabi_dsub+0x5a>
 8001898:	e0cd      	b.n	8001a36 <__aeabi_dsub+0x1f6>
 800189a:	2501      	movs	r5, #1
 800189c:	4069      	eors	r1, r5
 800189e:	464d      	mov	r5, r9
 80018a0:	1b7d      	subs	r5, r7, r5
 80018a2:	46aa      	mov	sl, r5
 80018a4:	428e      	cmp	r6, r1
 80018a6:	d100      	bne.n	80018aa <__aeabi_dsub+0x6a>
 80018a8:	e080      	b.n	80019ac <__aeabi_dsub+0x16c>
 80018aa:	2d00      	cmp	r5, #0
 80018ac:	dc00      	bgt.n	80018b0 <__aeabi_dsub+0x70>
 80018ae:	e335      	b.n	8001f1c <__aeabi_dsub+0x6dc>
 80018b0:	4649      	mov	r1, r9
 80018b2:	2900      	cmp	r1, #0
 80018b4:	d100      	bne.n	80018b8 <__aeabi_dsub+0x78>
 80018b6:	e0df      	b.n	8001a78 <__aeabi_dsub+0x238>
 80018b8:	4297      	cmp	r7, r2
 80018ba:	d100      	bne.n	80018be <__aeabi_dsub+0x7e>
 80018bc:	e194      	b.n	8001be8 <__aeabi_dsub+0x3a8>
 80018be:	4652      	mov	r2, sl
 80018c0:	2501      	movs	r5, #1
 80018c2:	2a38      	cmp	r2, #56	@ 0x38
 80018c4:	dc19      	bgt.n	80018fa <__aeabi_dsub+0xba>
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	9b02      	ldr	r3, [sp, #8]
 80018ca:	0412      	lsls	r2, r2, #16
 80018cc:	4313      	orrs	r3, r2
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	4652      	mov	r2, sl
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x98>
 80018d6:	e1e3      	b.n	8001ca0 <__aeabi_dsub+0x460>
 80018d8:	4653      	mov	r3, sl
 80018da:	2220      	movs	r2, #32
 80018dc:	4661      	mov	r1, ip
 80018de:	9d02      	ldr	r5, [sp, #8]
 80018e0:	1ad2      	subs	r2, r2, r3
 80018e2:	4095      	lsls	r5, r2
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	430d      	orrs	r5, r1
 80018e8:	4661      	mov	r1, ip
 80018ea:	4091      	lsls	r1, r2
 80018ec:	000a      	movs	r2, r1
 80018ee:	1e51      	subs	r1, r2, #1
 80018f0:	418a      	sbcs	r2, r1
 80018f2:	4315      	orrs	r5, r2
 80018f4:	9a02      	ldr	r2, [sp, #8]
 80018f6:	40da      	lsrs	r2, r3
 80018f8:	1aa4      	subs	r4, r4, r2
 80018fa:	1b45      	subs	r5, r0, r5
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	4180      	sbcs	r0, r0
 8001900:	4240      	negs	r0, r0
 8001902:	1a24      	subs	r4, r4, r0
 8001904:	0223      	lsls	r3, r4, #8
 8001906:	d400      	bmi.n	800190a <__aeabi_dsub+0xca>
 8001908:	e13d      	b.n	8001b86 <__aeabi_dsub+0x346>
 800190a:	0264      	lsls	r4, r4, #9
 800190c:	0a64      	lsrs	r4, r4, #9
 800190e:	2c00      	cmp	r4, #0
 8001910:	d100      	bne.n	8001914 <__aeabi_dsub+0xd4>
 8001912:	e147      	b.n	8001ba4 <__aeabi_dsub+0x364>
 8001914:	0020      	movs	r0, r4
 8001916:	f000 fc35 	bl	8002184 <__clzsi2>
 800191a:	0003      	movs	r3, r0
 800191c:	3b08      	subs	r3, #8
 800191e:	2120      	movs	r1, #32
 8001920:	0028      	movs	r0, r5
 8001922:	1aca      	subs	r2, r1, r3
 8001924:	40d0      	lsrs	r0, r2
 8001926:	409c      	lsls	r4, r3
 8001928:	0002      	movs	r2, r0
 800192a:	409d      	lsls	r5, r3
 800192c:	4322      	orrs	r2, r4
 800192e:	429f      	cmp	r7, r3
 8001930:	dd00      	ble.n	8001934 <__aeabi_dsub+0xf4>
 8001932:	e177      	b.n	8001c24 <__aeabi_dsub+0x3e4>
 8001934:	1bd8      	subs	r0, r3, r7
 8001936:	3001      	adds	r0, #1
 8001938:	1a09      	subs	r1, r1, r0
 800193a:	002c      	movs	r4, r5
 800193c:	408d      	lsls	r5, r1
 800193e:	40c4      	lsrs	r4, r0
 8001940:	1e6b      	subs	r3, r5, #1
 8001942:	419d      	sbcs	r5, r3
 8001944:	0013      	movs	r3, r2
 8001946:	40c2      	lsrs	r2, r0
 8001948:	408b      	lsls	r3, r1
 800194a:	4325      	orrs	r5, r4
 800194c:	2700      	movs	r7, #0
 800194e:	0014      	movs	r4, r2
 8001950:	431d      	orrs	r5, r3
 8001952:	076b      	lsls	r3, r5, #29
 8001954:	d009      	beq.n	800196a <__aeabi_dsub+0x12a>
 8001956:	230f      	movs	r3, #15
 8001958:	402b      	ands	r3, r5
 800195a:	2b04      	cmp	r3, #4
 800195c:	d005      	beq.n	800196a <__aeabi_dsub+0x12a>
 800195e:	1d2b      	adds	r3, r5, #4
 8001960:	42ab      	cmp	r3, r5
 8001962:	41ad      	sbcs	r5, r5
 8001964:	426d      	negs	r5, r5
 8001966:	1964      	adds	r4, r4, r5
 8001968:	001d      	movs	r5, r3
 800196a:	0223      	lsls	r3, r4, #8
 800196c:	d400      	bmi.n	8001970 <__aeabi_dsub+0x130>
 800196e:	e140      	b.n	8001bf2 <__aeabi_dsub+0x3b2>
 8001970:	4a88      	ldr	r2, [pc, #544]	@ (8001b94 <__aeabi_dsub+0x354>)
 8001972:	3701      	adds	r7, #1
 8001974:	4297      	cmp	r7, r2
 8001976:	d100      	bne.n	800197a <__aeabi_dsub+0x13a>
 8001978:	e101      	b.n	8001b7e <__aeabi_dsub+0x33e>
 800197a:	2601      	movs	r6, #1
 800197c:	4643      	mov	r3, r8
 800197e:	4986      	ldr	r1, [pc, #536]	@ (8001b98 <__aeabi_dsub+0x358>)
 8001980:	08ed      	lsrs	r5, r5, #3
 8001982:	4021      	ands	r1, r4
 8001984:	074a      	lsls	r2, r1, #29
 8001986:	432a      	orrs	r2, r5
 8001988:	057c      	lsls	r4, r7, #21
 800198a:	024d      	lsls	r5, r1, #9
 800198c:	0b2d      	lsrs	r5, r5, #12
 800198e:	0d64      	lsrs	r4, r4, #21
 8001990:	401e      	ands	r6, r3
 8001992:	0524      	lsls	r4, r4, #20
 8001994:	432c      	orrs	r4, r5
 8001996:	07f6      	lsls	r6, r6, #31
 8001998:	4334      	orrs	r4, r6
 800199a:	0010      	movs	r0, r2
 800199c:	0021      	movs	r1, r4
 800199e:	b005      	add	sp, #20
 80019a0:	bcf0      	pop	{r4, r5, r6, r7}
 80019a2:	46bb      	mov	fp, r7
 80019a4:	46b2      	mov	sl, r6
 80019a6:	46a9      	mov	r9, r5
 80019a8:	46a0      	mov	r8, r4
 80019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ac:	2d00      	cmp	r5, #0
 80019ae:	dc00      	bgt.n	80019b2 <__aeabi_dsub+0x172>
 80019b0:	e2d0      	b.n	8001f54 <__aeabi_dsub+0x714>
 80019b2:	4649      	mov	r1, r9
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d000      	beq.n	80019ba <__aeabi_dsub+0x17a>
 80019b8:	e0d4      	b.n	8001b64 <__aeabi_dsub+0x324>
 80019ba:	4661      	mov	r1, ip
 80019bc:	9b02      	ldr	r3, [sp, #8]
 80019be:	4319      	orrs	r1, r3
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x184>
 80019c2:	e12b      	b.n	8001c1c <__aeabi_dsub+0x3dc>
 80019c4:	1e69      	subs	r1, r5, #1
 80019c6:	2d01      	cmp	r5, #1
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x18c>
 80019ca:	e1d9      	b.n	8001d80 <__aeabi_dsub+0x540>
 80019cc:	4295      	cmp	r5, r2
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dsub+0x192>
 80019d0:	e10a      	b.n	8001be8 <__aeabi_dsub+0x3a8>
 80019d2:	2501      	movs	r5, #1
 80019d4:	2938      	cmp	r1, #56	@ 0x38
 80019d6:	dc17      	bgt.n	8001a08 <__aeabi_dsub+0x1c8>
 80019d8:	468a      	mov	sl, r1
 80019da:	4653      	mov	r3, sl
 80019dc:	2b1f      	cmp	r3, #31
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x1a2>
 80019e0:	e1e7      	b.n	8001db2 <__aeabi_dsub+0x572>
 80019e2:	2220      	movs	r2, #32
 80019e4:	1ad2      	subs	r2, r2, r3
 80019e6:	9b02      	ldr	r3, [sp, #8]
 80019e8:	4661      	mov	r1, ip
 80019ea:	4093      	lsls	r3, r2
 80019ec:	001d      	movs	r5, r3
 80019ee:	4653      	mov	r3, sl
 80019f0:	40d9      	lsrs	r1, r3
 80019f2:	4663      	mov	r3, ip
 80019f4:	4093      	lsls	r3, r2
 80019f6:	001a      	movs	r2, r3
 80019f8:	430d      	orrs	r5, r1
 80019fa:	1e51      	subs	r1, r2, #1
 80019fc:	418a      	sbcs	r2, r1
 80019fe:	4653      	mov	r3, sl
 8001a00:	4315      	orrs	r5, r2
 8001a02:	9a02      	ldr	r2, [sp, #8]
 8001a04:	40da      	lsrs	r2, r3
 8001a06:	18a4      	adds	r4, r4, r2
 8001a08:	182d      	adds	r5, r5, r0
 8001a0a:	4285      	cmp	r5, r0
 8001a0c:	4180      	sbcs	r0, r0
 8001a0e:	4240      	negs	r0, r0
 8001a10:	1824      	adds	r4, r4, r0
 8001a12:	0223      	lsls	r3, r4, #8
 8001a14:	d400      	bmi.n	8001a18 <__aeabi_dsub+0x1d8>
 8001a16:	e0b6      	b.n	8001b86 <__aeabi_dsub+0x346>
 8001a18:	4b5e      	ldr	r3, [pc, #376]	@ (8001b94 <__aeabi_dsub+0x354>)
 8001a1a:	3701      	adds	r7, #1
 8001a1c:	429f      	cmp	r7, r3
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x1e2>
 8001a20:	e0ad      	b.n	8001b7e <__aeabi_dsub+0x33e>
 8001a22:	2101      	movs	r1, #1
 8001a24:	4b5c      	ldr	r3, [pc, #368]	@ (8001b98 <__aeabi_dsub+0x358>)
 8001a26:	086a      	lsrs	r2, r5, #1
 8001a28:	401c      	ands	r4, r3
 8001a2a:	4029      	ands	r1, r5
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	07e5      	lsls	r5, r4, #31
 8001a30:	4315      	orrs	r5, r2
 8001a32:	0864      	lsrs	r4, r4, #1
 8001a34:	e78d      	b.n	8001952 <__aeabi_dsub+0x112>
 8001a36:	4a59      	ldr	r2, [pc, #356]	@ (8001b9c <__aeabi_dsub+0x35c>)
 8001a38:	9b02      	ldr	r3, [sp, #8]
 8001a3a:	4692      	mov	sl, r2
 8001a3c:	4662      	mov	r2, ip
 8001a3e:	44ba      	add	sl, r7
 8001a40:	431a      	orrs	r2, r3
 8001a42:	d02c      	beq.n	8001a9e <__aeabi_dsub+0x25e>
 8001a44:	428e      	cmp	r6, r1
 8001a46:	d02e      	beq.n	8001aa6 <__aeabi_dsub+0x266>
 8001a48:	4652      	mov	r2, sl
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d060      	beq.n	8001b10 <__aeabi_dsub+0x2d0>
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x214>
 8001a52:	e0db      	b.n	8001c0c <__aeabi_dsub+0x3cc>
 8001a54:	4663      	mov	r3, ip
 8001a56:	000e      	movs	r6, r1
 8001a58:	9c02      	ldr	r4, [sp, #8]
 8001a5a:	08d8      	lsrs	r0, r3, #3
 8001a5c:	0762      	lsls	r2, r4, #29
 8001a5e:	4302      	orrs	r2, r0
 8001a60:	08e4      	lsrs	r4, r4, #3
 8001a62:	0013      	movs	r3, r2
 8001a64:	4323      	orrs	r3, r4
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x22a>
 8001a68:	e254      	b.n	8001f14 <__aeabi_dsub+0x6d4>
 8001a6a:	2580      	movs	r5, #128	@ 0x80
 8001a6c:	032d      	lsls	r5, r5, #12
 8001a6e:	4325      	orrs	r5, r4
 8001a70:	032d      	lsls	r5, r5, #12
 8001a72:	4c48      	ldr	r4, [pc, #288]	@ (8001b94 <__aeabi_dsub+0x354>)
 8001a74:	0b2d      	lsrs	r5, r5, #12
 8001a76:	e78c      	b.n	8001992 <__aeabi_dsub+0x152>
 8001a78:	4661      	mov	r1, ip
 8001a7a:	9b02      	ldr	r3, [sp, #8]
 8001a7c:	4319      	orrs	r1, r3
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_dsub+0x242>
 8001a80:	e0cc      	b.n	8001c1c <__aeabi_dsub+0x3dc>
 8001a82:	0029      	movs	r1, r5
 8001a84:	3901      	subs	r1, #1
 8001a86:	2d01      	cmp	r5, #1
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x24c>
 8001a8a:	e188      	b.n	8001d9e <__aeabi_dsub+0x55e>
 8001a8c:	4295      	cmp	r5, r2
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x252>
 8001a90:	e0aa      	b.n	8001be8 <__aeabi_dsub+0x3a8>
 8001a92:	2501      	movs	r5, #1
 8001a94:	2938      	cmp	r1, #56	@ 0x38
 8001a96:	dd00      	ble.n	8001a9a <__aeabi_dsub+0x25a>
 8001a98:	e72f      	b.n	80018fa <__aeabi_dsub+0xba>
 8001a9a:	468a      	mov	sl, r1
 8001a9c:	e718      	b.n	80018d0 <__aeabi_dsub+0x90>
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4051      	eors	r1, r2
 8001aa2:	428e      	cmp	r6, r1
 8001aa4:	d1d0      	bne.n	8001a48 <__aeabi_dsub+0x208>
 8001aa6:	4653      	mov	r3, sl
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dsub+0x26e>
 8001aac:	e0be      	b.n	8001c2c <__aeabi_dsub+0x3ec>
 8001aae:	2f00      	cmp	r7, #0
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_dsub+0x274>
 8001ab2:	e138      	b.n	8001d26 <__aeabi_dsub+0x4e6>
 8001ab4:	46ca      	mov	sl, r9
 8001ab6:	0022      	movs	r2, r4
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x27e>
 8001abc:	e1e2      	b.n	8001e84 <__aeabi_dsub+0x644>
 8001abe:	4653      	mov	r3, sl
 8001ac0:	1e59      	subs	r1, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x288>
 8001ac6:	e20d      	b.n	8001ee4 <__aeabi_dsub+0x6a4>
 8001ac8:	4a32      	ldr	r2, [pc, #200]	@ (8001b94 <__aeabi_dsub+0x354>)
 8001aca:	4592      	cmp	sl, r2
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x290>
 8001ace:	e1d2      	b.n	8001e76 <__aeabi_dsub+0x636>
 8001ad0:	2701      	movs	r7, #1
 8001ad2:	2938      	cmp	r1, #56	@ 0x38
 8001ad4:	dc13      	bgt.n	8001afe <__aeabi_dsub+0x2be>
 8001ad6:	291f      	cmp	r1, #31
 8001ad8:	dd00      	ble.n	8001adc <__aeabi_dsub+0x29c>
 8001ada:	e1ee      	b.n	8001eba <__aeabi_dsub+0x67a>
 8001adc:	2220      	movs	r2, #32
 8001ade:	9b02      	ldr	r3, [sp, #8]
 8001ae0:	1a52      	subs	r2, r2, r1
 8001ae2:	0025      	movs	r5, r4
 8001ae4:	0007      	movs	r7, r0
 8001ae6:	469a      	mov	sl, r3
 8001ae8:	40cc      	lsrs	r4, r1
 8001aea:	4090      	lsls	r0, r2
 8001aec:	4095      	lsls	r5, r2
 8001aee:	40cf      	lsrs	r7, r1
 8001af0:	44a2      	add	sl, r4
 8001af2:	1e42      	subs	r2, r0, #1
 8001af4:	4190      	sbcs	r0, r2
 8001af6:	4653      	mov	r3, sl
 8001af8:	432f      	orrs	r7, r5
 8001afa:	4307      	orrs	r7, r0
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	003d      	movs	r5, r7
 8001b00:	4465      	add	r5, ip
 8001b02:	4565      	cmp	r5, ip
 8001b04:	4192      	sbcs	r2, r2
 8001b06:	9b02      	ldr	r3, [sp, #8]
 8001b08:	4252      	negs	r2, r2
 8001b0a:	464f      	mov	r7, r9
 8001b0c:	18d4      	adds	r4, r2, r3
 8001b0e:	e780      	b.n	8001a12 <__aeabi_dsub+0x1d2>
 8001b10:	4a23      	ldr	r2, [pc, #140]	@ (8001ba0 <__aeabi_dsub+0x360>)
 8001b12:	1c7d      	adds	r5, r7, #1
 8001b14:	4215      	tst	r5, r2
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dsub+0x2da>
 8001b18:	e0aa      	b.n	8001c70 <__aeabi_dsub+0x430>
 8001b1a:	4662      	mov	r2, ip
 8001b1c:	0025      	movs	r5, r4
 8001b1e:	9b02      	ldr	r3, [sp, #8]
 8001b20:	4305      	orrs	r5, r0
 8001b22:	431a      	orrs	r2, r3
 8001b24:	2f00      	cmp	r7, #0
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x2ea>
 8001b28:	e0f5      	b.n	8001d16 <__aeabi_dsub+0x4d6>
 8001b2a:	2d00      	cmp	r5, #0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x2f0>
 8001b2e:	e16b      	b.n	8001e08 <__aeabi_dsub+0x5c8>
 8001b30:	2a00      	cmp	r2, #0
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dsub+0x2f6>
 8001b34:	e152      	b.n	8001ddc <__aeabi_dsub+0x59c>
 8001b36:	4663      	mov	r3, ip
 8001b38:	1ac5      	subs	r5, r0, r3
 8001b3a:	9b02      	ldr	r3, [sp, #8]
 8001b3c:	1ae2      	subs	r2, r4, r3
 8001b3e:	42a8      	cmp	r0, r5
 8001b40:	419b      	sbcs	r3, r3
 8001b42:	425b      	negs	r3, r3
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	021a      	lsls	r2, r3, #8
 8001b48:	d400      	bmi.n	8001b4c <__aeabi_dsub+0x30c>
 8001b4a:	e1d5      	b.n	8001ef8 <__aeabi_dsub+0x6b8>
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	1a1d      	subs	r5, r3, r0
 8001b50:	45ac      	cmp	ip, r5
 8001b52:	4192      	sbcs	r2, r2
 8001b54:	2601      	movs	r6, #1
 8001b56:	9b02      	ldr	r3, [sp, #8]
 8001b58:	4252      	negs	r2, r2
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	4688      	mov	r8, r1
 8001b5e:	1aa4      	subs	r4, r4, r2
 8001b60:	400e      	ands	r6, r1
 8001b62:	e6f6      	b.n	8001952 <__aeabi_dsub+0x112>
 8001b64:	4297      	cmp	r7, r2
 8001b66:	d03f      	beq.n	8001be8 <__aeabi_dsub+0x3a8>
 8001b68:	4652      	mov	r2, sl
 8001b6a:	2501      	movs	r5, #1
 8001b6c:	2a38      	cmp	r2, #56	@ 0x38
 8001b6e:	dd00      	ble.n	8001b72 <__aeabi_dsub+0x332>
 8001b70:	e74a      	b.n	8001a08 <__aeabi_dsub+0x1c8>
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	9b02      	ldr	r3, [sp, #8]
 8001b76:	0412      	lsls	r2, r2, #16
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	e72d      	b.n	80019da <__aeabi_dsub+0x19a>
 8001b7e:	003c      	movs	r4, r7
 8001b80:	2500      	movs	r5, #0
 8001b82:	2200      	movs	r2, #0
 8001b84:	e705      	b.n	8001992 <__aeabi_dsub+0x152>
 8001b86:	2307      	movs	r3, #7
 8001b88:	402b      	ands	r3, r5
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x350>
 8001b8e:	e6e2      	b.n	8001956 <__aeabi_dsub+0x116>
 8001b90:	e06b      	b.n	8001c6a <__aeabi_dsub+0x42a>
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	f000 faed 	bl	8002184 <__clzsi2>
 8001baa:	0003      	movs	r3, r0
 8001bac:	3318      	adds	r3, #24
 8001bae:	2b1f      	cmp	r3, #31
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dsub+0x374>
 8001bb2:	e6b4      	b.n	800191e <__aeabi_dsub+0xde>
 8001bb4:	002a      	movs	r2, r5
 8001bb6:	3808      	subs	r0, #8
 8001bb8:	4082      	lsls	r2, r0
 8001bba:	429f      	cmp	r7, r3
 8001bbc:	dd00      	ble.n	8001bc0 <__aeabi_dsub+0x380>
 8001bbe:	e0b9      	b.n	8001d34 <__aeabi_dsub+0x4f4>
 8001bc0:	1bdb      	subs	r3, r3, r7
 8001bc2:	1c58      	adds	r0, r3, #1
 8001bc4:	281f      	cmp	r0, #31
 8001bc6:	dc00      	bgt.n	8001bca <__aeabi_dsub+0x38a>
 8001bc8:	e1a0      	b.n	8001f0c <__aeabi_dsub+0x6cc>
 8001bca:	0015      	movs	r5, r2
 8001bcc:	3b1f      	subs	r3, #31
 8001bce:	40dd      	lsrs	r5, r3
 8001bd0:	2820      	cmp	r0, #32
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x3a0>
 8001bd4:	2340      	movs	r3, #64	@ 0x40
 8001bd6:	1a1b      	subs	r3, r3, r0
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	1e53      	subs	r3, r2, #1
 8001bdc:	419a      	sbcs	r2, r3
 8001bde:	4315      	orrs	r5, r2
 8001be0:	2307      	movs	r3, #7
 8001be2:	2700      	movs	r7, #0
 8001be4:	402b      	ands	r3, r5
 8001be6:	e7d0      	b.n	8001b8a <__aeabi_dsub+0x34a>
 8001be8:	08c0      	lsrs	r0, r0, #3
 8001bea:	0762      	lsls	r2, r4, #29
 8001bec:	4302      	orrs	r2, r0
 8001bee:	08e4      	lsrs	r4, r4, #3
 8001bf0:	e737      	b.n	8001a62 <__aeabi_dsub+0x222>
 8001bf2:	08ea      	lsrs	r2, r5, #3
 8001bf4:	0763      	lsls	r3, r4, #29
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	4bd3      	ldr	r3, [pc, #844]	@ (8001f48 <__aeabi_dsub+0x708>)
 8001bfa:	08e4      	lsrs	r4, r4, #3
 8001bfc:	429f      	cmp	r7, r3
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x3c2>
 8001c00:	e72f      	b.n	8001a62 <__aeabi_dsub+0x222>
 8001c02:	0324      	lsls	r4, r4, #12
 8001c04:	0b25      	lsrs	r5, r4, #12
 8001c06:	057c      	lsls	r4, r7, #21
 8001c08:	0d64      	lsrs	r4, r4, #21
 8001c0a:	e6c2      	b.n	8001992 <__aeabi_dsub+0x152>
 8001c0c:	46ca      	mov	sl, r9
 8001c0e:	0022      	movs	r2, r4
 8001c10:	4302      	orrs	r2, r0
 8001c12:	d158      	bne.n	8001cc6 <__aeabi_dsub+0x486>
 8001c14:	4663      	mov	r3, ip
 8001c16:	000e      	movs	r6, r1
 8001c18:	9c02      	ldr	r4, [sp, #8]
 8001c1a:	9303      	str	r3, [sp, #12]
 8001c1c:	9b03      	ldr	r3, [sp, #12]
 8001c1e:	4657      	mov	r7, sl
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	e7e7      	b.n	8001bf4 <__aeabi_dsub+0x3b4>
 8001c24:	4cc9      	ldr	r4, [pc, #804]	@ (8001f4c <__aeabi_dsub+0x70c>)
 8001c26:	1aff      	subs	r7, r7, r3
 8001c28:	4014      	ands	r4, r2
 8001c2a:	e692      	b.n	8001952 <__aeabi_dsub+0x112>
 8001c2c:	4dc8      	ldr	r5, [pc, #800]	@ (8001f50 <__aeabi_dsub+0x710>)
 8001c2e:	1c7a      	adds	r2, r7, #1
 8001c30:	422a      	tst	r2, r5
 8001c32:	d000      	beq.n	8001c36 <__aeabi_dsub+0x3f6>
 8001c34:	e084      	b.n	8001d40 <__aeabi_dsub+0x500>
 8001c36:	0022      	movs	r2, r4
 8001c38:	4302      	orrs	r2, r0
 8001c3a:	2f00      	cmp	r7, #0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x400>
 8001c3e:	e0ef      	b.n	8001e20 <__aeabi_dsub+0x5e0>
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x406>
 8001c44:	e0e5      	b.n	8001e12 <__aeabi_dsub+0x5d2>
 8001c46:	4662      	mov	r2, ip
 8001c48:	9902      	ldr	r1, [sp, #8]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x410>
 8001c4e:	e0c5      	b.n	8001ddc <__aeabi_dsub+0x59c>
 8001c50:	4663      	mov	r3, ip
 8001c52:	18c5      	adds	r5, r0, r3
 8001c54:	468c      	mov	ip, r1
 8001c56:	4285      	cmp	r5, r0
 8001c58:	4180      	sbcs	r0, r0
 8001c5a:	4464      	add	r4, ip
 8001c5c:	4240      	negs	r0, r0
 8001c5e:	1824      	adds	r4, r4, r0
 8001c60:	0223      	lsls	r3, r4, #8
 8001c62:	d502      	bpl.n	8001c6a <__aeabi_dsub+0x42a>
 8001c64:	4bb9      	ldr	r3, [pc, #740]	@ (8001f4c <__aeabi_dsub+0x70c>)
 8001c66:	3701      	adds	r7, #1
 8001c68:	401c      	ands	r4, r3
 8001c6a:	46ba      	mov	sl, r7
 8001c6c:	9503      	str	r5, [sp, #12]
 8001c6e:	e7d5      	b.n	8001c1c <__aeabi_dsub+0x3dc>
 8001c70:	4662      	mov	r2, ip
 8001c72:	1a85      	subs	r5, r0, r2
 8001c74:	42a8      	cmp	r0, r5
 8001c76:	4192      	sbcs	r2, r2
 8001c78:	4252      	negs	r2, r2
 8001c7a:	4691      	mov	r9, r2
 8001c7c:	9b02      	ldr	r3, [sp, #8]
 8001c7e:	1ae3      	subs	r3, r4, r3
 8001c80:	001a      	movs	r2, r3
 8001c82:	464b      	mov	r3, r9
 8001c84:	1ad2      	subs	r2, r2, r3
 8001c86:	0013      	movs	r3, r2
 8001c88:	4691      	mov	r9, r2
 8001c8a:	021a      	lsls	r2, r3, #8
 8001c8c:	d46c      	bmi.n	8001d68 <__aeabi_dsub+0x528>
 8001c8e:	464a      	mov	r2, r9
 8001c90:	464c      	mov	r4, r9
 8001c92:	432a      	orrs	r2, r5
 8001c94:	d000      	beq.n	8001c98 <__aeabi_dsub+0x458>
 8001c96:	e63a      	b.n	800190e <__aeabi_dsub+0xce>
 8001c98:	2600      	movs	r6, #0
 8001c9a:	2400      	movs	r4, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	e678      	b.n	8001992 <__aeabi_dsub+0x152>
 8001ca0:	9902      	ldr	r1, [sp, #8]
 8001ca2:	4653      	mov	r3, sl
 8001ca4:	000d      	movs	r5, r1
 8001ca6:	3a20      	subs	r2, #32
 8001ca8:	40d5      	lsrs	r5, r2
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d006      	beq.n	8001cbc <__aeabi_dsub+0x47c>
 8001cae:	2240      	movs	r2, #64	@ 0x40
 8001cb0:	1ad2      	subs	r2, r2, r3
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	4662      	mov	r2, ip
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	4693      	mov	fp, r2
 8001cbc:	465b      	mov	r3, fp
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	4193      	sbcs	r3, r2
 8001cc2:	431d      	orrs	r5, r3
 8001cc4:	e619      	b.n	80018fa <__aeabi_dsub+0xba>
 8001cc6:	4653      	mov	r3, sl
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x490>
 8001cce:	e0c6      	b.n	8001e5e <__aeabi_dsub+0x61e>
 8001cd0:	4e9d      	ldr	r6, [pc, #628]	@ (8001f48 <__aeabi_dsub+0x708>)
 8001cd2:	45b2      	cmp	sl, r6
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x498>
 8001cd6:	e6bd      	b.n	8001a54 <__aeabi_dsub+0x214>
 8001cd8:	4688      	mov	r8, r1
 8001cda:	000e      	movs	r6, r1
 8001cdc:	2501      	movs	r5, #1
 8001cde:	2a38      	cmp	r2, #56	@ 0x38
 8001ce0:	dc10      	bgt.n	8001d04 <__aeabi_dsub+0x4c4>
 8001ce2:	2a1f      	cmp	r2, #31
 8001ce4:	dc7f      	bgt.n	8001de6 <__aeabi_dsub+0x5a6>
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	0025      	movs	r5, r4
 8001cea:	1a89      	subs	r1, r1, r2
 8001cec:	0007      	movs	r7, r0
 8001cee:	4088      	lsls	r0, r1
 8001cf0:	408d      	lsls	r5, r1
 8001cf2:	40d7      	lsrs	r7, r2
 8001cf4:	40d4      	lsrs	r4, r2
 8001cf6:	1e41      	subs	r1, r0, #1
 8001cf8:	4188      	sbcs	r0, r1
 8001cfa:	9b02      	ldr	r3, [sp, #8]
 8001cfc:	433d      	orrs	r5, r7
 8001cfe:	1b1b      	subs	r3, r3, r4
 8001d00:	4305      	orrs	r5, r0
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	4662      	mov	r2, ip
 8001d06:	1b55      	subs	r5, r2, r5
 8001d08:	45ac      	cmp	ip, r5
 8001d0a:	4192      	sbcs	r2, r2
 8001d0c:	9b02      	ldr	r3, [sp, #8]
 8001d0e:	4252      	negs	r2, r2
 8001d10:	464f      	mov	r7, r9
 8001d12:	1a9c      	subs	r4, r3, r2
 8001d14:	e5f6      	b.n	8001904 <__aeabi_dsub+0xc4>
 8001d16:	2d00      	cmp	r5, #0
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dsub+0x4dc>
 8001d1a:	e0b7      	b.n	8001e8c <__aeabi_dsub+0x64c>
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x4e2>
 8001d20:	e0f0      	b.n	8001f04 <__aeabi_dsub+0x6c4>
 8001d22:	2601      	movs	r6, #1
 8001d24:	400e      	ands	r6, r1
 8001d26:	4663      	mov	r3, ip
 8001d28:	9802      	ldr	r0, [sp, #8]
 8001d2a:	08d9      	lsrs	r1, r3, #3
 8001d2c:	0742      	lsls	r2, r0, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08c4      	lsrs	r4, r0, #3
 8001d32:	e696      	b.n	8001a62 <__aeabi_dsub+0x222>
 8001d34:	4c85      	ldr	r4, [pc, #532]	@ (8001f4c <__aeabi_dsub+0x70c>)
 8001d36:	1aff      	subs	r7, r7, r3
 8001d38:	4014      	ands	r4, r2
 8001d3a:	0762      	lsls	r2, r4, #29
 8001d3c:	08e4      	lsrs	r4, r4, #3
 8001d3e:	e760      	b.n	8001c02 <__aeabi_dsub+0x3c2>
 8001d40:	4981      	ldr	r1, [pc, #516]	@ (8001f48 <__aeabi_dsub+0x708>)
 8001d42:	428a      	cmp	r2, r1
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x508>
 8001d46:	e0c9      	b.n	8001edc <__aeabi_dsub+0x69c>
 8001d48:	4663      	mov	r3, ip
 8001d4a:	18c1      	adds	r1, r0, r3
 8001d4c:	4281      	cmp	r1, r0
 8001d4e:	4180      	sbcs	r0, r0
 8001d50:	9b02      	ldr	r3, [sp, #8]
 8001d52:	4240      	negs	r0, r0
 8001d54:	18e3      	adds	r3, r4, r3
 8001d56:	181b      	adds	r3, r3, r0
 8001d58:	07dd      	lsls	r5, r3, #31
 8001d5a:	085c      	lsrs	r4, r3, #1
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	0849      	lsrs	r1, r1, #1
 8001d60:	430d      	orrs	r5, r1
 8001d62:	0017      	movs	r7, r2
 8001d64:	402b      	ands	r3, r5
 8001d66:	e710      	b.n	8001b8a <__aeabi_dsub+0x34a>
 8001d68:	4663      	mov	r3, ip
 8001d6a:	1a1d      	subs	r5, r3, r0
 8001d6c:	45ac      	cmp	ip, r5
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	2601      	movs	r6, #1
 8001d72:	9b02      	ldr	r3, [sp, #8]
 8001d74:	4252      	negs	r2, r2
 8001d76:	1b1c      	subs	r4, r3, r4
 8001d78:	4688      	mov	r8, r1
 8001d7a:	1aa4      	subs	r4, r4, r2
 8001d7c:	400e      	ands	r6, r1
 8001d7e:	e5c6      	b.n	800190e <__aeabi_dsub+0xce>
 8001d80:	4663      	mov	r3, ip
 8001d82:	18c5      	adds	r5, r0, r3
 8001d84:	9b02      	ldr	r3, [sp, #8]
 8001d86:	4285      	cmp	r5, r0
 8001d88:	4180      	sbcs	r0, r0
 8001d8a:	469c      	mov	ip, r3
 8001d8c:	4240      	negs	r0, r0
 8001d8e:	4464      	add	r4, ip
 8001d90:	1824      	adds	r4, r4, r0
 8001d92:	2701      	movs	r7, #1
 8001d94:	0223      	lsls	r3, r4, #8
 8001d96:	d400      	bmi.n	8001d9a <__aeabi_dsub+0x55a>
 8001d98:	e6f5      	b.n	8001b86 <__aeabi_dsub+0x346>
 8001d9a:	2702      	movs	r7, #2
 8001d9c:	e641      	b.n	8001a22 <__aeabi_dsub+0x1e2>
 8001d9e:	4663      	mov	r3, ip
 8001da0:	1ac5      	subs	r5, r0, r3
 8001da2:	42a8      	cmp	r0, r5
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	9b02      	ldr	r3, [sp, #8]
 8001da8:	4240      	negs	r0, r0
 8001daa:	1ae4      	subs	r4, r4, r3
 8001dac:	2701      	movs	r7, #1
 8001dae:	1a24      	subs	r4, r4, r0
 8001db0:	e5a8      	b.n	8001904 <__aeabi_dsub+0xc4>
 8001db2:	9d02      	ldr	r5, [sp, #8]
 8001db4:	4652      	mov	r2, sl
 8001db6:	002b      	movs	r3, r5
 8001db8:	3a20      	subs	r2, #32
 8001dba:	40d3      	lsrs	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	4653      	mov	r3, sl
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d006      	beq.n	8001dd2 <__aeabi_dsub+0x592>
 8001dc4:	2240      	movs	r2, #64	@ 0x40
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	002b      	movs	r3, r5
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	4662      	mov	r2, ip
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	4693      	mov	fp, r2
 8001dd2:	465d      	mov	r5, fp
 8001dd4:	1e6b      	subs	r3, r5, #1
 8001dd6:	419d      	sbcs	r5, r3
 8001dd8:	430d      	orrs	r5, r1
 8001dda:	e615      	b.n	8001a08 <__aeabi_dsub+0x1c8>
 8001ddc:	0762      	lsls	r2, r4, #29
 8001dde:	08c0      	lsrs	r0, r0, #3
 8001de0:	4302      	orrs	r2, r0
 8001de2:	08e4      	lsrs	r4, r4, #3
 8001de4:	e70d      	b.n	8001c02 <__aeabi_dsub+0x3c2>
 8001de6:	0011      	movs	r1, r2
 8001de8:	0027      	movs	r7, r4
 8001dea:	3920      	subs	r1, #32
 8001dec:	40cf      	lsrs	r7, r1
 8001dee:	2a20      	cmp	r2, #32
 8001df0:	d005      	beq.n	8001dfe <__aeabi_dsub+0x5be>
 8001df2:	2140      	movs	r1, #64	@ 0x40
 8001df4:	1a8a      	subs	r2, r1, r2
 8001df6:	4094      	lsls	r4, r2
 8001df8:	0025      	movs	r5, r4
 8001dfa:	4305      	orrs	r5, r0
 8001dfc:	9503      	str	r5, [sp, #12]
 8001dfe:	9d03      	ldr	r5, [sp, #12]
 8001e00:	1e6a      	subs	r2, r5, #1
 8001e02:	4195      	sbcs	r5, r2
 8001e04:	433d      	orrs	r5, r7
 8001e06:	e77d      	b.n	8001d04 <__aeabi_dsub+0x4c4>
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x5ce>
 8001e0c:	e744      	b.n	8001c98 <__aeabi_dsub+0x458>
 8001e0e:	2601      	movs	r6, #1
 8001e10:	400e      	ands	r6, r1
 8001e12:	4663      	mov	r3, ip
 8001e14:	08d9      	lsrs	r1, r3, #3
 8001e16:	9b02      	ldr	r3, [sp, #8]
 8001e18:	075a      	lsls	r2, r3, #29
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	08dc      	lsrs	r4, r3, #3
 8001e1e:	e6f0      	b.n	8001c02 <__aeabi_dsub+0x3c2>
 8001e20:	2a00      	cmp	r2, #0
 8001e22:	d028      	beq.n	8001e76 <__aeabi_dsub+0x636>
 8001e24:	4662      	mov	r2, ip
 8001e26:	9f02      	ldr	r7, [sp, #8]
 8001e28:	08c0      	lsrs	r0, r0, #3
 8001e2a:	433a      	orrs	r2, r7
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x5f0>
 8001e2e:	e6dc      	b.n	8001bea <__aeabi_dsub+0x3aa>
 8001e30:	0762      	lsls	r2, r4, #29
 8001e32:	4310      	orrs	r0, r2
 8001e34:	2280      	movs	r2, #128	@ 0x80
 8001e36:	08e4      	lsrs	r4, r4, #3
 8001e38:	0312      	lsls	r2, r2, #12
 8001e3a:	4214      	tst	r4, r2
 8001e3c:	d009      	beq.n	8001e52 <__aeabi_dsub+0x612>
 8001e3e:	08fd      	lsrs	r5, r7, #3
 8001e40:	4215      	tst	r5, r2
 8001e42:	d106      	bne.n	8001e52 <__aeabi_dsub+0x612>
 8001e44:	4663      	mov	r3, ip
 8001e46:	2601      	movs	r6, #1
 8001e48:	002c      	movs	r4, r5
 8001e4a:	08d8      	lsrs	r0, r3, #3
 8001e4c:	077b      	lsls	r3, r7, #29
 8001e4e:	4318      	orrs	r0, r3
 8001e50:	400e      	ands	r6, r1
 8001e52:	0f42      	lsrs	r2, r0, #29
 8001e54:	00c0      	lsls	r0, r0, #3
 8001e56:	08c0      	lsrs	r0, r0, #3
 8001e58:	0752      	lsls	r2, r2, #29
 8001e5a:	4302      	orrs	r2, r0
 8001e5c:	e601      	b.n	8001a62 <__aeabi_dsub+0x222>
 8001e5e:	4663      	mov	r3, ip
 8001e60:	1a1d      	subs	r5, r3, r0
 8001e62:	45ac      	cmp	ip, r5
 8001e64:	4192      	sbcs	r2, r2
 8001e66:	9b02      	ldr	r3, [sp, #8]
 8001e68:	4252      	negs	r2, r2
 8001e6a:	1b1c      	subs	r4, r3, r4
 8001e6c:	000e      	movs	r6, r1
 8001e6e:	4688      	mov	r8, r1
 8001e70:	2701      	movs	r7, #1
 8001e72:	1aa4      	subs	r4, r4, r2
 8001e74:	e546      	b.n	8001904 <__aeabi_dsub+0xc4>
 8001e76:	4663      	mov	r3, ip
 8001e78:	08d9      	lsrs	r1, r3, #3
 8001e7a:	9b02      	ldr	r3, [sp, #8]
 8001e7c:	075a      	lsls	r2, r3, #29
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	08dc      	lsrs	r4, r3, #3
 8001e82:	e5ee      	b.n	8001a62 <__aeabi_dsub+0x222>
 8001e84:	4663      	mov	r3, ip
 8001e86:	9c02      	ldr	r4, [sp, #8]
 8001e88:	9303      	str	r3, [sp, #12]
 8001e8a:	e6c7      	b.n	8001c1c <__aeabi_dsub+0x3dc>
 8001e8c:	08c0      	lsrs	r0, r0, #3
 8001e8e:	2a00      	cmp	r2, #0
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x654>
 8001e92:	e6aa      	b.n	8001bea <__aeabi_dsub+0x3aa>
 8001e94:	0762      	lsls	r2, r4, #29
 8001e96:	4310      	orrs	r0, r2
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	08e4      	lsrs	r4, r4, #3
 8001e9c:	0312      	lsls	r2, r2, #12
 8001e9e:	4214      	tst	r4, r2
 8001ea0:	d0d7      	beq.n	8001e52 <__aeabi_dsub+0x612>
 8001ea2:	9f02      	ldr	r7, [sp, #8]
 8001ea4:	08fd      	lsrs	r5, r7, #3
 8001ea6:	4215      	tst	r5, r2
 8001ea8:	d1d3      	bne.n	8001e52 <__aeabi_dsub+0x612>
 8001eaa:	4663      	mov	r3, ip
 8001eac:	2601      	movs	r6, #1
 8001eae:	08d8      	lsrs	r0, r3, #3
 8001eb0:	077b      	lsls	r3, r7, #29
 8001eb2:	002c      	movs	r4, r5
 8001eb4:	4318      	orrs	r0, r3
 8001eb6:	400e      	ands	r6, r1
 8001eb8:	e7cb      	b.n	8001e52 <__aeabi_dsub+0x612>
 8001eba:	000a      	movs	r2, r1
 8001ebc:	0027      	movs	r7, r4
 8001ebe:	3a20      	subs	r2, #32
 8001ec0:	40d7      	lsrs	r7, r2
 8001ec2:	2920      	cmp	r1, #32
 8001ec4:	d005      	beq.n	8001ed2 <__aeabi_dsub+0x692>
 8001ec6:	2240      	movs	r2, #64	@ 0x40
 8001ec8:	1a52      	subs	r2, r2, r1
 8001eca:	4094      	lsls	r4, r2
 8001ecc:	0025      	movs	r5, r4
 8001ece:	4305      	orrs	r5, r0
 8001ed0:	9503      	str	r5, [sp, #12]
 8001ed2:	9d03      	ldr	r5, [sp, #12]
 8001ed4:	1e6a      	subs	r2, r5, #1
 8001ed6:	4195      	sbcs	r5, r2
 8001ed8:	432f      	orrs	r7, r5
 8001eda:	e610      	b.n	8001afe <__aeabi_dsub+0x2be>
 8001edc:	0014      	movs	r4, r2
 8001ede:	2500      	movs	r5, #0
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	e556      	b.n	8001992 <__aeabi_dsub+0x152>
 8001ee4:	9b02      	ldr	r3, [sp, #8]
 8001ee6:	4460      	add	r0, ip
 8001ee8:	4699      	mov	r9, r3
 8001eea:	4560      	cmp	r0, ip
 8001eec:	4192      	sbcs	r2, r2
 8001eee:	444c      	add	r4, r9
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	0005      	movs	r5, r0
 8001ef4:	18a4      	adds	r4, r4, r2
 8001ef6:	e74c      	b.n	8001d92 <__aeabi_dsub+0x552>
 8001ef8:	001a      	movs	r2, r3
 8001efa:	001c      	movs	r4, r3
 8001efc:	432a      	orrs	r2, r5
 8001efe:	d000      	beq.n	8001f02 <__aeabi_dsub+0x6c2>
 8001f00:	e6b3      	b.n	8001c6a <__aeabi_dsub+0x42a>
 8001f02:	e6c9      	b.n	8001c98 <__aeabi_dsub+0x458>
 8001f04:	2480      	movs	r4, #128	@ 0x80
 8001f06:	2600      	movs	r6, #0
 8001f08:	0324      	lsls	r4, r4, #12
 8001f0a:	e5ae      	b.n	8001a6a <__aeabi_dsub+0x22a>
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	2500      	movs	r5, #0
 8001f10:	1a09      	subs	r1, r1, r0
 8001f12:	e517      	b.n	8001944 <__aeabi_dsub+0x104>
 8001f14:	2200      	movs	r2, #0
 8001f16:	2500      	movs	r5, #0
 8001f18:	4c0b      	ldr	r4, [pc, #44]	@ (8001f48 <__aeabi_dsub+0x708>)
 8001f1a:	e53a      	b.n	8001992 <__aeabi_dsub+0x152>
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x6e2>
 8001f20:	e5f6      	b.n	8001b10 <__aeabi_dsub+0x2d0>
 8001f22:	464b      	mov	r3, r9
 8001f24:	1bda      	subs	r2, r3, r7
 8001f26:	4692      	mov	sl, r2
 8001f28:	2f00      	cmp	r7, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x6ee>
 8001f2c:	e66f      	b.n	8001c0e <__aeabi_dsub+0x3ce>
 8001f2e:	2a38      	cmp	r2, #56	@ 0x38
 8001f30:	dc05      	bgt.n	8001f3e <__aeabi_dsub+0x6fe>
 8001f32:	2680      	movs	r6, #128	@ 0x80
 8001f34:	0436      	lsls	r6, r6, #16
 8001f36:	4334      	orrs	r4, r6
 8001f38:	4688      	mov	r8, r1
 8001f3a:	000e      	movs	r6, r1
 8001f3c:	e6d1      	b.n	8001ce2 <__aeabi_dsub+0x4a2>
 8001f3e:	4688      	mov	r8, r1
 8001f40:	000e      	movs	r6, r1
 8001f42:	2501      	movs	r5, #1
 8001f44:	e6de      	b.n	8001d04 <__aeabi_dsub+0x4c4>
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	000007ff 	.word	0x000007ff
 8001f4c:	ff7fffff 	.word	0xff7fffff
 8001f50:	000007fe 	.word	0x000007fe
 8001f54:	2d00      	cmp	r5, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x71a>
 8001f58:	e668      	b.n	8001c2c <__aeabi_dsub+0x3ec>
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	1bd9      	subs	r1, r3, r7
 8001f5e:	2f00      	cmp	r7, #0
 8001f60:	d101      	bne.n	8001f66 <__aeabi_dsub+0x726>
 8001f62:	468a      	mov	sl, r1
 8001f64:	e5a7      	b.n	8001ab6 <__aeabi_dsub+0x276>
 8001f66:	2701      	movs	r7, #1
 8001f68:	2938      	cmp	r1, #56	@ 0x38
 8001f6a:	dd00      	ble.n	8001f6e <__aeabi_dsub+0x72e>
 8001f6c:	e5c7      	b.n	8001afe <__aeabi_dsub+0x2be>
 8001f6e:	2280      	movs	r2, #128	@ 0x80
 8001f70:	0412      	lsls	r2, r2, #16
 8001f72:	4314      	orrs	r4, r2
 8001f74:	e5af      	b.n	8001ad6 <__aeabi_dsub+0x296>
 8001f76:	46c0      	nop			@ (mov r8, r8)

08001f78 <__aeabi_f2d>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	0242      	lsls	r2, r0, #9
 8001f7c:	0043      	lsls	r3, r0, #1
 8001f7e:	0fc4      	lsrs	r4, r0, #31
 8001f80:	20fe      	movs	r0, #254	@ 0xfe
 8001f82:	0e1b      	lsrs	r3, r3, #24
 8001f84:	1c59      	adds	r1, r3, #1
 8001f86:	0a55      	lsrs	r5, r2, #9
 8001f88:	4208      	tst	r0, r1
 8001f8a:	d00c      	beq.n	8001fa6 <__aeabi_f2d+0x2e>
 8001f8c:	21e0      	movs	r1, #224	@ 0xe0
 8001f8e:	0089      	lsls	r1, r1, #2
 8001f90:	468c      	mov	ip, r1
 8001f92:	076d      	lsls	r5, r5, #29
 8001f94:	0b12      	lsrs	r2, r2, #12
 8001f96:	4463      	add	r3, ip
 8001f98:	051b      	lsls	r3, r3, #20
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	07e4      	lsls	r4, r4, #31
 8001f9e:	4323      	orrs	r3, r4
 8001fa0:	0028      	movs	r0, r5
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d114      	bne.n	8001fd4 <__aeabi_f2d+0x5c>
 8001faa:	2d00      	cmp	r5, #0
 8001fac:	d01b      	beq.n	8001fe6 <__aeabi_f2d+0x6e>
 8001fae:	0028      	movs	r0, r5
 8001fb0:	f000 f8e8 	bl	8002184 <__clzsi2>
 8001fb4:	280a      	cmp	r0, #10
 8001fb6:	dc1c      	bgt.n	8001ff2 <__aeabi_f2d+0x7a>
 8001fb8:	230b      	movs	r3, #11
 8001fba:	002a      	movs	r2, r5
 8001fbc:	1a1b      	subs	r3, r3, r0
 8001fbe:	40da      	lsrs	r2, r3
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	3315      	adds	r3, #21
 8001fc4:	409d      	lsls	r5, r3
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <__aeabi_f2d+0x88>)
 8001fc8:	0312      	lsls	r2, r2, #12
 8001fca:	1a1b      	subs	r3, r3, r0
 8001fcc:	055b      	lsls	r3, r3, #21
 8001fce:	0b12      	lsrs	r2, r2, #12
 8001fd0:	0d5b      	lsrs	r3, r3, #21
 8001fd2:	e7e1      	b.n	8001f98 <__aeabi_f2d+0x20>
 8001fd4:	2d00      	cmp	r5, #0
 8001fd6:	d009      	beq.n	8001fec <__aeabi_f2d+0x74>
 8001fd8:	0b13      	lsrs	r3, r2, #12
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	0312      	lsls	r2, r2, #12
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	076d      	lsls	r5, r5, #29
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <__aeabi_f2d+0x8c>)
 8001fe4:	e7d8      	b.n	8001f98 <__aeabi_f2d+0x20>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2200      	movs	r2, #0
 8001fea:	e7d5      	b.n	8001f98 <__aeabi_f2d+0x20>
 8001fec:	2200      	movs	r2, #0
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <__aeabi_f2d+0x8c>)
 8001ff0:	e7d2      	b.n	8001f98 <__aeabi_f2d+0x20>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	002a      	movs	r2, r5
 8001ff6:	3b0b      	subs	r3, #11
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	2500      	movs	r5, #0
 8001ffc:	e7e3      	b.n	8001fc6 <__aeabi_f2d+0x4e>
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	00000389 	.word	0x00000389
 8002004:	000007ff 	.word	0x000007ff

08002008 <__aeabi_d2f>:
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	004b      	lsls	r3, r1, #1
 800200c:	030f      	lsls	r7, r1, #12
 800200e:	0d5b      	lsrs	r3, r3, #21
 8002010:	4c3b      	ldr	r4, [pc, #236]	@ (8002100 <__aeabi_d2f+0xf8>)
 8002012:	0f45      	lsrs	r5, r0, #29
 8002014:	b083      	sub	sp, #12
 8002016:	0a7f      	lsrs	r7, r7, #9
 8002018:	1c5e      	adds	r6, r3, #1
 800201a:	432f      	orrs	r7, r5
 800201c:	9000      	str	r0, [sp, #0]
 800201e:	9101      	str	r1, [sp, #4]
 8002020:	0fca      	lsrs	r2, r1, #31
 8002022:	00c5      	lsls	r5, r0, #3
 8002024:	4226      	tst	r6, r4
 8002026:	d00b      	beq.n	8002040 <__aeabi_d2f+0x38>
 8002028:	4936      	ldr	r1, [pc, #216]	@ (8002104 <__aeabi_d2f+0xfc>)
 800202a:	185c      	adds	r4, r3, r1
 800202c:	2cfe      	cmp	r4, #254	@ 0xfe
 800202e:	dd13      	ble.n	8002058 <__aeabi_d2f+0x50>
 8002030:	20ff      	movs	r0, #255	@ 0xff
 8002032:	2300      	movs	r3, #0
 8002034:	05c0      	lsls	r0, r0, #23
 8002036:	4318      	orrs	r0, r3
 8002038:	07d2      	lsls	r2, r2, #31
 800203a:	4310      	orrs	r0, r2
 800203c:	b003      	add	sp, #12
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <__aeabi_d2f+0x42>
 8002044:	2000      	movs	r0, #0
 8002046:	2300      	movs	r3, #0
 8002048:	e7f4      	b.n	8002034 <__aeabi_d2f+0x2c>
 800204a:	433d      	orrs	r5, r7
 800204c:	d0f0      	beq.n	8002030 <__aeabi_d2f+0x28>
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	03db      	lsls	r3, r3, #15
 8002052:	20ff      	movs	r0, #255	@ 0xff
 8002054:	433b      	orrs	r3, r7
 8002056:	e7ed      	b.n	8002034 <__aeabi_d2f+0x2c>
 8002058:	2c00      	cmp	r4, #0
 800205a:	dd14      	ble.n	8002086 <__aeabi_d2f+0x7e>
 800205c:	9b00      	ldr	r3, [sp, #0]
 800205e:	00ff      	lsls	r7, r7, #3
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	4183      	sbcs	r3, r0
 8002066:	0f69      	lsrs	r1, r5, #29
 8002068:	433b      	orrs	r3, r7
 800206a:	430b      	orrs	r3, r1
 800206c:	0759      	lsls	r1, r3, #29
 800206e:	d041      	beq.n	80020f4 <__aeabi_d2f+0xec>
 8002070:	210f      	movs	r1, #15
 8002072:	4019      	ands	r1, r3
 8002074:	2904      	cmp	r1, #4
 8002076:	d028      	beq.n	80020ca <__aeabi_d2f+0xc2>
 8002078:	3304      	adds	r3, #4
 800207a:	0159      	lsls	r1, r3, #5
 800207c:	d525      	bpl.n	80020ca <__aeabi_d2f+0xc2>
 800207e:	3401      	adds	r4, #1
 8002080:	2300      	movs	r3, #0
 8002082:	b2e0      	uxtb	r0, r4
 8002084:	e7d6      	b.n	8002034 <__aeabi_d2f+0x2c>
 8002086:	0021      	movs	r1, r4
 8002088:	3117      	adds	r1, #23
 800208a:	dbdb      	blt.n	8002044 <__aeabi_d2f+0x3c>
 800208c:	2180      	movs	r1, #128	@ 0x80
 800208e:	201e      	movs	r0, #30
 8002090:	0409      	lsls	r1, r1, #16
 8002092:	4339      	orrs	r1, r7
 8002094:	1b00      	subs	r0, r0, r4
 8002096:	281f      	cmp	r0, #31
 8002098:	dd1b      	ble.n	80020d2 <__aeabi_d2f+0xca>
 800209a:	2602      	movs	r6, #2
 800209c:	4276      	negs	r6, r6
 800209e:	1b34      	subs	r4, r6, r4
 80020a0:	000e      	movs	r6, r1
 80020a2:	40e6      	lsrs	r6, r4
 80020a4:	0034      	movs	r4, r6
 80020a6:	2820      	cmp	r0, #32
 80020a8:	d004      	beq.n	80020b4 <__aeabi_d2f+0xac>
 80020aa:	4817      	ldr	r0, [pc, #92]	@ (8002108 <__aeabi_d2f+0x100>)
 80020ac:	4684      	mov	ip, r0
 80020ae:	4463      	add	r3, ip
 80020b0:	4099      	lsls	r1, r3
 80020b2:	430d      	orrs	r5, r1
 80020b4:	002b      	movs	r3, r5
 80020b6:	1e59      	subs	r1, r3, #1
 80020b8:	418b      	sbcs	r3, r1
 80020ba:	4323      	orrs	r3, r4
 80020bc:	0759      	lsls	r1, r3, #29
 80020be:	d015      	beq.n	80020ec <__aeabi_d2f+0xe4>
 80020c0:	210f      	movs	r1, #15
 80020c2:	2400      	movs	r4, #0
 80020c4:	4019      	ands	r1, r3
 80020c6:	2904      	cmp	r1, #4
 80020c8:	d117      	bne.n	80020fa <__aeabi_d2f+0xf2>
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	0a5b      	lsrs	r3, r3, #9
 80020ce:	b2e0      	uxtb	r0, r4
 80020d0:	e7b0      	b.n	8002034 <__aeabi_d2f+0x2c>
 80020d2:	4c0e      	ldr	r4, [pc, #56]	@ (800210c <__aeabi_d2f+0x104>)
 80020d4:	191c      	adds	r4, r3, r4
 80020d6:	002b      	movs	r3, r5
 80020d8:	40a5      	lsls	r5, r4
 80020da:	40c3      	lsrs	r3, r0
 80020dc:	40a1      	lsls	r1, r4
 80020de:	1e68      	subs	r0, r5, #1
 80020e0:	4185      	sbcs	r5, r0
 80020e2:	4329      	orrs	r1, r5
 80020e4:	430b      	orrs	r3, r1
 80020e6:	2400      	movs	r4, #0
 80020e8:	0759      	lsls	r1, r3, #29
 80020ea:	d1c1      	bne.n	8002070 <__aeabi_d2f+0x68>
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	2000      	movs	r0, #0
 80020f0:	0a5b      	lsrs	r3, r3, #9
 80020f2:	e79f      	b.n	8002034 <__aeabi_d2f+0x2c>
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	b2e0      	uxtb	r0, r4
 80020f8:	e79c      	b.n	8002034 <__aeabi_d2f+0x2c>
 80020fa:	3304      	adds	r3, #4
 80020fc:	e7e5      	b.n	80020ca <__aeabi_d2f+0xc2>
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	000007fe 	.word	0x000007fe
 8002104:	fffffc80 	.word	0xfffffc80
 8002108:	fffffca2 	.word	0xfffffca2
 800210c:	fffffc82 	.word	0xfffffc82

08002110 <__aeabi_cfrcmple>:
 8002110:	4684      	mov	ip, r0
 8002112:	0008      	movs	r0, r1
 8002114:	4661      	mov	r1, ip
 8002116:	e7ff      	b.n	8002118 <__aeabi_cfcmpeq>

08002118 <__aeabi_cfcmpeq>:
 8002118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800211a:	f000 f8d5 	bl	80022c8 <__lesf2>
 800211e:	2800      	cmp	r0, #0
 8002120:	d401      	bmi.n	8002126 <__aeabi_cfcmpeq+0xe>
 8002122:	2100      	movs	r1, #0
 8002124:	42c8      	cmn	r0, r1
 8002126:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002128 <__aeabi_fcmpeq>:
 8002128:	b510      	push	{r4, lr}
 800212a:	f000 f855 	bl	80021d8 <__eqsf2>
 800212e:	4240      	negs	r0, r0
 8002130:	3001      	adds	r0, #1
 8002132:	bd10      	pop	{r4, pc}

08002134 <__aeabi_fcmplt>:
 8002134:	b510      	push	{r4, lr}
 8002136:	f000 f8c7 	bl	80022c8 <__lesf2>
 800213a:	2800      	cmp	r0, #0
 800213c:	db01      	blt.n	8002142 <__aeabi_fcmplt+0xe>
 800213e:	2000      	movs	r0, #0
 8002140:	bd10      	pop	{r4, pc}
 8002142:	2001      	movs	r0, #1
 8002144:	bd10      	pop	{r4, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)

08002148 <__aeabi_fcmple>:
 8002148:	b510      	push	{r4, lr}
 800214a:	f000 f8bd 	bl	80022c8 <__lesf2>
 800214e:	2800      	cmp	r0, #0
 8002150:	dd01      	ble.n	8002156 <__aeabi_fcmple+0xe>
 8002152:	2000      	movs	r0, #0
 8002154:	bd10      	pop	{r4, pc}
 8002156:	2001      	movs	r0, #1
 8002158:	bd10      	pop	{r4, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)

0800215c <__aeabi_fcmpgt>:
 800215c:	b510      	push	{r4, lr}
 800215e:	f000 f863 	bl	8002228 <__gesf2>
 8002162:	2800      	cmp	r0, #0
 8002164:	dc01      	bgt.n	800216a <__aeabi_fcmpgt+0xe>
 8002166:	2000      	movs	r0, #0
 8002168:	bd10      	pop	{r4, pc}
 800216a:	2001      	movs	r0, #1
 800216c:	bd10      	pop	{r4, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)

08002170 <__aeabi_fcmpge>:
 8002170:	b510      	push	{r4, lr}
 8002172:	f000 f859 	bl	8002228 <__gesf2>
 8002176:	2800      	cmp	r0, #0
 8002178:	da01      	bge.n	800217e <__aeabi_fcmpge+0xe>
 800217a:	2000      	movs	r0, #0
 800217c:	bd10      	pop	{r4, pc}
 800217e:	2001      	movs	r0, #1
 8002180:	bd10      	pop	{r4, pc}
 8002182:	46c0      	nop			@ (mov r8, r8)

08002184 <__clzsi2>:
 8002184:	211c      	movs	r1, #28
 8002186:	2301      	movs	r3, #1
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	4298      	cmp	r0, r3
 800218c:	d301      	bcc.n	8002192 <__clzsi2+0xe>
 800218e:	0c00      	lsrs	r0, r0, #16
 8002190:	3910      	subs	r1, #16
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	4298      	cmp	r0, r3
 8002196:	d301      	bcc.n	800219c <__clzsi2+0x18>
 8002198:	0a00      	lsrs	r0, r0, #8
 800219a:	3908      	subs	r1, #8
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	4298      	cmp	r0, r3
 80021a0:	d301      	bcc.n	80021a6 <__clzsi2+0x22>
 80021a2:	0900      	lsrs	r0, r0, #4
 80021a4:	3904      	subs	r1, #4
 80021a6:	a202      	add	r2, pc, #8	@ (adr r2, 80021b0 <__clzsi2+0x2c>)
 80021a8:	5c10      	ldrb	r0, [r2, r0]
 80021aa:	1840      	adds	r0, r0, r1
 80021ac:	4770      	bx	lr
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	02020304 	.word	0x02020304
 80021b4:	01010101 	.word	0x01010101
	...

080021c0 <__clzdi2>:
 80021c0:	b510      	push	{r4, lr}
 80021c2:	2900      	cmp	r1, #0
 80021c4:	d103      	bne.n	80021ce <__clzdi2+0xe>
 80021c6:	f7ff ffdd 	bl	8002184 <__clzsi2>
 80021ca:	3020      	adds	r0, #32
 80021cc:	e002      	b.n	80021d4 <__clzdi2+0x14>
 80021ce:	0008      	movs	r0, r1
 80021d0:	f7ff ffd8 	bl	8002184 <__clzsi2>
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)

080021d8 <__eqsf2>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	0042      	lsls	r2, r0, #1
 80021dc:	024e      	lsls	r6, r1, #9
 80021de:	004c      	lsls	r4, r1, #1
 80021e0:	0245      	lsls	r5, r0, #9
 80021e2:	0a6d      	lsrs	r5, r5, #9
 80021e4:	0e12      	lsrs	r2, r2, #24
 80021e6:	0fc3      	lsrs	r3, r0, #31
 80021e8:	0a76      	lsrs	r6, r6, #9
 80021ea:	0e24      	lsrs	r4, r4, #24
 80021ec:	0fc9      	lsrs	r1, r1, #31
 80021ee:	2aff      	cmp	r2, #255	@ 0xff
 80021f0:	d010      	beq.n	8002214 <__eqsf2+0x3c>
 80021f2:	2cff      	cmp	r4, #255	@ 0xff
 80021f4:	d00c      	beq.n	8002210 <__eqsf2+0x38>
 80021f6:	2001      	movs	r0, #1
 80021f8:	42a2      	cmp	r2, r4
 80021fa:	d10a      	bne.n	8002212 <__eqsf2+0x3a>
 80021fc:	42b5      	cmp	r5, r6
 80021fe:	d108      	bne.n	8002212 <__eqsf2+0x3a>
 8002200:	428b      	cmp	r3, r1
 8002202:	d00f      	beq.n	8002224 <__eqsf2+0x4c>
 8002204:	2a00      	cmp	r2, #0
 8002206:	d104      	bne.n	8002212 <__eqsf2+0x3a>
 8002208:	0028      	movs	r0, r5
 800220a:	1e43      	subs	r3, r0, #1
 800220c:	4198      	sbcs	r0, r3
 800220e:	e000      	b.n	8002212 <__eqsf2+0x3a>
 8002210:	2001      	movs	r0, #1
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	2001      	movs	r0, #1
 8002216:	2cff      	cmp	r4, #255	@ 0xff
 8002218:	d1fb      	bne.n	8002212 <__eqsf2+0x3a>
 800221a:	4335      	orrs	r5, r6
 800221c:	d1f9      	bne.n	8002212 <__eqsf2+0x3a>
 800221e:	404b      	eors	r3, r1
 8002220:	0018      	movs	r0, r3
 8002222:	e7f6      	b.n	8002212 <__eqsf2+0x3a>
 8002224:	2000      	movs	r0, #0
 8002226:	e7f4      	b.n	8002212 <__eqsf2+0x3a>

08002228 <__gesf2>:
 8002228:	b530      	push	{r4, r5, lr}
 800222a:	0042      	lsls	r2, r0, #1
 800222c:	0244      	lsls	r4, r0, #9
 800222e:	024d      	lsls	r5, r1, #9
 8002230:	0fc3      	lsrs	r3, r0, #31
 8002232:	0048      	lsls	r0, r1, #1
 8002234:	0a64      	lsrs	r4, r4, #9
 8002236:	0e12      	lsrs	r2, r2, #24
 8002238:	0a6d      	lsrs	r5, r5, #9
 800223a:	0e00      	lsrs	r0, r0, #24
 800223c:	0fc9      	lsrs	r1, r1, #31
 800223e:	2aff      	cmp	r2, #255	@ 0xff
 8002240:	d019      	beq.n	8002276 <__gesf2+0x4e>
 8002242:	28ff      	cmp	r0, #255	@ 0xff
 8002244:	d00b      	beq.n	800225e <__gesf2+0x36>
 8002246:	2a00      	cmp	r2, #0
 8002248:	d11e      	bne.n	8002288 <__gesf2+0x60>
 800224a:	2800      	cmp	r0, #0
 800224c:	d10b      	bne.n	8002266 <__gesf2+0x3e>
 800224e:	2d00      	cmp	r5, #0
 8002250:	d027      	beq.n	80022a2 <__gesf2+0x7a>
 8002252:	2c00      	cmp	r4, #0
 8002254:	d134      	bne.n	80022c0 <__gesf2+0x98>
 8002256:	2900      	cmp	r1, #0
 8002258:	d02f      	beq.n	80022ba <__gesf2+0x92>
 800225a:	0008      	movs	r0, r1
 800225c:	bd30      	pop	{r4, r5, pc}
 800225e:	2d00      	cmp	r5, #0
 8002260:	d128      	bne.n	80022b4 <__gesf2+0x8c>
 8002262:	2a00      	cmp	r2, #0
 8002264:	d101      	bne.n	800226a <__gesf2+0x42>
 8002266:	2c00      	cmp	r4, #0
 8002268:	d0f5      	beq.n	8002256 <__gesf2+0x2e>
 800226a:	428b      	cmp	r3, r1
 800226c:	d107      	bne.n	800227e <__gesf2+0x56>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d023      	beq.n	80022ba <__gesf2+0x92>
 8002272:	0018      	movs	r0, r3
 8002274:	e7f2      	b.n	800225c <__gesf2+0x34>
 8002276:	2c00      	cmp	r4, #0
 8002278:	d11c      	bne.n	80022b4 <__gesf2+0x8c>
 800227a:	28ff      	cmp	r0, #255	@ 0xff
 800227c:	d014      	beq.n	80022a8 <__gesf2+0x80>
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	2302      	movs	r3, #2
 8002282:	4018      	ands	r0, r3
 8002284:	3801      	subs	r0, #1
 8002286:	e7e9      	b.n	800225c <__gesf2+0x34>
 8002288:	2800      	cmp	r0, #0
 800228a:	d0f8      	beq.n	800227e <__gesf2+0x56>
 800228c:	428b      	cmp	r3, r1
 800228e:	d1f6      	bne.n	800227e <__gesf2+0x56>
 8002290:	4282      	cmp	r2, r0
 8002292:	dcf4      	bgt.n	800227e <__gesf2+0x56>
 8002294:	dbeb      	blt.n	800226e <__gesf2+0x46>
 8002296:	42ac      	cmp	r4, r5
 8002298:	d8f1      	bhi.n	800227e <__gesf2+0x56>
 800229a:	2000      	movs	r0, #0
 800229c:	42ac      	cmp	r4, r5
 800229e:	d2dd      	bcs.n	800225c <__gesf2+0x34>
 80022a0:	e7e5      	b.n	800226e <__gesf2+0x46>
 80022a2:	2c00      	cmp	r4, #0
 80022a4:	d0da      	beq.n	800225c <__gesf2+0x34>
 80022a6:	e7ea      	b.n	800227e <__gesf2+0x56>
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	d103      	bne.n	80022b4 <__gesf2+0x8c>
 80022ac:	428b      	cmp	r3, r1
 80022ae:	d1e6      	bne.n	800227e <__gesf2+0x56>
 80022b0:	2000      	movs	r0, #0
 80022b2:	e7d3      	b.n	800225c <__gesf2+0x34>
 80022b4:	2002      	movs	r0, #2
 80022b6:	4240      	negs	r0, r0
 80022b8:	e7d0      	b.n	800225c <__gesf2+0x34>
 80022ba:	2001      	movs	r0, #1
 80022bc:	4240      	negs	r0, r0
 80022be:	e7cd      	b.n	800225c <__gesf2+0x34>
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d0e8      	beq.n	8002296 <__gesf2+0x6e>
 80022c4:	e7db      	b.n	800227e <__gesf2+0x56>
 80022c6:	46c0      	nop			@ (mov r8, r8)

080022c8 <__lesf2>:
 80022c8:	b530      	push	{r4, r5, lr}
 80022ca:	0042      	lsls	r2, r0, #1
 80022cc:	0244      	lsls	r4, r0, #9
 80022ce:	024d      	lsls	r5, r1, #9
 80022d0:	0fc3      	lsrs	r3, r0, #31
 80022d2:	0048      	lsls	r0, r1, #1
 80022d4:	0a64      	lsrs	r4, r4, #9
 80022d6:	0e12      	lsrs	r2, r2, #24
 80022d8:	0a6d      	lsrs	r5, r5, #9
 80022da:	0e00      	lsrs	r0, r0, #24
 80022dc:	0fc9      	lsrs	r1, r1, #31
 80022de:	2aff      	cmp	r2, #255	@ 0xff
 80022e0:	d01a      	beq.n	8002318 <__lesf2+0x50>
 80022e2:	28ff      	cmp	r0, #255	@ 0xff
 80022e4:	d00e      	beq.n	8002304 <__lesf2+0x3c>
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d11e      	bne.n	8002328 <__lesf2+0x60>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d10e      	bne.n	800230c <__lesf2+0x44>
 80022ee:	2d00      	cmp	r5, #0
 80022f0:	d02a      	beq.n	8002348 <__lesf2+0x80>
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d00c      	beq.n	8002310 <__lesf2+0x48>
 80022f6:	428b      	cmp	r3, r1
 80022f8:	d01d      	beq.n	8002336 <__lesf2+0x6e>
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	2302      	movs	r3, #2
 80022fe:	4018      	ands	r0, r3
 8002300:	3801      	subs	r0, #1
 8002302:	e010      	b.n	8002326 <__lesf2+0x5e>
 8002304:	2d00      	cmp	r5, #0
 8002306:	d10d      	bne.n	8002324 <__lesf2+0x5c>
 8002308:	2a00      	cmp	r2, #0
 800230a:	d120      	bne.n	800234e <__lesf2+0x86>
 800230c:	2c00      	cmp	r4, #0
 800230e:	d11e      	bne.n	800234e <__lesf2+0x86>
 8002310:	2900      	cmp	r1, #0
 8002312:	d023      	beq.n	800235c <__lesf2+0x94>
 8002314:	0008      	movs	r0, r1
 8002316:	e006      	b.n	8002326 <__lesf2+0x5e>
 8002318:	2c00      	cmp	r4, #0
 800231a:	d103      	bne.n	8002324 <__lesf2+0x5c>
 800231c:	28ff      	cmp	r0, #255	@ 0xff
 800231e:	d1ec      	bne.n	80022fa <__lesf2+0x32>
 8002320:	2d00      	cmp	r5, #0
 8002322:	d017      	beq.n	8002354 <__lesf2+0x8c>
 8002324:	2002      	movs	r0, #2
 8002326:	bd30      	pop	{r4, r5, pc}
 8002328:	2800      	cmp	r0, #0
 800232a:	d0e6      	beq.n	80022fa <__lesf2+0x32>
 800232c:	428b      	cmp	r3, r1
 800232e:	d1e4      	bne.n	80022fa <__lesf2+0x32>
 8002330:	4282      	cmp	r2, r0
 8002332:	dce2      	bgt.n	80022fa <__lesf2+0x32>
 8002334:	db04      	blt.n	8002340 <__lesf2+0x78>
 8002336:	42ac      	cmp	r4, r5
 8002338:	d8df      	bhi.n	80022fa <__lesf2+0x32>
 800233a:	2000      	movs	r0, #0
 800233c:	42ac      	cmp	r4, r5
 800233e:	d2f2      	bcs.n	8002326 <__lesf2+0x5e>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <__lesf2+0x94>
 8002344:	0018      	movs	r0, r3
 8002346:	e7ee      	b.n	8002326 <__lesf2+0x5e>
 8002348:	2c00      	cmp	r4, #0
 800234a:	d0ec      	beq.n	8002326 <__lesf2+0x5e>
 800234c:	e7d5      	b.n	80022fa <__lesf2+0x32>
 800234e:	428b      	cmp	r3, r1
 8002350:	d1d3      	bne.n	80022fa <__lesf2+0x32>
 8002352:	e7f5      	b.n	8002340 <__lesf2+0x78>
 8002354:	2000      	movs	r0, #0
 8002356:	428b      	cmp	r3, r1
 8002358:	d0e5      	beq.n	8002326 <__lesf2+0x5e>
 800235a:	e7ce      	b.n	80022fa <__lesf2+0x32>
 800235c:	2001      	movs	r0, #1
 800235e:	4240      	negs	r0, r0
 8002360:	e7e1      	b.n	8002326 <__lesf2+0x5e>
 8002362:	46c0      	nop			@ (mov r8, r8)

08002364 <microDelay>:
/* USER CODE BEGIN 0 */
void send_uart_message(char *messsage){
    HAL_UART_Transmit(&huart2, (uint8_t*)messsage, strlen(messsage), HAL_MAX_DELAY);
}

void microDelay(uint16_t delay) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	0002      	movs	r2, r0
 800236c:	1dbb      	adds	r3, r7, #6
 800236e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <microDelay+0x30>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <microDelay+0x30>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002380:	1dbb      	adds	r3, r7, #6
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3f8      	bcc.n	800237a <microDelay+0x16>
}
 8002388:	46c0      	nop			@ (mov r8, r8)
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	200001a4 	.word	0x200001a4

08002398 <DHT11_Start>:

uint8_t DHT11_Start() {
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800239e:	2417      	movs	r4, #23
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80023a6:	003b      	movs	r3, r7
 80023a8:	0018      	movs	r0, r3
 80023aa:	2314      	movs	r3, #20
 80023ac:	001a      	movs	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f007 fc92 	bl	8009cd8 <memset>
	GPIO_InitStructPrivate.Pin = DHT11_Pin;
 80023b4:	003b      	movs	r3, r7
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	00d2      	lsls	r2, r2, #3
 80023ba:	601a      	str	r2, [r3, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	003b      	movs	r3, r7
 80023be:	2201      	movs	r2, #1
 80023c0:	605a      	str	r2, [r3, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	003b      	movs	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80023c8:	003b      	movs	r3, r7
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate);
 80023ce:	003a      	movs	r2, r7
 80023d0:	23a0      	movs	r3, #160	@ 0xa0
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f002 ff16 	bl	8005208 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	00d9      	lsls	r1, r3, #3
 80023e0:	23a0      	movs	r3, #160	@ 0xa0
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	2200      	movs	r2, #0
 80023e6:	0018      	movs	r0, r3
 80023e8:	f003 f88f 	bl	800550a <HAL_GPIO_WritePin>
	microDelay(20000);
 80023ec:	4b30      	ldr	r3, [pc, #192]	@ (80024b0 <DHT11_Start+0x118>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7ff ffb8 	bl	8002364 <microDelay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	00d9      	lsls	r1, r3, #3
 80023f8:	23a0      	movs	r3, #160	@ 0xa0
 80023fa:	05db      	lsls	r3, r3, #23
 80023fc:	2201      	movs	r2, #1
 80023fe:	0018      	movs	r0, r3
 8002400:	f003 f883 	bl	800550a <HAL_GPIO_WritePin>
	microDelay(20);
 8002404:	2014      	movs	r0, #20
 8002406:	f7ff ffad 	bl	8002364 <microDelay>

	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800240a:	003b      	movs	r3, r7
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8002410:	003b      	movs	r3, r7
 8002412:	2201      	movs	r2, #1
 8002414:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate);
 8002416:	003a      	movs	r2, r7
 8002418:	23a0      	movs	r3, #160	@ 0xa0
 800241a:	05db      	lsls	r3, r3, #23
 800241c:	0011      	movs	r1, r2
 800241e:	0018      	movs	r0, r3
 8002420:	f002 fef2 	bl	8005208 <HAL_GPIO_Init>

	microDelay(40);
 8002424:	2028      	movs	r0, #40	@ 0x28
 8002426:	f7ff ff9d 	bl	8002364 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	00da      	lsls	r2, r3, #3
 800242e:	23a0      	movs	r3, #160	@ 0xa0
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
 8002436:	f003 f84b 	bl	80054d0 <HAL_GPIO_ReadPin>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d10f      	bne.n	800245e <DHT11_Start+0xc6>
		microDelay(80);
 800243e:	2050      	movs	r0, #80	@ 0x50
 8002440:	f7ff ff90 	bl	8002364 <microDelay>
		if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) Response = 1;
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	00da      	lsls	r2, r3, #3
 8002448:	23a0      	movs	r3, #160	@ 0xa0
 800244a:	05db      	lsls	r3, r3, #23
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f003 f83e 	bl	80054d0 <HAL_GPIO_ReadPin>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d002      	beq.n	800245e <DHT11_Start+0xc6>
 8002458:	193b      	adds	r3, r7, r4
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
	}

	pMillis = HAL_GetTick();
 800245e:	f001 fbdf 	bl	8003c20 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <DHT11_Start+0x11c>)
 8002466:	601a      	str	r2, [r3, #0]
	cMillis = HAL_GetTick();
 8002468:	f001 fbda 	bl	8003c20 <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <DHT11_Start+0x120>)
 8002470:	601a      	str	r2, [r3, #0]

	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) && pMillis + 2 > cMillis) {
 8002472:	e004      	b.n	800247e <DHT11_Start+0xe6>
		cMillis = HAL_GetTick();
 8002474:	f001 fbd4 	bl	8003c20 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <DHT11_Start+0x120>)
 800247c:	601a      	str	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) && pMillis + 2 > cMillis) {
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	00da      	lsls	r2, r3, #3
 8002482:	23a0      	movs	r3, #160	@ 0xa0
 8002484:	05db      	lsls	r3, r3, #23
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f003 f821 	bl	80054d0 <HAL_GPIO_ReadPin>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d006      	beq.n	80024a0 <DHT11_Start+0x108>
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <DHT11_Start+0x11c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1c9a      	adds	r2, r3, #2
 8002498:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <DHT11_Start+0x120>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d8e9      	bhi.n	8002474 <DHT11_Start+0xdc>
	}

	return Response;
 80024a0:	2317      	movs	r3, #23
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	781b      	ldrb	r3, [r3, #0]
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b007      	add	sp, #28
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	00004e20 	.word	0x00004e20
 80024b4:	20000404 	.word	0x20000404
 80024b8:	20000408 	.word	0x20000408

080024bc <DHT11_Read>:

uint8_t DHT11_Read() {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	e074      	b.n	80025b4 <DHT11_Read+0xf8>
		pMillis = HAL_GetTick();
 80024ca:	f001 fba9 	bl	8003c20 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <DHT11_Read+0x10c>)
 80024d2:	601a      	str	r2, [r3, #0]
		cMillis = HAL_GetTick();
 80024d4:	f001 fba4 	bl	8003c20 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	4b3c      	ldr	r3, [pc, #240]	@ (80025cc <DHT11_Read+0x110>)
 80024dc:	601a      	str	r2, [r3, #0]

		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 2 > cMillis) {
 80024de:	e004      	b.n	80024ea <DHT11_Read+0x2e>
			cMillis = HAL_GetTick();
 80024e0:	f001 fb9e 	bl	8003c20 <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	4b39      	ldr	r3, [pc, #228]	@ (80025cc <DHT11_Read+0x110>)
 80024e8:	601a      	str	r2, [r3, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)) && pMillis + 2 > cMillis) {
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	00da      	lsls	r2, r3, #3
 80024ee:	23a0      	movs	r3, #160	@ 0xa0
 80024f0:	05db      	lsls	r3, r3, #23
 80024f2:	0011      	movs	r1, r2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f002 ffeb 	bl	80054d0 <HAL_GPIO_ReadPin>
 80024fa:	1e03      	subs	r3, r0, #0
 80024fc:	d106      	bne.n	800250c <DHT11_Read+0x50>
 80024fe:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <DHT11_Read+0x10c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1c9a      	adds	r2, r3, #2
 8002504:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <DHT11_Read+0x110>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d8e9      	bhi.n	80024e0 <DHT11_Read+0x24>
		}

		microDelay(40);
 800250c:	2028      	movs	r0, #40	@ 0x28
 800250e:	f7ff ff29 	bl	8002364 <microDelay>

		if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	00da      	lsls	r2, r3, #3
 8002516:	23a0      	movs	r3, #160	@ 0xa0
 8002518:	05db      	lsls	r3, r3, #23
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f002 ffd7 	bl	80054d0 <HAL_GPIO_ReadPin>
 8002522:	1e03      	subs	r3, r0, #0
 8002524:	d111      	bne.n	800254a <DHT11_Read+0x8e>
			b &= ~(1 << (7 - a));
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2207      	movs	r2, #7
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2201      	movs	r2, #1
 8002530:	409a      	lsls	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	b25b      	sxtb	r3, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	b25b      	sxtb	r3, r3
 800253a:	1dba      	adds	r2, r7, #6
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	b252      	sxtb	r2, r2
 8002540:	4013      	ands	r3, r2
 8002542:	b25a      	sxtb	r2, r3
 8002544:	1dbb      	adds	r3, r7, #6
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e00e      	b.n	8002568 <DHT11_Read+0xac>
		} else {
			b |= (1 << (7 - a));
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2207      	movs	r2, #7
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2201      	movs	r2, #1
 8002554:	409a      	lsls	r2, r3
 8002556:	0013      	movs	r3, r2
 8002558:	b25a      	sxtb	r2, r3
 800255a:	1dbb      	adds	r3, r7, #6
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	4313      	orrs	r3, r2
 8002562:	b25a      	sxtb	r2, r3
 8002564:	1dbb      	adds	r3, r7, #6
 8002566:	701a      	strb	r2, [r3, #0]
		}

		pMillis = HAL_GetTick();
 8002568:	f001 fb5a 	bl	8003c20 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <DHT11_Read+0x10c>)
 8002570:	601a      	str	r2, [r3, #0]
		cMillis = HAL_GetTick();
 8002572:	f001 fb55 	bl	8003c20 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <DHT11_Read+0x110>)
 800257a:	601a      	str	r2, [r3, #0]

		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) && pMillis + 2 > cMillis) {
 800257c:	e004      	b.n	8002588 <DHT11_Read+0xcc>
			cMillis = HAL_GetTick();
 800257e:	f001 fb4f 	bl	8003c20 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <DHT11_Read+0x110>)
 8002586:	601a      	str	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) && pMillis + 2 > cMillis) {
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	00da      	lsls	r2, r3, #3
 800258c:	23a0      	movs	r3, #160	@ 0xa0
 800258e:	05db      	lsls	r3, r3, #23
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f002 ff9c 	bl	80054d0 <HAL_GPIO_ReadPin>
 8002598:	1e03      	subs	r3, r0, #0
 800259a:	d006      	beq.n	80025aa <DHT11_Read+0xee>
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <DHT11_Read+0x10c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	1c9a      	adds	r2, r3, #2
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <DHT11_Read+0x110>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d8e9      	bhi.n	800257e <DHT11_Read+0xc2>
	for (a = 0; a < 8; a++) {
 80025aa:	1dfb      	adds	r3, r7, #7
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	3201      	adds	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b07      	cmp	r3, #7
 80025ba:	d986      	bls.n	80024ca <DHT11_Read+0xe>
		}
	}

	return b;
 80025bc:	1dbb      	adds	r3, r7, #6
 80025be:	781b      	ldrb	r3, [r3, #0]
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000404 	.word	0x20000404
 80025cc:	20000408 	.word	0x20000408

080025d0 <Read_PMS7003>:

void Read_PMS7003(uint16_t* p1_0, uint16_t* p2_5, uint16_t* p10) {
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
    // Extract PM values from buffer
	uint16_t pm1_0 = (pms_buffer[4] << 8) | pms_buffer[5];
 80025dc:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <Read_PMS7003+0x74>)
 80025de:	791b      	ldrb	r3, [r3, #4]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <Read_PMS7003+0x74>)
 80025e6:	795b      	ldrb	r3, [r3, #5]
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	2116      	movs	r1, #22
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	801a      	strh	r2, [r3, #0]
    uint16_t pm2_5 = (pms_buffer[6] << 8) | pms_buffer[7];
 80025f4:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <Read_PMS7003+0x74>)
 80025f6:	799b      	ldrb	r3, [r3, #6]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <Read_PMS7003+0x74>)
 80025fe:	79db      	ldrb	r3, [r3, #7]
 8002600:	b21b      	sxth	r3, r3
 8002602:	4313      	orrs	r3, r2
 8002604:	b21a      	sxth	r2, r3
 8002606:	2014      	movs	r0, #20
 8002608:	183b      	adds	r3, r7, r0
 800260a:	801a      	strh	r2, [r3, #0]
    uint16_t pm10 = (pms_buffer[8] << 8) | pms_buffer[9];
 800260c:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <Read_PMS7003+0x74>)
 800260e:	7a1b      	ldrb	r3, [r3, #8]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21a      	sxth	r2, r3
 8002614:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <Read_PMS7003+0x74>)
 8002616:	7a5b      	ldrb	r3, [r3, #9]
 8002618:	b21b      	sxth	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b21a      	sxth	r2, r3
 800261e:	2412      	movs	r4, #18
 8002620:	193b      	adds	r3, r7, r4
 8002622:	801a      	strh	r2, [r3, #0]

    *p1_0 = pm1_0;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	187a      	adds	r2, r7, r1
 8002628:	8812      	ldrh	r2, [r2, #0]
 800262a:	801a      	strh	r2, [r3, #0]
    *p2_5 = pm2_5;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	183a      	adds	r2, r7, r0
 8002630:	8812      	ldrh	r2, [r2, #0]
 8002632:	801a      	strh	r2, [r3, #0]
    *p10 = pm10;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	193a      	adds	r2, r7, r4
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	801a      	strh	r2, [r3, #0]

    return;
 800263c:	46c0      	nop			@ (mov r8, r8)
}
 800263e:	46bd      	mov	sp, r7
 8002640:	b007      	add	sp, #28
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	20000410 	.word	0x20000410

08002648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b095      	sub	sp, #84	@ 0x54
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800264e:	f001 fa6b 	bl	8003b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002652:	f000 f8f1 	bl	8002838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002656:	f000 facb 	bl	8002bf0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800265a:	f000 fa47 	bl	8002aec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800265e:	f000 f9af 	bl	80029c0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002662:	f000 f9e7 	bl	8002a34 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002666:	f000 fa8f 	bl	8002b88 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800266a:	f000 f943 	bl	80028f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800266e:	495f      	ldr	r1, [pc, #380]	@ (80027ec <main+0x1a4>)
 8002670:	4b5f      	ldr	r3, [pc, #380]	@ (80027f0 <main+0x1a8>)
 8002672:	2201      	movs	r2, #1
 8002674:	0018      	movs	r0, r3
 8002676:	f005 fad3 	bl	8007c20 <HAL_UART_Receive_IT>
  HAL_SPI_Receive_IT(&hspi1, spi_data, 8);
 800267a:	495e      	ldr	r1, [pc, #376]	@ (80027f4 <main+0x1ac>)
 800267c:	4b5e      	ldr	r3, [pc, #376]	@ (80027f8 <main+0x1b0>)
 800267e:	2208      	movs	r2, #8
 8002680:	0018      	movs	r0, r3
 8002682:	f004 f873 	bl	800676c <HAL_SPI_Receive_IT>
  HAL_UART_Receive_IT(&huart3, pms_buffer, 32);
 8002686:	495d      	ldr	r1, [pc, #372]	@ (80027fc <main+0x1b4>)
 8002688:	4b5d      	ldr	r3, [pc, #372]	@ (8002800 <main+0x1b8>)
 800268a:	2220      	movs	r2, #32
 800268c:	0018      	movs	r0, r3
 800268e:	f005 fac7 	bl	8007c20 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 8002692:	4b5c      	ldr	r3, [pc, #368]	@ (8002804 <main+0x1bc>)
 8002694:	0018      	movs	r0, r3
 8002696:	f004 ff07 	bl	80074a8 <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 800269a:	4b5b      	ldr	r3, [pc, #364]	@ (8002808 <main+0x1c0>)
 800269c:	0018      	movs	r0, r3
 800269e:	f002 fad7 	bl	8004c50 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80026a2:	4b59      	ldr	r3, [pc, #356]	@ (8002808 <main+0x1c0>)
 80026a4:	0018      	movs	r0, r3
 80026a6:	f001 fdf5 	bl	8004294 <HAL_ADC_Start>

//  HAL_ADC_Start_DMA(&hadc1, &raw_ldr, 1);

  HAL_UART_Transmit(&huart2, (uint8_t *)"Start\r\n", 7, 1000);
 80026aa:	23fa      	movs	r3, #250	@ 0xfa
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4957      	ldr	r1, [pc, #348]	@ (800280c <main+0x1c4>)
 80026b0:	484f      	ldr	r0, [pc, #316]	@ (80027f0 <main+0x1a8>)
 80026b2:	2207      	movs	r2, #7
 80026b4:	f005 fa10 	bl	8007ad8 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(RPI_FLAG_GPIO_Port, RPI_FLAG_Pin, 1);
 80026b8:	4b55      	ldr	r3, [pc, #340]	@ (8002810 <main+0x1c8>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	2180      	movs	r1, #128	@ 0x80
 80026be:	0018      	movs	r0, r3
 80026c0:	f002 ff23 	bl	800550a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DHT11_POWER_GPIO_Port, DHT11_POWER_Pin, 0);
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	015b      	lsls	r3, r3, #5
 80026c8:	4851      	ldr	r0, [pc, #324]	@ (8002810 <main+0x1c8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	0019      	movs	r1, r3
 80026ce:	f002 ff1c 	bl	800550a <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t now = HAL_GetTick();
 80026d2:	f001 faa5 	bl	8003c20 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	  if (now - last_dht_run > 2000) {
 80026da:	4b4e      	ldr	r3, [pc, #312]	@ (8002814 <main+0x1cc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026e0:	1ad2      	subs	r2, r2, r3
 80026e2:	23fa      	movs	r3, #250	@ 0xfa
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d9f3      	bls.n	80026d2 <main+0x8a>
		  HAL_GPIO_WritePin(DHT11_POWER_GPIO_Port, DHT11_POWER_Pin, 1);
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	015b      	lsls	r3, r3, #5
 80026ee:	4848      	ldr	r0, [pc, #288]	@ (8002810 <main+0x1c8>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	0019      	movs	r1, r3
 80026f4:	f002 ff09 	bl	800550a <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f001 fa9b 	bl	8003c34 <HAL_Delay>

		  if (DHT11_Start()) {
 80026fe:	f7ff fe4b 	bl	8002398 <DHT11_Start>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d0e5      	beq.n	80026d2 <main+0x8a>
			  last_dht_run = now;
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <main+0x1cc>)
 8002708:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800270a:	601a      	str	r2, [r3, #0]

			  HAL_UART_Receive_IT(&huart3, pms_buffer, 32);
 800270c:	493b      	ldr	r1, [pc, #236]	@ (80027fc <main+0x1b4>)
 800270e:	4b3c      	ldr	r3, [pc, #240]	@ (8002800 <main+0x1b8>)
 8002710:	2220      	movs	r2, #32
 8002712:	0018      	movs	r0, r3
 8002714:	f005 fa84 	bl	8007c20 <HAL_UART_Receive_IT>

			  RHI = DHT11_Read();
 8002718:	f7ff fed0 	bl	80024bc <DHT11_Read>
 800271c:	0003      	movs	r3, r0
 800271e:	001a      	movs	r2, r3
 8002720:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <main+0x1d0>)
 8002722:	701a      	strb	r2, [r3, #0]
			  RHD = DHT11_Read();
 8002724:	f7ff feca 	bl	80024bc <DHT11_Read>
 8002728:	0003      	movs	r3, r0
 800272a:	001a      	movs	r2, r3
 800272c:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <main+0x1d4>)
 800272e:	701a      	strb	r2, [r3, #0]
			  TCI = DHT11_Read();
 8002730:	f7ff fec4 	bl	80024bc <DHT11_Read>
 8002734:	0003      	movs	r3, r0
 8002736:	001a      	movs	r2, r3
 8002738:	4b39      	ldr	r3, [pc, #228]	@ (8002820 <main+0x1d8>)
 800273a:	701a      	strb	r2, [r3, #0]
			  TCD = DHT11_Read();
 800273c:	f7ff febe 	bl	80024bc <DHT11_Read>
 8002740:	0003      	movs	r3, r0
 8002742:	001a      	movs	r2, r3
 8002744:	4b37      	ldr	r3, [pc, #220]	@ (8002824 <main+0x1dc>)
 8002746:	701a      	strb	r2, [r3, #0]
			  SUM = DHT11_Read();
 8002748:	f7ff feb8 	bl	80024bc <DHT11_Read>
 800274c:	0003      	movs	r3, r0
 800274e:	001a      	movs	r2, r3
 8002750:	4b35      	ldr	r3, [pc, #212]	@ (8002828 <main+0x1e0>)
 8002752:	701a      	strb	r2, [r3, #0]

			  if (RHI + RHD + TCI + TCD == SUM) {
 8002754:	4b30      	ldr	r3, [pc, #192]	@ (8002818 <main+0x1d0>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	001a      	movs	r2, r3
 800275a:	4b30      	ldr	r3, [pc, #192]	@ (800281c <main+0x1d4>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	18d3      	adds	r3, r2, r3
 8002760:	4a2f      	ldr	r2, [pc, #188]	@ (8002820 <main+0x1d8>)
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	189b      	adds	r3, r3, r2
 8002766:	4a2f      	ldr	r2, [pc, #188]	@ (8002824 <main+0x1dc>)
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	189b      	adds	r3, r3, r2
 800276c:	4a2e      	ldr	r2, [pc, #184]	@ (8002828 <main+0x1e0>)
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	4293      	cmp	r3, r2
 8002772:	d1ae      	bne.n	80026d2 <main+0x8a>
				  uint8_t nTemperature = (TCI * 10) + TCD;
 8002774:	4b2a      	ldr	r3, [pc, #168]	@ (8002820 <main+0x1d8>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	1c1a      	adds	r2, r3, #0
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	18db      	adds	r3, r3, r3
 8002780:	b2d9      	uxtb	r1, r3
 8002782:	4b28      	ldr	r3, [pc, #160]	@ (8002824 <main+0x1dc>)
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	204b      	movs	r0, #75	@ 0x4b
 8002788:	183b      	adds	r3, r7, r0
 800278a:	188a      	adds	r2, r1, r2
 800278c:	701a      	strb	r2, [r3, #0]
				  uint8_t nHumidity = (RHI * 10) + RHD;
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <main+0x1d0>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	1c1a      	adds	r2, r3, #0
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	18d3      	adds	r3, r2, r3
 8002798:	18db      	adds	r3, r3, r3
 800279a:	b2d9      	uxtb	r1, r3
 800279c:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <main+0x1d4>)
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	244a      	movs	r4, #74	@ 0x4a
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	188a      	adds	r2, r1, r2
 80027a6:	701a      	strb	r2, [r3, #0]

				  temperature = nTemperature;
 80027a8:	4b20      	ldr	r3, [pc, #128]	@ (800282c <main+0x1e4>)
 80027aa:	183a      	adds	r2, r7, r0
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	701a      	strb	r2, [r3, #0]
				  humidity = nHumidity;
 80027b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <main+0x1e8>)
 80027b2:	193a      	adds	r2, r7, r4
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]

				  uint8_t message[64];
				  int message_length = sprintf(message, "Temp:  %d c\r\nHumid: %d %%\r\n\r\n", (int)temperature, (int)humidity);
 80027b8:	4b1c      	ldr	r3, [pc, #112]	@ (800282c <main+0x1e4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	001a      	movs	r2, r3
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <main+0x1e8>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	491c      	ldr	r1, [pc, #112]	@ (8002834 <main+0x1ec>)
 80027c4:	1d38      	adds	r0, r7, #4
 80027c6:	f007 fa67 	bl	8009c98 <siprintf>
 80027ca:	0003      	movs	r3, r0
 80027cc:	647b      	str	r3, [r7, #68]	@ 0x44
				  HAL_UART_Transmit(&huart2, message, message_length, 100);
 80027ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	1d39      	adds	r1, r7, #4
 80027d4:	4806      	ldr	r0, [pc, #24]	@ (80027f0 <main+0x1a8>)
 80027d6:	2364      	movs	r3, #100	@ 0x64
 80027d8:	f005 f97e 	bl	8007ad8 <HAL_UART_Transmit>

				  HAL_GPIO_WritePin(DHT11_POWER_GPIO_Port, DHT11_POWER_Pin, 0);
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	015b      	lsls	r3, r3, #5
 80027e0:	480b      	ldr	r0, [pc, #44]	@ (8002810 <main+0x1c8>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	0019      	movs	r1, r3
 80027e6:	f002 fe90 	bl	800550a <HAL_GPIO_WritePin>
  {
 80027ea:	e772      	b.n	80026d2 <main+0x8a>
 80027ec:	2000031c 	.word	0x2000031c
 80027f0:	200001f0 	.word	0x200001f0
 80027f4:	200003ec 	.word	0x200003ec
 80027f8:	20000140 	.word	0x20000140
 80027fc:	20000410 	.word	0x20000410
 8002800:	20000284 	.word	0x20000284
 8002804:	200001a4 	.word	0x200001a4
 8002808:	200000dc 	.word	0x200000dc
 800280c:	0800a614 	.word	0x0800a614
 8002810:	50000800 	.word	0x50000800
 8002814:	2000040c 	.word	0x2000040c
 8002818:	200003ff 	.word	0x200003ff
 800281c:	20000400 	.word	0x20000400
 8002820:	20000401 	.word	0x20000401
 8002824:	20000402 	.word	0x20000402
 8002828:	20000403 	.word	0x20000403
 800282c:	200003fd 	.word	0x200003fd
 8002830:	200003fe 	.word	0x200003fe
 8002834:	0800a61c 	.word	0x0800a61c

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b093      	sub	sp, #76	@ 0x4c
 800283c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283e:	2410      	movs	r4, #16
 8002840:	193b      	adds	r3, r7, r4
 8002842:	0018      	movs	r0, r3
 8002844:	2338      	movs	r3, #56	@ 0x38
 8002846:	001a      	movs	r2, r3
 8002848:	2100      	movs	r1, #0
 800284a:	f007 fa45 	bl	8009cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800284e:	003b      	movs	r3, r7
 8002850:	0018      	movs	r0, r3
 8002852:	2310      	movs	r3, #16
 8002854:	001a      	movs	r2, r3
 8002856:	2100      	movs	r1, #0
 8002858:	f007 fa3e 	bl	8009cd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	0018      	movs	r0, r3
 8002862:	f002 fea3 	bl	80055ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002866:	193b      	adds	r3, r7, r4
 8002868:	2202      	movs	r2, #2
 800286a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800286c:	193b      	adds	r3, r7, r4
 800286e:	2280      	movs	r2, #128	@ 0x80
 8002870:	0052      	lsls	r2, r2, #1
 8002872:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002874:	0021      	movs	r1, r4
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2202      	movs	r2, #2
 8002886:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002888:	187b      	adds	r3, r7, r1
 800288a:	2202      	movs	r2, #2
 800288c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800288e:	187b      	adds	r3, r7, r1
 8002890:	2200      	movs	r2, #0
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002894:	187b      	adds	r3, r7, r1
 8002896:	2208      	movs	r2, #8
 8002898:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800289a:	187b      	adds	r3, r7, r1
 800289c:	22c0      	movs	r2, #192	@ 0xc0
 800289e:	02d2      	lsls	r2, r2, #11
 80028a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	22c0      	movs	r2, #192	@ 0xc0
 80028a6:	04d2      	lsls	r2, r2, #19
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2280      	movs	r2, #128	@ 0x80
 80028ae:	0592      	lsls	r2, r2, #22
 80028b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 fec5 	bl	8005644 <HAL_RCC_OscConfig>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80028be:	f000 feab 	bl	8003618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	003b      	movs	r3, r7
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c8:	003b      	movs	r3, r7
 80028ca:	2202      	movs	r2, #2
 80028cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ce:	003b      	movs	r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028d4:	003b      	movs	r3, r7
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028da:	003b      	movs	r3, r7
 80028dc:	2102      	movs	r1, #2
 80028de:	0018      	movs	r0, r3
 80028e0:	f003 f9ca 	bl	8005c78 <HAL_RCC_ClockConfig>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80028e8:	f000 fe96 	bl	8003618 <Error_Handler>
  }
}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b013      	add	sp, #76	@ 0x4c
 80028f2:	bd90      	pop	{r4, r7, pc}

080028f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	0018      	movs	r0, r3
 80028fe:	230c      	movs	r3, #12
 8002900:	001a      	movs	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f007 f9e8 	bl	8009cd8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002908:	4b2b      	ldr	r3, [pc, #172]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800290a:	4a2c      	ldr	r2, [pc, #176]	@ (80029bc <MX_ADC1_Init+0xc8>)
 800290c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800290e:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	05d2      	lsls	r2, r2, #23
 8002914:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002916:	4b28      	ldr	r3, [pc, #160]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800291c:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002922:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002928:	4b23      	ldr	r3, [pc, #140]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800292a:	2204      	movs	r2, #4
 800292c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800292e:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002930:	2200      	movs	r2, #0
 8002932:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002934:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002936:	2200      	movs	r2, #0
 8002938:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800293a:	4b1f      	ldr	r3, [pc, #124]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800293c:	2201      	movs	r2, #1
 800293e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002940:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002942:	2201      	movs	r2, #1
 8002944:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002948:	2200      	movs	r2, #0
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800294c:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002952:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002954:	222c      	movs	r2, #44	@ 0x2c
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800295a:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002960:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002966:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002968:	2200      	movs	r2, #0
 800296a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800296c:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800296e:	223c      	movs	r2, #60	@ 0x3c
 8002970:	2100      	movs	r1, #0
 8002972:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002974:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 8002976:	2200      	movs	r2, #0
 8002978:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800297a:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 800297c:	0018      	movs	r0, r3
 800297e:	f001 fae1 	bl	8003f44 <HAL_ADC_Init>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8002986:	f000 fe47 	bl	8003618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <MX_ADC1_Init+0xc4>)
 80029a0:	0011      	movs	r1, r2
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 fe00 	bl	80045a8 <HAL_ADC_ConfigChannel>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d001      	beq.n	80029b0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80029ac:	f000 fe34 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b004      	add	sp, #16
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200000dc 	.word	0x200000dc
 80029bc:	40012400 	.word	0x40012400

080029c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a30 <MX_SPI1_Init+0x70>)
 80029c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029d8:	22e0      	movs	r2, #224	@ 0xe0
 80029da:	00d2      	lsls	r2, r2, #3
 80029dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 8002a06:	2207      	movs	r2, #7
 8002a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a16:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <MX_SPI1_Init+0x6c>)
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f003 fc8f 	bl	800633c <HAL_SPI_Init>
 8002a1e:	1e03      	subs	r3, r0, #0
 8002a20:	d001      	beq.n	8002a26 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8002a22:	f000 fdf9 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000140 	.word	0x20000140
 8002a30:	40013000 	.word	0x40013000

08002a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	0018      	movs	r0, r3
 8002a40:	2310      	movs	r3, #16
 8002a42:	001a      	movs	r2, r3
 8002a44:	2100      	movs	r1, #0
 8002a46:	f007 f947 	bl	8009cd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	230c      	movs	r3, #12
 8002a50:	001a      	movs	r2, r3
 8002a52:	2100      	movs	r1, #0
 8002a54:	f007 f940 	bl	8009cd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a58:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a5a:	4a22      	ldr	r2, [pc, #136]	@ (8002ae4 <MX_TIM1_Init+0xb0>)
 8002a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8002a5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a60:	223f      	movs	r2, #63	@ 0x3f
 8002a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae8 <MX_TIM1_Init+0xb4>)
 8002a6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a82:	4b17      	ldr	r3, [pc, #92]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002a84:	0018      	movs	r0, r3
 8002a86:	f004 fcb6 	bl	80073f6 <HAL_TIM_Base_Init>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002a8e:	f000 fdc3 	bl	8003618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a92:	2110      	movs	r1, #16
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2280      	movs	r2, #128	@ 0x80
 8002a98:	0152      	lsls	r2, r2, #5
 8002a9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a9c:	187a      	adds	r2, r7, r1
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f004 fd54 	bl	8007550 <HAL_TIM_ConfigClockSource>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002aac:	f000 fdb4 	bl	8003618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ac2:	1d3a      	adds	r2, r7, #4
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <MX_TIM1_Init+0xac>)
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f004 ff41 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002ad2:	f000 fda1 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b008      	add	sp, #32
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	200001a4 	.word	0x200001a4
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	0000ffff 	.word	0x0000ffff

08002aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002af0:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002af2:	4a24      	ldr	r2, [pc, #144]	@ (8002b84 <MX_USART2_UART_Init+0x98>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002af6:	4b22      	ldr	r3, [pc, #136]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002af8:	22e1      	movs	r2, #225	@ 0xe1
 8002afa:	0252      	lsls	r2, r2, #9
 8002afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b12:	220c      	movs	r2, #12
 8002b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b22:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f004 ff78 	bl	8007a2c <HAL_UART_Init>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b40:	f000 fd6a 	bl	8003618 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b46:	2100      	movs	r1, #0
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f006 ffc5 	bl	8009ad8 <HAL_UARTEx_SetTxFifoThreshold>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b52:	f000 fd61 	bl	8003618 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b58:	2100      	movs	r1, #0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f006 fffc 	bl	8009b58 <HAL_UARTEx_SetRxFifoThreshold>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d001      	beq.n	8002b68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b64:	f000 fd58 	bl	8003618 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <MX_USART2_UART_Init+0x94>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f006 ff7a 	bl	8009a64 <HAL_UARTEx_DisableFifoMode>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d001      	beq.n	8002b78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b74:	f000 fd50 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	200001f0 	.word	0x200001f0
 8002b84:	40004400 	.word	0x40004400

08002b88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b8c:	4b16      	ldr	r3, [pc, #88]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002b8e:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <MX_USART3_UART_Init+0x64>)
 8002b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b92:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002b94:	2296      	movs	r2, #150	@ 0x96
 8002b96:	0192      	lsls	r2, r2, #6
 8002b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9a:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bac:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002bae:	220c      	movs	r2, #12
 8002bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <MX_USART3_UART_Init+0x60>)
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f004 ff2a 	bl	8007a2c <HAL_UART_Init>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d001      	beq.n	8002be0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bdc:	f000 fd1c 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	20000284 	.word	0x20000284
 8002bec:	40004800 	.word	0x40004800

08002bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b08b      	sub	sp, #44	@ 0x2c
 8002bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf6:	2414      	movs	r4, #20
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	2314      	movs	r3, #20
 8002bfe:	001a      	movs	r2, r3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f007 f869 	bl	8009cd8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c06:	4b58      	ldr	r3, [pc, #352]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c0a:	4b57      	ldr	r3, [pc, #348]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c12:	4b55      	ldr	r3, [pc, #340]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c16:	2204      	movs	r2, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1e:	4b52      	ldr	r3, [pc, #328]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c22:	4b51      	ldr	r3, [pc, #324]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c24:	2120      	movs	r1, #32
 8002c26:	430a      	orrs	r2, r1
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4013      	ands	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	4b4c      	ldr	r3, [pc, #304]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c42:	4b49      	ldr	r3, [pc, #292]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	4b46      	ldr	r3, [pc, #280]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c52:	4b45      	ldr	r3, [pc, #276]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c54:	2102      	movs	r1, #2
 8002c56:	430a      	orrs	r2, r1
 8002c58:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c5a:	4b43      	ldr	r3, [pc, #268]	@ (8002d68 <MX_GPIO_Init+0x178>)
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT11_POWER_Pin|RPI_FLAG_Pin, GPIO_PIN_RESET);
 8002c66:	2384      	movs	r3, #132	@ 0x84
 8002c68:	015b      	lsls	r3, r3, #5
 8002c6a:	4840      	ldr	r0, [pc, #256]	@ (8002d6c <MX_GPIO_Init+0x17c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	0019      	movs	r1, r3
 8002c70:	f002 fc4b 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|RELAY_5_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8002c74:	23a4      	movs	r3, #164	@ 0xa4
 8002c76:	00d9      	lsls	r1, r3, #3
 8002c78:	23a0      	movs	r3, #160	@ 0xa0
 8002c7a:	05db      	lsls	r3, r3, #23
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f002 fc43 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_4_Pin|RELAY_1_Pin|RELAY_3_Pin|RELAY_2_Pin, GPIO_PIN_RESET);
 8002c84:	493a      	ldr	r1, [pc, #232]	@ (8002d70 <MX_GPIO_Init+0x180>)
 8002c86:	4b3b      	ldr	r3, [pc, #236]	@ (8002d74 <MX_GPIO_Init+0x184>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f002 fc3d 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DHT11_POWER_Pin RPI_FLAG_Pin */
  GPIO_InitStruct.Pin = DHT11_POWER_Pin|RPI_FLAG_Pin;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2284      	movs	r2, #132	@ 0x84
 8002c94:	0152      	lsls	r2, r2, #5
 8002c96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	4a2f      	ldr	r2, [pc, #188]	@ (8002d6c <MX_GPIO_Init+0x17c>)
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f002 faa9 	bl	8005208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8002cb6:	0021      	movs	r1, r4
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	0192      	lsls	r2, r2, #6
 8002cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2284      	movs	r2, #132	@ 0x84
 8002cc4:	0392      	lsls	r2, r2, #14
 8002cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc8:	000c      	movs	r4, r1
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2201      	movs	r2, #1
 8002cce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	4a26      	ldr	r2, [pc, #152]	@ (8002d6c <MX_GPIO_Init+0x17c>)
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	f002 fa96 	bl	8005208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	2220      	movs	r2, #32
 8002ce0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	193a      	adds	r2, r7, r4
 8002cf6:	23a0      	movs	r3, #160	@ 0xa0
 8002cf8:	05db      	lsls	r3, r3, #23
 8002cfa:	0011      	movs	r1, r2
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f002 fa83 	bl	8005208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_4_Pin RELAY_1_Pin RELAY_3_Pin RELAY_2_Pin */
  GPIO_InitStruct.Pin = RELAY_4_Pin|RELAY_1_Pin|RELAY_3_Pin|RELAY_2_Pin;
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	4a1a      	ldr	r2, [pc, #104]	@ (8002d70 <MX_GPIO_Init+0x180>)
 8002d06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	4a15      	ldr	r2, [pc, #84]	@ (8002d74 <MX_GPIO_Init+0x184>)
 8002d1e:	0019      	movs	r1, r3
 8002d20:	0010      	movs	r0, r2
 8002d22:	f002 fa71 	bl	8005208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_5_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = RELAY_5_Pin|DHT11_Pin;
 8002d26:	0021      	movs	r1, r4
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	22a0      	movs	r2, #160	@ 0xa0
 8002d2c:	00d2      	lsls	r2, r2, #3
 8002d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2201      	movs	r2, #1
 8002d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2200      	movs	r2, #0
 8002d40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d42:	187a      	adds	r2, r7, r1
 8002d44:	23a0      	movs	r3, #160	@ 0xa0
 8002d46:	05db      	lsls	r3, r3, #23
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f002 fa5c 	bl	8005208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2102      	movs	r1, #2
 8002d54:	2007      	movs	r0, #7
 8002d56:	f002 f955 	bl	8005004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002d5a:	2007      	movs	r0, #7
 8002d5c:	f002 f967 	bl	800502e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b00b      	add	sp, #44	@ 0x2c
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	50000800 	.word	0x50000800
 8002d70:	00004038 	.word	0x00004038
 8002d74:	50000400 	.word	0x50000400

08002d78 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	0002      	movs	r2, r0
 8002d80:	1dbb      	adds	r3, r7, #6
 8002d82:	801a      	strh	r2, [r3, #0]
	uint32_t now = HAL_GetTick();
 8002d84:	f000 ff4c 	bl	8003c20 <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	60fb      	str	r3, [r7, #12]
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b004      	add	sp, #16
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <process_uart>:

void process_uart() {
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d96:	46ce      	mov	lr, r9
 8002d98:	4647      	mov	r7, r8
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b099      	sub	sp, #100	@ 0x64
 8002d9e:	af06      	add	r7, sp, #24
	strncpy(rx_buffer_old, rx_buffer, 100);
 8002da0:	496c      	ldr	r1, [pc, #432]	@ (8002f54 <process_uart+0x1c0>)
 8002da2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <process_uart+0x1c4>)
 8002da4:	2264      	movs	r2, #100	@ 0x64
 8002da6:	0018      	movs	r0, r3
 8002da8:	f006 ff9e 	bl	8009ce8 <strncpy>
	HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8002dac:	496b      	ldr	r1, [pc, #428]	@ (8002f5c <process_uart+0x1c8>)
 8002dae:	486c      	ldr	r0, [pc, #432]	@ (8002f60 <process_uart+0x1cc>)
 8002db0:	2364      	movs	r3, #100	@ 0x64
 8002db2:	2202      	movs	r2, #2
 8002db4:	f004 fe90 	bl	8007ad8 <HAL_UART_Transmit>

	if (!strcmp(rx_buffer, (uint8_t *)"?")) {
 8002db8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f64 <process_uart+0x1d0>)
 8002dba:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <process_uart+0x1c0>)
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7fd f9a0 	bl	8000104 <strcmp>
 8002dc4:	1e03      	subs	r3, r0, #0
 8002dc6:	d110      	bne.n	8002dea <process_uart+0x56>
		const char message[] = "led on, led off, error, spi, clear, ?";
 8002dc8:	003b      	movs	r3, r7
 8002dca:	4a67      	ldr	r2, [pc, #412]	@ (8002f68 <process_uart+0x1d4>)
 8002dcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dce:	c313      	stmia	r3!, {r0, r1, r4}
 8002dd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dd2:	c313      	stmia	r3!, {r0, r1, r4}
 8002dd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dd6:	c313      	stmia	r3!, {r0, r1, r4}
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)message, (int)strlen(message), 1000);
 8002ddc:	23fa      	movs	r3, #250	@ 0xfa
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	0039      	movs	r1, r7
 8002de2:	485f      	ldr	r0, [pc, #380]	@ (8002f60 <process_uart+0x1cc>)
 8002de4:	2225      	movs	r2, #37	@ 0x25
 8002de6:	f004 fe77 	bl	8007ad8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"led on")) {
 8002dea:	4a60      	ldr	r2, [pc, #384]	@ (8002f6c <process_uart+0x1d8>)
 8002dec:	4b59      	ldr	r3, [pc, #356]	@ (8002f54 <process_uart+0x1c0>)
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fd f987 	bl	8000104 <strcmp>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d10c      	bne.n	8002e14 <process_uart+0x80>
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 1);
 8002dfa:	23a0      	movs	r3, #160	@ 0xa0
 8002dfc:	05db      	lsls	r3, r3, #23
 8002dfe:	2201      	movs	r2, #1
 8002e00:	2120      	movs	r1, #32
 8002e02:	0018      	movs	r0, r3
 8002e04:	f002 fb81 	bl	800550a <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t *)"1", 1, 100);
 8002e08:	4959      	ldr	r1, [pc, #356]	@ (8002f70 <process_uart+0x1dc>)
 8002e0a:	4855      	ldr	r0, [pc, #340]	@ (8002f60 <process_uart+0x1cc>)
 8002e0c:	2364      	movs	r3, #100	@ 0x64
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f004 fe62 	bl	8007ad8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"led off")) {
 8002e14:	4a57      	ldr	r2, [pc, #348]	@ (8002f74 <process_uart+0x1e0>)
 8002e16:	4b4f      	ldr	r3, [pc, #316]	@ (8002f54 <process_uart+0x1c0>)
 8002e18:	0011      	movs	r1, r2
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7fd f972 	bl	8000104 <strcmp>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d10c      	bne.n	8002e3e <process_uart+0xaa>
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 0);
 8002e24:	23a0      	movs	r3, #160	@ 0xa0
 8002e26:	05db      	lsls	r3, r3, #23
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2120      	movs	r1, #32
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f002 fb6c 	bl	800550a <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t *)"1", 1, 100);
 8002e32:	494f      	ldr	r1, [pc, #316]	@ (8002f70 <process_uart+0x1dc>)
 8002e34:	484a      	ldr	r0, [pc, #296]	@ (8002f60 <process_uart+0x1cc>)
 8002e36:	2364      	movs	r3, #100	@ 0x64
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f004 fe4d 	bl	8007ad8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"error")) {
 8002e3e:	4a4e      	ldr	r2, [pc, #312]	@ (8002f78 <process_uart+0x1e4>)
 8002e40:	4b44      	ldr	r3, [pc, #272]	@ (8002f54 <process_uart+0x1c0>)
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fd f95d 	bl	8000104 <strcmp>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d111      	bne.n	8002e72 <process_uart+0xde>
		HAL_UART_Transmit(&huart2, debug_message, strlen(debug_message), 1000);
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f7c <process_uart+0x1e8>)
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7fd f961 	bl	8000118 <strlen>
 8002e56:	0003      	movs	r3, r0
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	23fa      	movs	r3, #250	@ 0xfa
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4947      	ldr	r1, [pc, #284]	@ (8002f7c <process_uart+0x1e8>)
 8002e60:	483f      	ldr	r0, [pc, #252]	@ (8002f60 <process_uart+0x1cc>)
 8002e62:	f004 fe39 	bl	8007ad8 <HAL_UART_Transmit>
		strncpy(debug_message, (uint8_t *)"none", 100);
 8002e66:	4946      	ldr	r1, [pc, #280]	@ (8002f80 <process_uart+0x1ec>)
 8002e68:	4b44      	ldr	r3, [pc, #272]	@ (8002f7c <process_uart+0x1e8>)
 8002e6a:	2264      	movs	r2, #100	@ 0x64
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f006 ff3b 	bl	8009ce8 <strncpy>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"spi")) {
 8002e72:	4a44      	ldr	r2, [pc, #272]	@ (8002f84 <process_uart+0x1f0>)
 8002e74:	4b37      	ldr	r3, [pc, #220]	@ (8002f54 <process_uart+0x1c0>)
 8002e76:	0011      	movs	r1, r2
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7fd f943 	bl	8000104 <strcmp>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d12d      	bne.n	8002ede <process_uart+0x14a>
		uint8_t message[64];
		int message_length = sprintf(message, "0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x", (int)spi_data[0], (int)spi_data[1], (int)spi_data[2], (int)spi_data[3], (int)spi_data[4], (int)spi_data[5], (int)spi_data[6], (int)spi_data[7]);
 8002e82:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <process_uart+0x1f4>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4698      	mov	r8, r3
 8002e88:	4b3f      	ldr	r3, [pc, #252]	@ (8002f88 <process_uart+0x1f4>)
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	4699      	mov	r9, r3
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <process_uart+0x1f4>)
 8002e90:	789b      	ldrb	r3, [r3, #2]
 8002e92:	001a      	movs	r2, r3
 8002e94:	4b3c      	ldr	r3, [pc, #240]	@ (8002f88 <process_uart+0x1f4>)
 8002e96:	78db      	ldrb	r3, [r3, #3]
 8002e98:	001c      	movs	r4, r3
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f88 <process_uart+0x1f4>)
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	001d      	movs	r5, r3
 8002ea0:	4b39      	ldr	r3, [pc, #228]	@ (8002f88 <process_uart+0x1f4>)
 8002ea2:	795b      	ldrb	r3, [r3, #5]
 8002ea4:	001e      	movs	r6, r3
 8002ea6:	4b38      	ldr	r3, [pc, #224]	@ (8002f88 <process_uart+0x1f4>)
 8002ea8:	799b      	ldrb	r3, [r3, #6]
 8002eaa:	469c      	mov	ip, r3
 8002eac:	4b36      	ldr	r3, [pc, #216]	@ (8002f88 <process_uart+0x1f4>)
 8002eae:	79db      	ldrb	r3, [r3, #7]
 8002eb0:	4936      	ldr	r1, [pc, #216]	@ (8002f8c <process_uart+0x1f8>)
 8002eb2:	0038      	movs	r0, r7
 8002eb4:	9305      	str	r3, [sp, #20]
 8002eb6:	4663      	mov	r3, ip
 8002eb8:	9304      	str	r3, [sp, #16]
 8002eba:	9603      	str	r6, [sp, #12]
 8002ebc:	9502      	str	r5, [sp, #8]
 8002ebe:	9401      	str	r4, [sp, #4]
 8002ec0:	9200      	str	r2, [sp, #0]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	f006 fee7 	bl	8009c98 <siprintf>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	647b      	str	r3, [r7, #68]	@ 0x44
		HAL_UART_Transmit(&huart2, message, message_length, 1000);
 8002ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	23fa      	movs	r3, #250	@ 0xfa
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	0039      	movs	r1, r7
 8002ed8:	4821      	ldr	r0, [pc, #132]	@ (8002f60 <process_uart+0x1cc>)
 8002eda:	f004 fdfd 	bl	8007ad8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"pms")) {
 8002ede:	4a2c      	ldr	r2, [pc, #176]	@ (8002f90 <process_uart+0x1fc>)
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <process_uart+0x1c0>)
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fd f90d 	bl	8000104 <strcmp>
 8002eea:	1e03      	subs	r3, r0, #0
 8002eec:	d117      	bne.n	8002f1e <process_uart+0x18a>
		Read_PMS7003(&pm1_0, &pm2_5, &pm10);
 8002eee:	4a29      	ldr	r2, [pc, #164]	@ (8002f94 <process_uart+0x200>)
 8002ef0:	4929      	ldr	r1, [pc, #164]	@ (8002f98 <process_uart+0x204>)
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f9c <process_uart+0x208>)
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff fb6b 	bl	80025d0 <Read_PMS7003>

		uint8_t message[64];
		int message_length = sprintf(message, "PM2.5:  %d ppm\r\PM10:  %d ppm\r\n\r\n", (int)pm2_5, (int)pm10);
 8002efa:	4b27      	ldr	r3, [pc, #156]	@ (8002f98 <process_uart+0x204>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	001a      	movs	r2, r3
 8002f00:	4b24      	ldr	r3, [pc, #144]	@ (8002f94 <process_uart+0x200>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	4926      	ldr	r1, [pc, #152]	@ (8002fa0 <process_uart+0x20c>)
 8002f06:	0038      	movs	r0, r7
 8002f08:	f006 fec6 	bl	8009c98 <siprintf>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	643b      	str	r3, [r7, #64]	@ 0x40
		HAL_UART_Transmit(&huart2, message, message_length, 100);
 8002f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	0039      	movs	r1, r7
 8002f16:	4812      	ldr	r0, [pc, #72]	@ (8002f60 <process_uart+0x1cc>)
 8002f18:	2364      	movs	r3, #100	@ 0x64
 8002f1a:	f004 fddd 	bl	8007ad8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, "clear")) {
 8002f1e:	4a21      	ldr	r2, [pc, #132]	@ (8002fa4 <process_uart+0x210>)
 8002f20:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <process_uart+0x1c0>)
 8002f22:	0011      	movs	r1, r2
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fd f8ed 	bl	8000104 <strcmp>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d105      	bne.n	8002f3a <process_uart+0x1a6>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\033[2J\033[0;0H", (int)strlen("\033[2J\033[0;0H"), 100);
 8002f2e:	491e      	ldr	r1, [pc, #120]	@ (8002fa8 <process_uart+0x214>)
 8002f30:	480b      	ldr	r0, [pc, #44]	@ (8002f60 <process_uart+0x1cc>)
 8002f32:	2364      	movs	r3, #100	@ 0x64
 8002f34:	220a      	movs	r2, #10
 8002f36:	f004 fdcf 	bl	8007ad8 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 100);
 8002f3a:	4908      	ldr	r1, [pc, #32]	@ (8002f5c <process_uart+0x1c8>)
 8002f3c:	4808      	ldr	r0, [pc, #32]	@ (8002f60 <process_uart+0x1cc>)
 8002f3e:	2364      	movs	r3, #100	@ 0x64
 8002f40:	2202      	movs	r2, #2
 8002f42:	f004 fdc9 	bl	8007ad8 <HAL_UART_Transmit>
}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b013      	add	sp, #76	@ 0x4c
 8002f4c:	bcc0      	pop	{r6, r7}
 8002f4e:	46b9      	mov	r9, r7
 8002f50:	46b0      	mov	r8, r6
 8002f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f54:	20000320 	.word	0x20000320
 8002f58:	20000384 	.word	0x20000384
 8002f5c:	0800a63c 	.word	0x0800a63c
 8002f60:	200001f0 	.word	0x200001f0
 8002f64:	0800a640 	.word	0x0800a640
 8002f68:	0800a6d8 	.word	0x0800a6d8
 8002f6c:	0800a644 	.word	0x0800a644
 8002f70:	0800a64c 	.word	0x0800a64c
 8002f74:	0800a650 	.word	0x0800a650
 8002f78:	0800a658 	.word	0x0800a658
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	0800a660 	.word	0x0800a660
 8002f84:	0800a668 	.word	0x0800a668
 8002f88:	200003ec 	.word	0x200003ec
 8002f8c:	0800a66c 	.word	0x0800a66c
 8002f90:	0800a69c 	.word	0x0800a69c
 8002f94:	20000436 	.word	0x20000436
 8002f98:	20000434 	.word	0x20000434
 8002f9c:	20000432 	.word	0x20000432
 8002fa0:	0800a6a0 	.word	0x0800a6a0
 8002fa4:	0800a6c4 	.word	0x0800a6c4
 8002fa8:	0800a6cc 	.word	0x0800a6cc

08002fac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	b096      	sub	sp, #88	@ 0x58
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	if (huart->Instance == USART3) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80030f0 <HAL_UART_RxCpltCallback+0x144>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d127      	bne.n	800300e <HAL_UART_RxCpltCallback+0x62>
		if (pms_buffer[0] == 0x42) {
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80030f4 <HAL_UART_RxCpltCallback+0x148>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b42      	cmp	r3, #66	@ 0x42
 8002fc4:	d105      	bne.n	8002fd2 <HAL_UART_RxCpltCallback+0x26>
			Read_PMS7003(&pm1_0, &pm2_5, &pm10);
 8002fc6:	4a4c      	ldr	r2, [pc, #304]	@ (80030f8 <HAL_UART_RxCpltCallback+0x14c>)
 8002fc8:	494c      	ldr	r1, [pc, #304]	@ (80030fc <HAL_UART_RxCpltCallback+0x150>)
 8002fca:	4b4d      	ldr	r3, [pc, #308]	@ (8003100 <HAL_UART_RxCpltCallback+0x154>)
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff faff 	bl	80025d0 <Read_PMS7003>
		}

		HAL_UART_Receive_IT(&huart3, pms_buffer, 32);
 8002fd2:	4948      	ldr	r1, [pc, #288]	@ (80030f4 <HAL_UART_RxCpltCallback+0x148>)
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003104 <HAL_UART_RxCpltCallback+0x158>)
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f004 fe21 	bl	8007c20 <HAL_UART_Receive_IT>
		uint8_t message[64];
		int message_length = sprintf(message, "PM1.0: %d ug/m2\r\nPM2.5: %d ug/m2\r\nPM10:  %d ug/m2\r\n\r\n", (int)pm1_0, (int)pm2_5, (int)pm10);
 8002fde:	4b48      	ldr	r3, [pc, #288]	@ (8003100 <HAL_UART_RxCpltCallback+0x154>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	4b45      	ldr	r3, [pc, #276]	@ (80030fc <HAL_UART_RxCpltCallback+0x150>)
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	001c      	movs	r4, r3
 8002fea:	4b43      	ldr	r3, [pc, #268]	@ (80030f8 <HAL_UART_RxCpltCallback+0x14c>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	4946      	ldr	r1, [pc, #280]	@ (8003108 <HAL_UART_RxCpltCallback+0x15c>)
 8002ff0:	2508      	movs	r5, #8
 8002ff2:	1978      	adds	r0, r7, r5
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	0023      	movs	r3, r4
 8002ff8:	f006 fe4e 	bl	8009c98 <siprintf>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
		HAL_UART_Transmit(&huart2, message, message_length, 100);
 8003000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003002:	b29a      	uxth	r2, r3
 8003004:	1979      	adds	r1, r7, r5
 8003006:	4841      	ldr	r0, [pc, #260]	@ (800310c <HAL_UART_RxCpltCallback+0x160>)
 8003008:	2364      	movs	r3, #100	@ 0x64
 800300a:	f004 fd65 	bl	8007ad8 <HAL_UART_Transmit>
	}

	if (huart->Instance == USART2) {
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3f      	ldr	r2, [pc, #252]	@ (8003110 <HAL_UART_RxCpltCallback+0x164>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d167      	bne.n	80030e8 <HAL_UART_RxCpltCallback+0x13c>
		uint8_t i;
		if (rx_indx == 0) {
 8003018:	4b3e      	ldr	r3, [pc, #248]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d114      	bne.n	800304a <HAL_UART_RxCpltCallback+0x9e>
			for (i = 0; i < 100; i++) {
 8003020:	234f      	movs	r3, #79	@ 0x4f
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e00a      	b.n	8003040 <HAL_UART_RxCpltCallback+0x94>
				rx_buffer[i] = 0;
 800302a:	204f      	movs	r0, #79	@ 0x4f
 800302c:	183b      	adds	r3, r7, r0
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4a39      	ldr	r2, [pc, #228]	@ (8003118 <HAL_UART_RxCpltCallback+0x16c>)
 8003032:	2100      	movs	r1, #0
 8003034:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < 100; i++) {
 8003036:	183b      	adds	r3, r7, r0
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	183b      	adds	r3, r7, r0
 800303c:	3201      	adds	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	234f      	movs	r3, #79	@ 0x4f
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b63      	cmp	r3, #99	@ 0x63
 8003048:	d9ef      	bls.n	800302a <HAL_UART_RxCpltCallback+0x7e>
			}
		}
		if (rx_data[0] == 8) {
 800304a:	4b34      	ldr	r3, [pc, #208]	@ (800311c <HAL_UART_RxCpltCallback+0x170>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d110      	bne.n	8003074 <HAL_UART_RxCpltCallback+0xc8>
			if (rx_indx > 0) {
 8003052:	4b30      	ldr	r3, [pc, #192]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d035      	beq.n	80030c6 <HAL_UART_RxCpltCallback+0x11a>
				rx_buffer[--rx_indx] = 0;
 800305a:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3b01      	subs	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b2c      	ldr	r3, [pc, #176]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	4b2b      	ldr	r3, [pc, #172]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	001a      	movs	r2, r3
 800306c:	4b2a      	ldr	r3, [pc, #168]	@ (8003118 <HAL_UART_RxCpltCallback+0x16c>)
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	e028      	b.n	80030c6 <HAL_UART_RxCpltCallback+0x11a>
			}
		} else if (rx_data[0] == 13 && rx_indx == 0) {
 8003074:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_UART_RxCpltCallback+0x170>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b0d      	cmp	r3, #13
 800307a:	d10c      	bne.n	8003096 <HAL_UART_RxCpltCallback+0xea>
 800307c:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <HAL_UART_RxCpltCallback+0xea>
			strncpy(rx_buffer, rx_buffer_old, 100);
 8003084:	4926      	ldr	r1, [pc, #152]	@ (8003120 <HAL_UART_RxCpltCallback+0x174>)
 8003086:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <HAL_UART_RxCpltCallback+0x16c>)
 8003088:	2264      	movs	r2, #100	@ 0x64
 800308a:	0018      	movs	r0, r3
 800308c:	f006 fe2c 	bl	8009ce8 <strncpy>
			process_uart();
 8003090:	f7ff fe80 	bl	8002d94 <process_uart>
 8003094:	e017      	b.n	80030c6 <HAL_UART_RxCpltCallback+0x11a>
		} else if (rx_data[0] != 13) {
 8003096:	4b21      	ldr	r3, [pc, #132]	@ (800311c <HAL_UART_RxCpltCallback+0x170>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b0d      	cmp	r3, #13
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_RxCpltCallback+0x10a>
			rx_buffer[rx_indx++] = rx_data[0];
 800309e:	4b1d      	ldr	r3, [pc, #116]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	b2d1      	uxtb	r1, r2
 80030a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 80030a8:	7011      	strb	r1, [r2, #0]
 80030aa:	001a      	movs	r2, r3
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_UART_RxCpltCallback+0x170>)
 80030ae:	7819      	ldrb	r1, [r3, #0]
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_UART_RxCpltCallback+0x16c>)
 80030b2:	5499      	strb	r1, [r3, r2]
 80030b4:	e007      	b.n	80030c6 <HAL_UART_RxCpltCallback+0x11a>
		} else {
			rx_indx = 0;
 80030b6:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <HAL_UART_RxCpltCallback+0x168>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
			transfer_cplt = 1;
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HAL_UART_RxCpltCallback+0x178>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
			process_uart();
 80030c2:	f7ff fe67 	bl	8002d94 <process_uart>
		}

		HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80030c6:	4915      	ldr	r1, [pc, #84]	@ (800311c <HAL_UART_RxCpltCallback+0x170>)
 80030c8:	4b10      	ldr	r3, [pc, #64]	@ (800310c <HAL_UART_RxCpltCallback+0x160>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	0018      	movs	r0, r3
 80030ce:	f004 fda7 	bl	8007c20 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, rx_data, strlen(rx_data), 100);
 80030d2:	4b12      	ldr	r3, [pc, #72]	@ (800311c <HAL_UART_RxCpltCallback+0x170>)
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fd f81f 	bl	8000118 <strlen>
 80030da:	0003      	movs	r3, r0
 80030dc:	b29a      	uxth	r2, r3
 80030de:	490f      	ldr	r1, [pc, #60]	@ (800311c <HAL_UART_RxCpltCallback+0x170>)
 80030e0:	480a      	ldr	r0, [pc, #40]	@ (800310c <HAL_UART_RxCpltCallback+0x160>)
 80030e2:	2364      	movs	r3, #100	@ 0x64
 80030e4:	f004 fcf8 	bl	8007ad8 <HAL_UART_Transmit>
	}
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b014      	add	sp, #80	@ 0x50
 80030ee:	bdb0      	pop	{r4, r5, r7, pc}
 80030f0:	40004800 	.word	0x40004800
 80030f4:	20000410 	.word	0x20000410
 80030f8:	20000436 	.word	0x20000436
 80030fc:	20000434 	.word	0x20000434
 8003100:	20000432 	.word	0x20000432
 8003104:	20000284 	.word	0x20000284
 8003108:	0800a700 	.word	0x0800a700
 800310c:	200001f0 	.word	0x200001f0
 8003110:	40004400 	.word	0x40004400
 8003114:	20000318 	.word	0x20000318
 8003118:	20000320 	.word	0x20000320
 800311c:	2000031c 	.word	0x2000031c
 8003120:	20000384 	.word	0x20000384
 8003124:	200003e8 	.word	0x200003e8

08003128 <crc16_modbus>:

uint16_t crc16_modbus(uint8_t *data, uint16_t length) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	000a      	movs	r2, r1
 8003132:	1cbb      	adds	r3, r7, #2
 8003134:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8003136:	230e      	movs	r3, #14
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2201      	movs	r2, #1
 800313c:	4252      	negs	r2, r2
 800313e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < length; i++) {
 8003140:	230c      	movs	r3, #12
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2200      	movs	r2, #0
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	e037      	b.n	80031ba <crc16_modbus+0x92>
        crc ^= data[i];  // XOR byte into least sig. byte of crc
 800314a:	230c      	movs	r3, #12
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	18d3      	adds	r3, r2, r3
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	0019      	movs	r1, r3
 8003158:	220e      	movs	r2, #14
 800315a:	18bb      	adds	r3, r7, r2
 800315c:	18ba      	adds	r2, r7, r2
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	404a      	eors	r2, r1
 8003162:	801a      	strh	r2, [r3, #0]

        for (uint8_t j = 0; j < 8; j++) {
 8003164:	230b      	movs	r3, #11
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e01a      	b.n	80031a4 <crc16_modbus+0x7c>
            if (crc & 0x0001) {  // If LSB is set
 800316e:	210e      	movs	r1, #14
 8003170:	187b      	adds	r3, r7, r1
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	4013      	ands	r3, r2
 8003178:	d008      	beq.n	800318c <crc16_modbus+0x64>
                crc = (crc >> 1) ^ 0xA001;  // Shift right and XOR with polynomial
 800317a:	187b      	adds	r3, r7, r1
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	187b      	adds	r3, r7, r1
 8003184:	4914      	ldr	r1, [pc, #80]	@ (80031d8 <crc16_modbus+0xb0>)
 8003186:	404a      	eors	r2, r1
 8003188:	801a      	strh	r2, [r3, #0]
 800318a:	e005      	b.n	8003198 <crc16_modbus+0x70>
            } else {
                crc >>= 1;  // Just shift right
 800318c:	220e      	movs	r2, #14
 800318e:	18bb      	adds	r3, r7, r2
 8003190:	18ba      	adds	r2, r7, r2
 8003192:	8812      	ldrh	r2, [r2, #0]
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8003198:	210b      	movs	r1, #11
 800319a:	187b      	adds	r3, r7, r1
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	3201      	adds	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	230b      	movs	r3, #11
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b07      	cmp	r3, #7
 80031ac:	d9df      	bls.n	800316e <crc16_modbus+0x46>
    for (uint16_t i = 0; i < length; i++) {
 80031ae:	210c      	movs	r1, #12
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	3201      	adds	r2, #1
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	230c      	movs	r3, #12
 80031bc:	18fa      	adds	r2, r7, r3
 80031be:	1cbb      	adds	r3, r7, #2
 80031c0:	8812      	ldrh	r2, [r2, #0]
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d3c0      	bcc.n	800314a <crc16_modbus+0x22>
            }
        }
    }

    return crc;  // Return the CRC16 result
 80031c8:	230e      	movs	r3, #14
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	881b      	ldrh	r3, [r3, #0]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	ffffa001 	.word	0xffffa001

080031dc <validate_crc16_modbus>:

int validate_crc16_modbus(uint8_t *data, uint16_t length) {
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	000a      	movs	r2, r1
 80031e6:	1cbb      	adds	r3, r7, #2
 80031e8:	801a      	strh	r2, [r3, #0]
    if (length != 8) {
 80031ea:	1cbb      	adds	r3, r7, #2
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d001      	beq.n	80031f6 <validate_crc16_modbus+0x1a>
        return 0;  // Only works for 8-byte packets (6 bytes data + 2 bytes CRC)
 80031f2:	2300      	movs	r3, #0
 80031f4:	e028      	b.n	8003248 <validate_crc16_modbus+0x6c>
    }

    // Last two bytes in the data array are the received CRC (MSB first)
    uint16_t received_crc = (data[length - 2] << 8) | data[length - 1];  // Combine MSB and LSB
 80031f6:	1cbb      	adds	r3, r7, #2
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3b02      	subs	r3, #2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	18d3      	adds	r3, r2, r3
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	b21a      	sxth	r2, r3
 8003206:	1cbb      	adds	r3, r7, #2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	3b01      	subs	r3, #1
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	18cb      	adds	r3, r1, r3
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b21b      	sxth	r3, r3
 8003214:	4313      	orrs	r3, r2
 8003216:	b21a      	sxth	r2, r3
 8003218:	250e      	movs	r5, #14
 800321a:	197b      	adds	r3, r7, r5
 800321c:	801a      	strh	r2, [r3, #0]

    // Calculate the CRC on the first 6 bytes of data
    uint16_t calculated_crc = crc16_modbus(data, length - 2);
 800321e:	1cbb      	adds	r3, r7, #2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	3b02      	subs	r3, #2
 8003224:	b29a      	uxth	r2, r3
 8003226:	260c      	movs	r6, #12
 8003228:	19bc      	adds	r4, r7, r6
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0011      	movs	r1, r2
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff ff7a 	bl	8003128 <crc16_modbus>
 8003234:	0003      	movs	r3, r0
 8003236:	8023      	strh	r3, [r4, #0]

    // Compare calculated CRC with received CRC
    return (calculated_crc == received_crc);
 8003238:	19ba      	adds	r2, r7, r6
 800323a:	197b      	adds	r3, r7, r5
 800323c:	8812      	ldrh	r2, [r2, #0]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	425a      	negs	r2, r3
 8003244:	4153      	adcs	r3, r2
 8003246:	b2db      	uxtb	r3, r3
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b005      	add	sp, #20
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003250 <spi_transmit>:

void spi_transmit(SPI_HandleTypeDef *hspi) {
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    uint16_t crc = crc16_modbus(spi_response, 6);  // Calculate CRC for the first 6 bytes
 8003258:	250e      	movs	r5, #14
 800325a:	197c      	adds	r4, r7, r5
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <spi_transmit+0x48>)
 800325e:	2106      	movs	r1, #6
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff ff61 	bl	8003128 <crc16_modbus>
 8003266:	0003      	movs	r3, r0
 8003268:	8023      	strh	r3, [r4, #0]
    spi_response[6] = (crc >> 8) & 0xFF;  // CRC MSB
 800326a:	0029      	movs	r1, r5
 800326c:	187b      	adds	r3, r7, r1
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	b29b      	uxth	r3, r3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <spi_transmit+0x48>)
 8003278:	719a      	strb	r2, [r3, #6]
    spi_response[7] = crc & 0xFF;         // CRC LSB
 800327a:	187b      	adds	r3, r7, r1
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <spi_transmit+0x48>)
 8003282:	71da      	strb	r2, [r3, #7]

    HAL_SPI_Transmit(hspi, spi_response, 8, 100);
 8003284:	4904      	ldr	r1, [pc, #16]	@ (8003298 <spi_transmit+0x48>)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	2364      	movs	r3, #100	@ 0x64
 800328a:	2208      	movs	r2, #8
 800328c:	f003 f90e 	bl	80064ac <HAL_SPI_Transmit>
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b004      	add	sp, #16
 8003296:	bdb0      	pop	{r4, r5, r7, pc}
 8003298:	200003f4 	.word	0x200003f4

0800329c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 800329c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329e:	46ce      	mov	lr, r9
 80032a0:	4647      	mov	r7, r8
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b09f      	sub	sp, #124	@ 0x7c
 80032a6:	af06      	add	r7, sp, #24
 80032a8:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4bc4      	ldr	r3, [pc, #784]	@ (80035c0 <HAL_SPI_RxCpltCallback+0x324>)
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d000      	beq.n	80032b4 <HAL_SPI_RxCpltCallback+0x18>
 80032b2:	e17e      	b.n	80035b2 <HAL_SPI_RxCpltCallback+0x316>
		uint8_t message[64];
		int message_length = sprintf(message, "0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x\n", (int)spi_data[0], (int)spi_data[1], (int)spi_data[2], (int)spi_data[3], (int)spi_data[4], (int)spi_data[5], (int)spi_data[6], (int)spi_data[7]);
 80032b4:	4bc3      	ldr	r3, [pc, #780]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4698      	mov	r8, r3
 80032ba:	4bc2      	ldr	r3, [pc, #776]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	4699      	mov	r9, r3
 80032c0:	4bc0      	ldr	r3, [pc, #768]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032c2:	789b      	ldrb	r3, [r3, #2]
 80032c4:	001a      	movs	r2, r3
 80032c6:	4bbf      	ldr	r3, [pc, #764]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	001c      	movs	r4, r3
 80032cc:	4bbd      	ldr	r3, [pc, #756]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032ce:	791b      	ldrb	r3, [r3, #4]
 80032d0:	001d      	movs	r5, r3
 80032d2:	4bbc      	ldr	r3, [pc, #752]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032d4:	795b      	ldrb	r3, [r3, #5]
 80032d6:	001e      	movs	r6, r3
 80032d8:	4bba      	ldr	r3, [pc, #744]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032da:	799b      	ldrb	r3, [r3, #6]
 80032dc:	469c      	mov	ip, r3
 80032de:	4bb9      	ldr	r3, [pc, #740]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80032e0:	79db      	ldrb	r3, [r3, #7]
 80032e2:	49b9      	ldr	r1, [pc, #740]	@ (80035c8 <HAL_SPI_RxCpltCallback+0x32c>)
 80032e4:	200c      	movs	r0, #12
 80032e6:	1838      	adds	r0, r7, r0
 80032e8:	9305      	str	r3, [sp, #20]
 80032ea:	4663      	mov	r3, ip
 80032ec:	9304      	str	r3, [sp, #16]
 80032ee:	9603      	str	r6, [sp, #12]
 80032f0:	9502      	str	r5, [sp, #8]
 80032f2:	9401      	str	r4, [sp, #4]
 80032f4:	9200      	str	r2, [sp, #0]
 80032f6:	464b      	mov	r3, r9
 80032f8:	4642      	mov	r2, r8
 80032fa:	f006 fccd 	bl	8009c98 <siprintf>
 80032fe:	0003      	movs	r3, r0
 8003300:	65fb      	str	r3, [r7, #92]	@ 0x5c
		HAL_UART_Transmit(&huart2, message, message_length, 100);
 8003302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003304:	b29a      	uxth	r2, r3
 8003306:	200c      	movs	r0, #12
 8003308:	1839      	adds	r1, r7, r0
 800330a:	48b0      	ldr	r0, [pc, #704]	@ (80035cc <HAL_SPI_RxCpltCallback+0x330>)
 800330c:	2364      	movs	r3, #100	@ 0x64
 800330e:	f004 fbe3 	bl	8007ad8 <HAL_UART_Transmit>

		int checksum = validate_crc16_modbus(spi_data, 8);
 8003312:	4bac      	ldr	r3, [pc, #688]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 8003314:	2108      	movs	r1, #8
 8003316:	0018      	movs	r0, r3
 8003318:	f7ff ff60 	bl	80031dc <validate_crc16_modbus>
 800331c:	0003      	movs	r3, r0
 800331e:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (!checksum) {
 8003320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003322:	2b00      	cmp	r3, #0
 8003324:	d111      	bne.n	800334a <HAL_SPI_RxCpltCallback+0xae>
			strncpy(debug_message, "SPI CRC Error", 100);
 8003326:	49aa      	ldr	r1, [pc, #680]	@ (80035d0 <HAL_SPI_RxCpltCallback+0x334>)
 8003328:	4baa      	ldr	r3, [pc, #680]	@ (80035d4 <HAL_SPI_RxCpltCallback+0x338>)
 800332a:	2264      	movs	r2, #100	@ 0x64
 800332c:	0018      	movs	r0, r3
 800332e:	f006 fcdb 	bl	8009ce8 <strncpy>
			spi_fail_count += 1;
 8003332:	4ba9      	ldr	r3, [pc, #676]	@ (80035d8 <HAL_SPI_RxCpltCallback+0x33c>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4ba7      	ldr	r3, [pc, #668]	@ (80035d8 <HAL_SPI_RxCpltCallback+0x33c>)
 800333c:	701a      	strb	r2, [r3, #0]

			if (spi_fail_count >= 5) {
 800333e:	4ba6      	ldr	r3, [pc, #664]	@ (80035d8 <HAL_SPI_RxCpltCallback+0x33c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b04      	cmp	r3, #4
 8003344:	d901      	bls.n	800334a <HAL_SPI_RxCpltCallback+0xae>
				HAL_NVIC_SystemReset();
 8003346:	f001 fe82 	bl	800504e <HAL_NVIC_SystemReset>
			}
		}

		spi_fail_count = 0;
 800334a:	4ba3      	ldr	r3, [pc, #652]	@ (80035d8 <HAL_SPI_RxCpltCallback+0x33c>)
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]

		spi_response[0] = 0;
 8003350:	4ba2      	ldr	r3, [pc, #648]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		spi_response[1] = 0;
 8003356:	4ba1      	ldr	r3, [pc, #644]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 8003358:	2200      	movs	r2, #0
 800335a:	705a      	strb	r2, [r3, #1]
		spi_response[2] = 0;
 800335c:	4b9f      	ldr	r3, [pc, #636]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800335e:	2200      	movs	r2, #0
 8003360:	709a      	strb	r2, [r3, #2]
		spi_response[3] = 0;
 8003362:	4b9e      	ldr	r3, [pc, #632]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 8003364:	2200      	movs	r2, #0
 8003366:	70da      	strb	r2, [r3, #3]
		spi_response[4] = 0;
 8003368:	4b9c      	ldr	r3, [pc, #624]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800336a:	2200      	movs	r2, #0
 800336c:	711a      	strb	r2, [r3, #4]
		spi_response[5] = 0;
 800336e:	4b9b      	ldr	r3, [pc, #620]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 8003370:	2200      	movs	r2, #0
 8003372:	715a      	strb	r2, [r3, #5]

		if (spi_data[0] == 1 &&
 8003374:	4b93      	ldr	r3, [pc, #588]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d117      	bne.n	80033ac <HAL_SPI_RxCpltCallback+0x110>
			spi_data[1] == 1 &&
 800337c:	4b91      	ldr	r3, [pc, #580]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 800337e:	785b      	ldrb	r3, [r3, #1]
		if (spi_data[0] == 1 &&
 8003380:	2b01      	cmp	r3, #1
 8003382:	d113      	bne.n	80033ac <HAL_SPI_RxCpltCallback+0x110>
			spi_data[2] == 1) {
 8003384:	4b8f      	ldr	r3, [pc, #572]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 8003386:	789b      	ldrb	r3, [r3, #2]
			spi_data[1] == 1 &&
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10f      	bne.n	80033ac <HAL_SPI_RxCpltCallback+0x110>

			HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 1);
 800338c:	23a0      	movs	r3, #160	@ 0xa0
 800338e:	05db      	lsls	r3, r3, #23
 8003390:	2201      	movs	r2, #1
 8003392:	2120      	movs	r1, #32
 8003394:	0018      	movs	r0, r3
 8003396:	f002 f8b8 	bl	800550a <HAL_GPIO_WritePin>
			spi_transmit(&hspi1);
 800339a:	4b89      	ldr	r3, [pc, #548]	@ (80035c0 <HAL_SPI_RxCpltCallback+0x324>)
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff ff57 	bl	8003250 <spi_transmit>
			HAL_Delay(100);
 80033a2:	2064      	movs	r0, #100	@ 0x64
 80033a4:	f000 fc46 	bl	8003c34 <HAL_Delay>
			HAL_NVIC_SystemReset();
 80033a8:	f001 fe51 	bl	800504e <HAL_NVIC_SystemReset>
		}

		if (spi_data[0] == 1 &&
 80033ac:	4b85      	ldr	r3, [pc, #532]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d147      	bne.n	8003444 <HAL_SPI_RxCpltCallback+0x1a8>
			spi_data[1] == 1) {
 80033b4:	4b83      	ldr	r3, [pc, #524]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80033b6:	785b      	ldrb	r3, [r3, #1]
		if (spi_data[0] == 1 &&
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d143      	bne.n	8003444 <HAL_SPI_RxCpltCallback+0x1a8>
			HAL_GPIO_WritePin(RELAY_5_GPIO_Port, RELAY_5_Pin, (spi_data[5] & (1<<4)) >> 4);
 80033bc:	4b81      	ldr	r3, [pc, #516]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80033be:	795b      	ldrb	r3, [r3, #5]
 80033c0:	111b      	asrs	r3, r3, #4
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2201      	movs	r2, #1
 80033c6:	4013      	ands	r3, r2
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	2380      	movs	r3, #128	@ 0x80
 80033cc:	0059      	lsls	r1, r3, #1
 80033ce:	23a0      	movs	r3, #160	@ 0xa0
 80033d0:	05db      	lsls	r3, r3, #23
 80033d2:	0018      	movs	r0, r3
 80033d4:	f002 f899 	bl	800550a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, (spi_data[5] & (1<<3)) >> 3);
 80033d8:	4b7a      	ldr	r3, [pc, #488]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80033da:	795b      	ldrb	r3, [r3, #5]
 80033dc:	10db      	asrs	r3, r3, #3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	01db      	lsls	r3, r3, #7
 80033ea:	487d      	ldr	r0, [pc, #500]	@ (80035e0 <HAL_SPI_RxCpltCallback+0x344>)
 80033ec:	0019      	movs	r1, r3
 80033ee:	f002 f88c 	bl	800550a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, (spi_data[5] & (1<<2)) >> 2);
 80033f2:	4b74      	ldr	r3, [pc, #464]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80033f4:	795b      	ldrb	r3, [r3, #5]
 80033f6:	109b      	asrs	r3, r3, #2
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4877      	ldr	r0, [pc, #476]	@ (80035e0 <HAL_SPI_RxCpltCallback+0x344>)
 8003402:	001a      	movs	r2, r3
 8003404:	2110      	movs	r1, #16
 8003406:	f002 f880 	bl	800550a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, (spi_data[5] & (1<<1)) >> 1);
 800340a:	4b6e      	ldr	r3, [pc, #440]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 800340c:	795b      	ldrb	r3, [r3, #5]
 800340e:	105b      	asrs	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4871      	ldr	r0, [pc, #452]	@ (80035e0 <HAL_SPI_RxCpltCallback+0x344>)
 800341a:	001a      	movs	r2, r3
 800341c:	2120      	movs	r1, #32
 800341e:	f002 f874 	bl	800550a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, (spi_data[5] & (1<<0)) >> 0);
 8003422:	4b68      	ldr	r3, [pc, #416]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 8003424:	795b      	ldrb	r3, [r3, #5]
 8003426:	2201      	movs	r2, #1
 8003428:	4013      	ands	r3, r2
 800342a:	b2db      	uxtb	r3, r3
 800342c:	486c      	ldr	r0, [pc, #432]	@ (80035e0 <HAL_SPI_RxCpltCallback+0x344>)
 800342e:	001a      	movs	r2, r3
 8003430:	2108      	movs	r1, #8
 8003432:	f002 f86a 	bl	800550a <HAL_GPIO_WritePin>

			spi_response[1] = 1;
 8003436:	4b69      	ldr	r3, [pc, #420]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 8003438:	2201      	movs	r2, #1
 800343a:	705a      	strb	r2, [r3, #1]
			spi_response[5] = spi_data[5];
 800343c:	4b61      	ldr	r3, [pc, #388]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 800343e:	795a      	ldrb	r2, [r3, #5]
 8003440:	4b66      	ldr	r3, [pc, #408]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 8003442:	715a      	strb	r2, [r3, #5]
		}

		if (spi_data[0] == 2 &&
 8003444:	4b5f      	ldr	r3, [pc, #380]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d10b      	bne.n	8003464 <HAL_SPI_RxCpltCallback+0x1c8>
			spi_data[1] == 1) {
 800344c:	4b5d      	ldr	r3, [pc, #372]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 800344e:	785b      	ldrb	r3, [r3, #1]
		if (spi_data[0] == 2 &&
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_SPI_RxCpltCallback+0x1c8>

			spi_response[4] = temperature;
 8003454:	4b63      	ldr	r3, [pc, #396]	@ (80035e4 <HAL_SPI_RxCpltCallback+0x348>)
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	4b60      	ldr	r3, [pc, #384]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800345a:	711a      	strb	r2, [r3, #4]
			spi_response[5] = humidity;
 800345c:	4b62      	ldr	r3, [pc, #392]	@ (80035e8 <HAL_SPI_RxCpltCallback+0x34c>)
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	4b5e      	ldr	r3, [pc, #376]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 8003462:	715a      	strb	r2, [r3, #5]
		}

		if (spi_data[0] == 3) {
 8003464:	4b57      	ldr	r3, [pc, #348]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d12f      	bne.n	80034cc <HAL_SPI_RxCpltCallback+0x230>
			if (spi_data[1] == 1) {
 800346c:	4b55      	ldr	r3, [pc, #340]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10b      	bne.n	800348c <HAL_SPI_RxCpltCallback+0x1f0>
				spi_response[4] = pm1_0 & 0xff;
 8003474:	4b5d      	ldr	r3, [pc, #372]	@ (80035ec <HAL_SPI_RxCpltCallback+0x350>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4b58      	ldr	r3, [pc, #352]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800347c:	711a      	strb	r2, [r3, #4]
				spi_response[5] = pm1_0 >> 8;
 800347e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ec <HAL_SPI_RxCpltCallback+0x350>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	b29b      	uxth	r3, r3
 8003486:	b2da      	uxtb	r2, r3
 8003488:	4b54      	ldr	r3, [pc, #336]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800348a:	715a      	strb	r2, [r3, #5]
			}

			if (spi_data[1] == 2) {
 800348c:	4b4d      	ldr	r3, [pc, #308]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d10b      	bne.n	80034ac <HAL_SPI_RxCpltCallback+0x210>
				spi_response[4] = pm2_5 & 0xff;
 8003494:	4b56      	ldr	r3, [pc, #344]	@ (80035f0 <HAL_SPI_RxCpltCallback+0x354>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4b50      	ldr	r3, [pc, #320]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800349c:	711a      	strb	r2, [r3, #4]
				spi_response[5] = pm2_5 >> 8;
 800349e:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <HAL_SPI_RxCpltCallback+0x354>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b4c      	ldr	r3, [pc, #304]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 80034aa:	715a      	strb	r2, [r3, #5]
			}

			if (spi_data[1] == 3) {
 80034ac:	4b45      	ldr	r3, [pc, #276]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80034ae:	785b      	ldrb	r3, [r3, #1]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d10b      	bne.n	80034cc <HAL_SPI_RxCpltCallback+0x230>
				spi_response[4] = pm10 & 0xff;
 80034b4:	4b4f      	ldr	r3, [pc, #316]	@ (80035f4 <HAL_SPI_RxCpltCallback+0x358>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b48      	ldr	r3, [pc, #288]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 80034bc:	711a      	strb	r2, [r3, #4]
				spi_response[5] = pm10 >> 8;
 80034be:	4b4d      	ldr	r3, [pc, #308]	@ (80035f4 <HAL_SPI_RxCpltCallback+0x358>)
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	4b44      	ldr	r3, [pc, #272]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 80034ca:	715a      	strb	r2, [r3, #5]
			}
		}

		if (spi_data[0] == 4 &&
 80034cc:	4b3d      	ldr	r3, [pc, #244]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d164      	bne.n	800359e <HAL_SPI_RxCpltCallback+0x302>
			spi_data[1] == 1) {
 80034d4:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80034d6:	785b      	ldrb	r3, [r3, #1]
		if (spi_data[0] == 4 &&
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d160      	bne.n	800359e <HAL_SPI_RxCpltCallback+0x302>
			ldr = HAL_ADC_GetValue(&hadc1);
 80034dc:	4b46      	ldr	r3, [pc, #280]	@ (80035f8 <HAL_SPI_RxCpltCallback+0x35c>)
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 ff26 	bl	8004330 <HAL_ADC_GetValue>
 80034e4:	0003      	movs	r3, r0
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	4b44      	ldr	r3, [pc, #272]	@ (80035fc <HAL_SPI_RxCpltCallback+0x360>)
 80034ea:	801a      	strh	r2, [r3, #0]

			float Vout = (float)ldr * (3.3 / (float)4096);
 80034ec:	4b43      	ldr	r3, [pc, #268]	@ (80035fc <HAL_SPI_RxCpltCallback+0x360>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fd fb81 	bl	8000bf8 <__aeabi_ui2f>
 80034f6:	1c03      	adds	r3, r0, #0
 80034f8:	1c18      	adds	r0, r3, #0
 80034fa:	f7fe fd3d 	bl	8001f78 <__aeabi_f2d>
 80034fe:	4a40      	ldr	r2, [pc, #256]	@ (8003600 <HAL_SPI_RxCpltCallback+0x364>)
 8003500:	4b40      	ldr	r3, [pc, #256]	@ (8003604 <HAL_SPI_RxCpltCallback+0x368>)
 8003502:	f7fd fed5 	bl	80012b0 <__aeabi_dmul>
 8003506:	0002      	movs	r2, r0
 8003508:	000b      	movs	r3, r1
 800350a:	0010      	movs	r0, r2
 800350c:	0019      	movs	r1, r3
 800350e:	f7fe fd7b 	bl	8002008 <__aeabi_d2f>
 8003512:	1c03      	adds	r3, r0, #0
 8003514:	657b      	str	r3, [r7, #84]	@ 0x54
			float RLDR = (10000 * (3.3 - Vout)) / Vout;
 8003516:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003518:	f7fe fd2e 	bl	8001f78 <__aeabi_f2d>
 800351c:	0002      	movs	r2, r0
 800351e:	000b      	movs	r3, r1
 8003520:	4837      	ldr	r0, [pc, #220]	@ (8003600 <HAL_SPI_RxCpltCallback+0x364>)
 8003522:	4939      	ldr	r1, [pc, #228]	@ (8003608 <HAL_SPI_RxCpltCallback+0x36c>)
 8003524:	f7fe f98c 	bl	8001840 <__aeabi_dsub>
 8003528:	0002      	movs	r2, r0
 800352a:	000b      	movs	r3, r1
 800352c:	0010      	movs	r0, r2
 800352e:	0019      	movs	r1, r3
 8003530:	2200      	movs	r2, #0
 8003532:	4b36      	ldr	r3, [pc, #216]	@ (800360c <HAL_SPI_RxCpltCallback+0x370>)
 8003534:	f7fd febc 	bl	80012b0 <__aeabi_dmul>
 8003538:	0002      	movs	r2, r0
 800353a:	000b      	movs	r3, r1
 800353c:	0014      	movs	r4, r2
 800353e:	001d      	movs	r5, r3
 8003540:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003542:	f7fe fd19 	bl	8001f78 <__aeabi_f2d>
 8003546:	0002      	movs	r2, r0
 8003548:	000b      	movs	r3, r1
 800354a:	0020      	movs	r0, r4
 800354c:	0029      	movs	r1, r5
 800354e:	f7fd fb95 	bl	8000c7c <__aeabi_ddiv>
 8003552:	0002      	movs	r2, r0
 8003554:	000b      	movs	r3, r1
 8003556:	0010      	movs	r0, r2
 8003558:	0019      	movs	r1, r3
 800355a:	f7fe fd55 	bl	8002008 <__aeabi_d2f>
 800355e:	1c03      	adds	r3, r0, #0
 8003560:	653b      	str	r3, [r7, #80]	@ 0x50
			uint16_t lux = 500 / (RLDR / 1000);
 8003562:	492b      	ldr	r1, [pc, #172]	@ (8003610 <HAL_SPI_RxCpltCallback+0x374>)
 8003564:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003566:	f7fd f863 	bl	8000630 <__aeabi_fdiv>
 800356a:	1c03      	adds	r3, r0, #0
 800356c:	1c19      	adds	r1, r3, #0
 800356e:	4829      	ldr	r0, [pc, #164]	@ (8003614 <HAL_SPI_RxCpltCallback+0x378>)
 8003570:	f7fd f85e 	bl	8000630 <__aeabi_fdiv>
 8003574:	1c03      	adds	r3, r0, #0
 8003576:	254e      	movs	r5, #78	@ 0x4e
 8003578:	197c      	adds	r4, r7, r5
 800357a:	1c18      	adds	r0, r3, #0
 800357c:	f7fc ff74 	bl	8000468 <__aeabi_f2uiz>
 8003580:	0003      	movs	r3, r0
 8003582:	8023      	strh	r3, [r4, #0]

			spi_response[4] = lux & 0xff;
 8003584:	0029      	movs	r1, r5
 8003586:	187b      	adds	r3, r7, r1
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800358e:	711a      	strb	r2, [r3, #4]
			spi_response[5] = lux >> 8;
 8003590:	187b      	adds	r3, r7, r1
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	b29b      	uxth	r3, r3
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <HAL_SPI_RxCpltCallback+0x340>)
 800359c:	715a      	strb	r2, [r3, #5]
		}


		spi_transmit(&hspi1);
 800359e:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <HAL_SPI_RxCpltCallback+0x324>)
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7ff fe55 	bl	8003250 <spi_transmit>

		HAL_SPI_Receive_IT(&hspi1, spi_data, 8);
 80035a6:	4907      	ldr	r1, [pc, #28]	@ (80035c4 <HAL_SPI_RxCpltCallback+0x328>)
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_SPI_RxCpltCallback+0x324>)
 80035aa:	2208      	movs	r2, #8
 80035ac:	0018      	movs	r0, r3
 80035ae:	f003 f8dd 	bl	800676c <HAL_SPI_Receive_IT>
	}
}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b019      	add	sp, #100	@ 0x64
 80035b8:	bcc0      	pop	{r6, r7}
 80035ba:	46b9      	mov	r9, r7
 80035bc:	46b0      	mov	r8, r6
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c0:	20000140 	.word	0x20000140
 80035c4:	200003ec 	.word	0x200003ec
 80035c8:	0800a738 	.word	0x0800a738
 80035cc:	200001f0 	.word	0x200001f0
 80035d0:	0800a768 	.word	0x0800a768
 80035d4:	20000000 	.word	0x20000000
 80035d8:	200003fc 	.word	0x200003fc
 80035dc:	200003f4 	.word	0x200003f4
 80035e0:	50000400 	.word	0x50000400
 80035e4:	200003fd 	.word	0x200003fd
 80035e8:	200003fe 	.word	0x200003fe
 80035ec:	20000432 	.word	0x20000432
 80035f0:	20000434 	.word	0x20000434
 80035f4:	20000436 	.word	0x20000436
 80035f8:	200000dc 	.word	0x200000dc
 80035fc:	20000438 	.word	0x20000438
 8003600:	66666666 	.word	0x66666666
 8003604:	3f4a6666 	.word	0x3f4a6666
 8003608:	400a6666 	.word	0x400a6666
 800360c:	40c38800 	.word	0x40c38800
 8003610:	447a0000 	.word	0x447a0000
 8003614:	43fa0000 	.word	0x43fa0000

08003618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800361c:	b672      	cpsid	i
}
 800361e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	e7fd      	b.n	8003620 <Error_Handler+0x8>

08003624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <HAL_MspInit+0x44>)
 800362c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800362e:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <HAL_MspInit+0x44>)
 8003630:	2101      	movs	r1, #1
 8003632:	430a      	orrs	r2, r1
 8003634:	641a      	str	r2, [r3, #64]	@ 0x40
 8003636:	4b0c      	ldr	r3, [pc, #48]	@ (8003668 <HAL_MspInit+0x44>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2201      	movs	r2, #1
 800363c:	4013      	ands	r3, r2
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <HAL_MspInit+0x44>)
 8003644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <HAL_MspInit+0x44>)
 8003648:	2180      	movs	r1, #128	@ 0x80
 800364a:	0549      	lsls	r1, r1, #21
 800364c:	430a      	orrs	r2, r1
 800364e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_MspInit+0x44>)
 8003652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	055b      	lsls	r3, r3, #21
 8003658:	4013      	ands	r3, r2
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b002      	add	sp, #8
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	40021000 	.word	0x40021000

0800366c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b08b      	sub	sp, #44	@ 0x2c
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	2414      	movs	r4, #20
 8003676:	193b      	adds	r3, r7, r4
 8003678:	0018      	movs	r0, r3
 800367a:	2314      	movs	r3, #20
 800367c:	001a      	movs	r2, r3
 800367e:	2100      	movs	r1, #0
 8003680:	f006 fb2a 	bl	8009cd8 <memset>
  if(hadc->Instance==ADC1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <HAL_ADC_MspInit+0x90>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d131      	bne.n	80036f2 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800368e:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <HAL_ADC_MspInit+0x94>)
 8003690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_ADC_MspInit+0x94>)
 8003694:	2180      	movs	r1, #128	@ 0x80
 8003696:	0349      	lsls	r1, r1, #13
 8003698:	430a      	orrs	r2, r1
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40
 800369c:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <HAL_ADC_MspInit+0x94>)
 800369e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036a0:	2380      	movs	r3, #128	@ 0x80
 80036a2:	035b      	lsls	r3, r3, #13
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_ADC_MspInit+0x94>)
 80036ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ae:	4b14      	ldr	r3, [pc, #80]	@ (8003700 <HAL_ADC_MspInit+0x94>)
 80036b0:	2101      	movs	r1, #1
 80036b2:	430a      	orrs	r2, r1
 80036b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <HAL_ADC_MspInit+0x94>)
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	2201      	movs	r2, #1
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LDR_Pin;
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	2203      	movs	r2, #3
 80036cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 80036d4:	193a      	adds	r2, r7, r4
 80036d6:	23a0      	movs	r3, #160	@ 0xa0
 80036d8:	05db      	lsls	r3, r3, #23
 80036da:	0011      	movs	r1, r2
 80036dc:	0018      	movs	r0, r3
 80036de:	f001 fd93 	bl	8005208 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2100      	movs	r1, #0
 80036e6:	200c      	movs	r0, #12
 80036e8:	f001 fc8c 	bl	8005004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80036ec:	200c      	movs	r0, #12
 80036ee:	f001 fc9e 	bl	800502e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b00b      	add	sp, #44	@ 0x2c
 80036f8:	bd90      	pop	{r4, r7, pc}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	40012400 	.word	0x40012400
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b08b      	sub	sp, #44	@ 0x2c
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	2414      	movs	r4, #20
 800370e:	193b      	adds	r3, r7, r4
 8003710:	0018      	movs	r0, r3
 8003712:	2314      	movs	r3, #20
 8003714:	001a      	movs	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	f006 fade 	bl	8009cd8 <memset>
  if(hspi->Instance==SPI1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1f      	ldr	r2, [pc, #124]	@ (80037a0 <HAL_SPI_MspInit+0x9c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d138      	bne.n	8003798 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003726:	4b1f      	ldr	r3, [pc, #124]	@ (80037a4 <HAL_SPI_MspInit+0xa0>)
 8003728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800372a:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <HAL_SPI_MspInit+0xa0>)
 800372c:	2180      	movs	r1, #128	@ 0x80
 800372e:	0149      	lsls	r1, r1, #5
 8003730:	430a      	orrs	r2, r1
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_SPI_MspInit+0xa0>)
 8003736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	015b      	lsls	r3, r3, #5
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	4b18      	ldr	r3, [pc, #96]	@ (80037a4 <HAL_SPI_MspInit+0xa0>)
 8003744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003746:	4b17      	ldr	r3, [pc, #92]	@ (80037a4 <HAL_SPI_MspInit+0xa0>)
 8003748:	2101      	movs	r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	635a      	str	r2, [r3, #52]	@ 0x34
 800374e:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <HAL_SPI_MspInit+0xa0>)
 8003750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003752:	2201      	movs	r2, #1
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800375a:	0021      	movs	r1, r4
 800375c:	187b      	adds	r3, r7, r1
 800375e:	22c2      	movs	r2, #194	@ 0xc2
 8003760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2202      	movs	r2, #2
 8003766:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377a:	187a      	adds	r2, r7, r1
 800377c:	23a0      	movs	r3, #160	@ 0xa0
 800377e:	05db      	lsls	r3, r3, #23
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f001 fd40 	bl	8005208 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003788:	2200      	movs	r2, #0
 800378a:	2100      	movs	r1, #0
 800378c:	2019      	movs	r0, #25
 800378e:	f001 fc39 	bl	8005004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003792:	2019      	movs	r0, #25
 8003794:	f001 fc4b 	bl	800502e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b00b      	add	sp, #44	@ 0x2c
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	40013000 	.word	0x40013000
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b091      	sub	sp, #68	@ 0x44
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037b0:	240c      	movs	r4, #12
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	0018      	movs	r0, r3
 80037b6:	2334      	movs	r3, #52	@ 0x34
 80037b8:	001a      	movs	r2, r3
 80037ba:	2100      	movs	r1, #0
 80037bc:	f006 fa8c 	bl	8009cd8 <memset>
  if(htim_base->Instance==TIM1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a11      	ldr	r2, [pc, #68]	@ (800380c <HAL_TIM_Base_MspInit+0x64>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d11c      	bne.n	8003804 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	2280      	movs	r2, #128	@ 0x80
 80037ce:	0392      	lsls	r2, r2, #14
 80037d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	2200      	movs	r2, #0
 80037d6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037d8:	193b      	adds	r3, r7, r4
 80037da:	0018      	movs	r0, r3
 80037dc:	f002 fbf6 	bl	8005fcc <HAL_RCCEx_PeriphCLKConfig>
 80037e0:	1e03      	subs	r3, r0, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80037e4:	f7ff ff18 	bl	8003618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037e8:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_TIM_Base_MspInit+0x68>)
 80037ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ec:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <HAL_TIM_Base_MspInit+0x68>)
 80037ee:	2180      	movs	r1, #128	@ 0x80
 80037f0:	0109      	lsls	r1, r1, #4
 80037f2:	430a      	orrs	r2, r1
 80037f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_TIM_Base_MspInit+0x68>)
 80037f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b011      	add	sp, #68	@ 0x44
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40021000 	.word	0x40021000

08003814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b09b      	sub	sp, #108	@ 0x6c
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	2354      	movs	r3, #84	@ 0x54
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	0018      	movs	r0, r3
 8003822:	2314      	movs	r3, #20
 8003824:	001a      	movs	r2, r3
 8003826:	2100      	movs	r1, #0
 8003828:	f006 fa56 	bl	8009cd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800382c:	2420      	movs	r4, #32
 800382e:	193b      	adds	r3, r7, r4
 8003830:	0018      	movs	r0, r3
 8003832:	2334      	movs	r3, #52	@ 0x34
 8003834:	001a      	movs	r2, r3
 8003836:	2100      	movs	r1, #0
 8003838:	f006 fa4e 	bl	8009cd8 <memset>
  if(huart->Instance==USART2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a57      	ldr	r2, [pc, #348]	@ (80039a0 <HAL_UART_MspInit+0x18c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d147      	bne.n	80038d6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003846:	193b      	adds	r3, r7, r4
 8003848:	2202      	movs	r2, #2
 800384a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800384c:	193b      	adds	r3, r7, r4
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003852:	193b      	adds	r3, r7, r4
 8003854:	0018      	movs	r0, r3
 8003856:	f002 fbb9 	bl	8005fcc <HAL_RCCEx_PeriphCLKConfig>
 800385a:	1e03      	subs	r3, r0, #0
 800385c:	d001      	beq.n	8003862 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800385e:	f7ff fedb 	bl	8003618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003862:	4b50      	ldr	r3, [pc, #320]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003866:	4b4f      	ldr	r3, [pc, #316]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	0289      	lsls	r1, r1, #10
 800386c:	430a      	orrs	r2, r1
 800386e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003870:	4b4c      	ldr	r3, [pc, #304]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003872:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	029b      	lsls	r3, r3, #10
 8003878:	4013      	ands	r3, r2
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387e:	4b49      	ldr	r3, [pc, #292]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003882:	4b48      	ldr	r3, [pc, #288]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003884:	2101      	movs	r1, #1
 8003886:	430a      	orrs	r2, r1
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34
 800388a:	4b46      	ldr	r3, [pc, #280]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388e:	2201      	movs	r2, #1
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003896:	2154      	movs	r1, #84	@ 0x54
 8003898:	187b      	adds	r3, r7, r1
 800389a:	220c      	movs	r2, #12
 800389c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2202      	movs	r2, #2
 80038a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	2201      	movs	r2, #1
 80038a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	2200      	movs	r2, #0
 80038ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	2201      	movs	r2, #1
 80038b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b6:	187a      	adds	r2, r7, r1
 80038b8:	23a0      	movs	r3, #160	@ 0xa0
 80038ba:	05db      	lsls	r3, r3, #23
 80038bc:	0011      	movs	r1, r2
 80038be:	0018      	movs	r0, r3
 80038c0:	f001 fca2 	bl	8005208 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038c4:	2200      	movs	r2, #0
 80038c6:	2100      	movs	r1, #0
 80038c8:	201c      	movs	r0, #28
 80038ca:	f001 fb9b 	bl	8005004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038ce:	201c      	movs	r0, #28
 80038d0:	f001 fbad 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038d4:	e060      	b.n	8003998 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a33      	ldr	r2, [pc, #204]	@ (80039a8 <HAL_UART_MspInit+0x194>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d15b      	bne.n	8003998 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038e0:	4b30      	ldr	r3, [pc, #192]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 80038e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038e4:	4b2f      	ldr	r3, [pc, #188]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 80038e6:	2180      	movs	r1, #128	@ 0x80
 80038e8:	02c9      	lsls	r1, r1, #11
 80038ea:	430a      	orrs	r2, r1
 80038ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038ee:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 80038f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	02db      	lsls	r3, r3, #11
 80038f6:	4013      	ands	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fc:	4b29      	ldr	r3, [pc, #164]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 80038fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003902:	2104      	movs	r1, #4
 8003904:	430a      	orrs	r2, r1
 8003906:	635a      	str	r2, [r3, #52]	@ 0x34
 8003908:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 800390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390c:	2204      	movs	r2, #4
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003914:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003918:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 800391a:	2102      	movs	r1, #2
 800391c:	430a      	orrs	r2, r1
 800391e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003920:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_UART_MspInit+0x190>)
 8003922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PMS7003_RX_Pin;
 800392c:	2154      	movs	r1, #84	@ 0x54
 800392e:	187b      	adds	r3, r7, r1
 8003930:	2280      	movs	r2, #128	@ 0x80
 8003932:	0112      	lsls	r2, r2, #4
 8003934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	000c      	movs	r4, r1
 8003938:	193b      	adds	r3, r7, r4
 800393a:	2202      	movs	r2, #2
 800393c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	193b      	adds	r3, r7, r4
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003944:	193b      	adds	r3, r7, r4
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800394a:	193b      	adds	r3, r7, r4
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PMS7003_RX_GPIO_Port, &GPIO_InitStruct);
 8003950:	193b      	adds	r3, r7, r4
 8003952:	4a16      	ldr	r2, [pc, #88]	@ (80039ac <HAL_UART_MspInit+0x198>)
 8003954:	0019      	movs	r1, r3
 8003956:	0010      	movs	r0, r2
 8003958:	f001 fc56 	bl	8005208 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PMS7003_TX_Pin;
 800395c:	0021      	movs	r1, r4
 800395e:	187b      	adds	r3, r7, r1
 8003960:	2204      	movs	r2, #4
 8003962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	187b      	adds	r3, r7, r1
 8003966:	2202      	movs	r2, #2
 8003968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	187b      	adds	r3, r7, r1
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003976:	187b      	adds	r3, r7, r1
 8003978:	2204      	movs	r2, #4
 800397a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PMS7003_TX_GPIO_Port, &GPIO_InitStruct);
 800397c:	187b      	adds	r3, r7, r1
 800397e:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <HAL_UART_MspInit+0x19c>)
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f001 fc40 	bl	8005208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8003988:	2200      	movs	r2, #0
 800398a:	2100      	movs	r1, #0
 800398c:	201d      	movs	r0, #29
 800398e:	f001 fb39 	bl	8005004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8003992:	201d      	movs	r0, #29
 8003994:	f001 fb4b 	bl	800502e <HAL_NVIC_EnableIRQ>
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b01b      	add	sp, #108	@ 0x6c
 800399e:	bd90      	pop	{r4, r7, pc}
 80039a0:	40004400 	.word	0x40004400
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40004800 	.word	0x40004800
 80039ac:	50000800 	.word	0x50000800
 80039b0:	50000400 	.word	0x50000400

080039b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039b8:	46c0      	nop			@ (mov r8, r8)
 80039ba:	e7fd      	b.n	80039b8 <NMI_Handler+0x4>

080039bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	e7fd      	b.n	80039c0 <HardFault_Handler+0x4>

080039c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039c8:	46c0      	nop			@ (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039dc:	f000 f90e 	bl	8003bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	0018      	movs	r0, r3
 80039f0:	f001 fda8 	bl	8005544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a00:	4b03      	ldr	r3, [pc, #12]	@ (8003a10 <ADC1_COMP_IRQHandler+0x14>)
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 fca0 	bl	8004348 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	200000dc 	.word	0x200000dc

08003a14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a18:	4b03      	ldr	r3, [pc, #12]	@ (8003a28 <SPI1_IRQHandler+0x14>)
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f003 f830 	bl	8006a80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	20000140 	.word	0x20000140

08003a2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a30:	4b03      	ldr	r3, [pc, #12]	@ (8003a40 <USART2_IRQHandler+0x14>)
 8003a32:	0018      	movs	r0, r3
 8003a34:	f004 f952 	bl	8007cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	200001f0 	.word	0x200001f0

08003a44 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a48:	4b03      	ldr	r3, [pc, #12]	@ (8003a58 <USART3_4_LPUART1_IRQHandler+0x14>)
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f004 f946 	bl	8007cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	20000284 	.word	0x20000284

08003a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a64:	4a14      	ldr	r2, [pc, #80]	@ (8003ab8 <_sbrk+0x5c>)
 8003a66:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <_sbrk+0x60>)
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a70:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a78:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <_sbrk+0x64>)
 8003a7a:	4a12      	ldr	r2, [pc, #72]	@ (8003ac4 <_sbrk+0x68>)
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <_sbrk+0x64>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	18d3      	adds	r3, r2, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d207      	bcs.n	8003a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a8c:	f006 f940 	bl	8009d10 <__errno>
 8003a90:	0003      	movs	r3, r0
 8003a92:	220c      	movs	r2, #12
 8003a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	425b      	negs	r3, r3
 8003a9a:	e009      	b.n	8003ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <_sbrk+0x64>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa2:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <_sbrk+0x64>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	18d2      	adds	r2, r2, r3
 8003aaa:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <_sbrk+0x64>)
 8003aac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b006      	add	sp, #24
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20009000 	.word	0x20009000
 8003abc:	00000400 	.word	0x00000400
 8003ac0:	2000043c 	.word	0x2000043c
 8003ac4:	20000590 	.word	0x20000590

08003ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ad4:	480d      	ldr	r0, [pc, #52]	@ (8003b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ad6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ad8:	f7ff fff6 	bl	8003ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003adc:	480c      	ldr	r0, [pc, #48]	@ (8003b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ade:	490d      	ldr	r1, [pc, #52]	@ (8003b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b18 <LoopForever+0xe>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae4:	e002      	b.n	8003aec <LoopCopyDataInit>

08003ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aea:	3304      	adds	r3, #4

08003aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003af0:	d3f9      	bcc.n	8003ae6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af4:	4c0a      	ldr	r4, [pc, #40]	@ (8003b20 <LoopForever+0x16>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af8:	e001      	b.n	8003afe <LoopFillZerobss>

08003afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003afc:	3204      	adds	r2, #4

08003afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b00:	d3fb      	bcc.n	8003afa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b02:	f006 f90b 	bl	8009d1c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003b06:	f7fe fd9f 	bl	8002648 <main>

08003b0a <LoopForever>:

LoopForever:
  b LoopForever
 8003b0a:	e7fe      	b.n	8003b0a <LoopForever>
  ldr   r0, =_estack
 8003b0c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b14:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8003b18:	0800a900 	.word	0x0800a900
  ldr r2, =_sbss
 8003b1c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8003b20:	2000058c 	.word	0x2000058c

08003b24 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <CEC_IRQHandler>
	...

08003b28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_Init+0x3c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_Init+0x3c>)
 8003b3a:	2180      	movs	r1, #128	@ 0x80
 8003b3c:	0049      	lsls	r1, r1, #1
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 f810 	bl	8003b68 <HAL_InitTick>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e001      	b.n	8003b58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003b54:	f7ff fd66 	bl	8003624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	781b      	ldrb	r3, [r3, #0]
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40022000 	.word	0x40022000

08003b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b70:	230f      	movs	r3, #15
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf0 <HAL_InitTick+0x88>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d02b      	beq.n	8003bd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003b80:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf4 <HAL_InitTick+0x8c>)
 8003b82:	681c      	ldr	r4, [r3, #0]
 8003b84:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <HAL_InitTick+0x88>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	0019      	movs	r1, r3
 8003b8a:	23fa      	movs	r3, #250	@ 0xfa
 8003b8c:	0098      	lsls	r0, r3, #2
 8003b8e:	f7fc fad5 	bl	800013c <__udivsi3>
 8003b92:	0003      	movs	r3, r0
 8003b94:	0019      	movs	r1, r3
 8003b96:	0020      	movs	r0, r4
 8003b98:	f7fc fad0 	bl	800013c <__udivsi3>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f001 fa59 	bl	8005056 <HAL_SYSTICK_Config>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d112      	bne.n	8003bce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d80a      	bhi.n	8003bc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	425b      	negs	r3, r3
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f001 fa24 	bl	8005004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <HAL_InitTick+0x90>)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00d      	b.n	8003be0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003bc4:	230f      	movs	r3, #15
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e008      	b.n	8003be0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003bce:	230f      	movs	r3, #15
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e003      	b.n	8003be0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bd8:	230f      	movs	r3, #15
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003be0:	230f      	movs	r3, #15
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	781b      	ldrb	r3, [r3, #0]
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b005      	add	sp, #20
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	2000006c 	.word	0x2000006c
 8003bf4:	20000064 	.word	0x20000064
 8003bf8:	20000068 	.word	0x20000068

08003bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_IncTick+0x1c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	001a      	movs	r2, r3
 8003c06:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_IncTick+0x20>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	18d2      	adds	r2, r2, r3
 8003c0c:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <HAL_IncTick+0x20>)
 8003c0e:	601a      	str	r2, [r3, #0]
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	2000006c 	.word	0x2000006c
 8003c1c:	20000440 	.word	0x20000440

08003c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  return uwTick;
 8003c24:	4b02      	ldr	r3, [pc, #8]	@ (8003c30 <HAL_GetTick+0x10>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	20000440 	.word	0x20000440

08003c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c3c:	f7ff fff0 	bl	8003c20 <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	d005      	beq.n	8003c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <HAL_Delay+0x44>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	001a      	movs	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	f7ff ffe0 	bl	8003c20 <HAL_GetTick>
 8003c60:	0002      	movs	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d8f7      	bhi.n	8003c5c <HAL_Delay+0x28>
  {
  }
}
 8003c6c:	46c0      	nop			@ (mov r8, r8)
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	2000006c 	.word	0x2000006c

08003c7c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	601a      	str	r2, [r3, #0]
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	fe3fffff 	.word	0xfe3fffff

08003ca4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	23e0      	movs	r3, #224	@ 0xe0
 8003cb2:	045b      	lsls	r3, r3, #17
 8003cb4:	4013      	ands	r3, r2
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	2107      	movs	r1, #7
 8003cd6:	4091      	lsls	r1, r2
 8003cd8:	000a      	movs	r2, r1
 8003cda:	43d2      	mvns	r2, r2
 8003cdc:	401a      	ands	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	400b      	ands	r3, r1
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4099      	lsls	r1, r3
 8003ce8:	000b      	movs	r3, r1
 8003cea:	431a      	orrs	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b004      	add	sp, #16
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	2104      	movs	r1, #4
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	2107      	movs	r1, #7
 8003d0e:	4091      	lsls	r1, r2
 8003d10:	000a      	movs	r2, r1
 8003d12:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2104      	movs	r1, #4
 8003d18:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003d1a:	40da      	lsrs	r2, r3
 8003d1c:	0013      	movs	r3, r2
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	23c0      	movs	r3, #192	@ 0xc0
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	4013      	ands	r3, r2
 8003d38:	d101      	bne.n	8003d3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	0018      	movs	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b002      	add	sp, #8
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	211f      	movs	r1, #31
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	210f      	movs	r1, #15
 8003d60:	4091      	lsls	r1, r2
 8003d62:	000a      	movs	r2, r1
 8003d64:	43d2      	mvns	r2, r2
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	0e9b      	lsrs	r3, r3, #26
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	4019      	ands	r1, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	201f      	movs	r0, #31
 8003d74:	4003      	ands	r3, r0
 8003d76:	4099      	lsls	r1, r3
 8003d78:	000b      	movs	r3, r1
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b004      	add	sp, #16
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	035b      	lsls	r3, r3, #13
 8003d9a:	0b5b      	lsrs	r3, r3, #13
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b002      	add	sp, #8
 8003da8:	bd80      	pop	{r7, pc}

08003daa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	0352      	lsls	r2, r2, #13
 8003dbc:	0b52      	lsrs	r2, r2, #13
 8003dbe:	43d2      	mvns	r2, r2
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	4013      	ands	r3, r2
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b002      	add	sp, #8
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	0212      	lsls	r2, r2, #8
 8003dfc:	43d2      	mvns	r2, r2
 8003dfe:	401a      	ands	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	400b      	ands	r3, r1
 8003e08:	4904      	ldr	r1, [pc, #16]	@ (8003e1c <LL_ADC_SetChannelSamplingTime+0x34>)
 8003e0a:	400b      	ands	r3, r1
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	07ffff00 	.word	0x07ffff00

08003e20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a05      	ldr	r2, [pc, #20]	@ (8003e44 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2280      	movs	r2, #128	@ 0x80
 8003e32:	0552      	lsls	r2, r2, #21
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	6fffffe8 	.word	0x6fffffe8

08003e48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	055b      	lsls	r3, r3, #21
 8003e58:	401a      	ands	r2, r3
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	055b      	lsls	r3, r3, #21
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	0018      	movs	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b002      	add	sp, #8
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <LL_ADC_Enable+0x20>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2201      	movs	r2, #1
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	7fffffe8 	.word	0x7fffffe8

08003e94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <LL_ADC_Disable+0x20>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b002      	add	sp, #8
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	7fffffe8 	.word	0x7fffffe8

08003eb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <LL_ADC_IsEnabled+0x18>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <LL_ADC_IsEnabled+0x1a>
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b002      	add	sp, #8
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d101      	bne.n	8003ef2 <LL_ADC_IsDisableOngoing+0x18>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <LL_ADC_IsDisableOngoing+0x1a>
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <LL_ADC_REG_StartConversion+0x20>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f14:	46c0      	nop			@ (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	7fffffe8 	.word	0x7fffffe8

08003f20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d101      	bne.n	8003f38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b002      	add	sp, #8
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f4c:	231f      	movs	r3, #31
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e17f      	b.n	800426a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7ff fb79 	bl	800366c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2254      	movs	r2, #84	@ 0x54
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7ff ff5b 	bl	8003e48 <LL_ADC_IsInternalRegulatorEnabled>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d115      	bne.n	8003fc2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7ff ff40 	bl	8003e20 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fa0:	4bb4      	ldr	r3, [pc, #720]	@ (8004274 <HAL_ADC_Init+0x330>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	49b4      	ldr	r1, [pc, #720]	@ (8004278 <HAL_ADC_Init+0x334>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fc f8c8 	bl	800013c <__udivsi3>
 8003fac:	0003      	movs	r3, r0
 8003fae:	3301      	adds	r3, #1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fb4:	e002      	b.n	8003fbc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f9      	bne.n	8003fb6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7ff ff3e 	bl	8003e48 <LL_ADC_IsInternalRegulatorEnabled>
 8003fcc:	1e03      	subs	r3, r0, #0
 8003fce:	d10f      	bne.n	8003ff0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	2210      	movs	r2, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fe8:	231f      	movs	r3, #31
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7ff ff93 	bl	8003f20 <LL_ADC_REG_IsConversionOngoing>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	2210      	movs	r2, #16
 8004004:	4013      	ands	r3, r2
 8004006:	d000      	beq.n	800400a <HAL_ADC_Init+0xc6>
 8004008:	e122      	b.n	8004250 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d000      	beq.n	8004012 <HAL_ADC_Init+0xce>
 8004010:	e11e      	b.n	8004250 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	4a99      	ldr	r2, [pc, #612]	@ (800427c <HAL_ADC_Init+0x338>)
 8004018:	4013      	ands	r3, r2
 800401a:	2202      	movs	r2, #2
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff ff46 	bl	8003eb8 <LL_ADC_IsEnabled>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d000      	beq.n	8004032 <HAL_ADC_Init+0xee>
 8004030:	e0ad      	b.n	800418e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7e1b      	ldrb	r3, [r3, #24]
 800403a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800403c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7e5b      	ldrb	r3, [r3, #25]
 8004042:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004044:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7e9b      	ldrb	r3, [r3, #26]
 800404a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800404c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_ADC_Init+0x118>
 8004056:	2380      	movs	r3, #128	@ 0x80
 8004058:	015b      	lsls	r3, r3, #5
 800405a:	e000      	b.n	800405e <HAL_ADC_Init+0x11a>
 800405c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800405e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004064:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	da04      	bge.n	8004078 <HAL_ADC_Init+0x134>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	e001      	b.n	800407c <HAL_ADC_Init+0x138>
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800407c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	212c      	movs	r1, #44	@ 0x2c
 8004082:	5c5b      	ldrb	r3, [r3, r1]
 8004084:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004086:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	5c9b      	ldrb	r3, [r3, r2]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d115      	bne.n	80040c4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	7e9b      	ldrb	r3, [r3, #26]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2280      	movs	r2, #128	@ 0x80
 80040a4:	0252      	lsls	r2, r2, #9
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e00b      	b.n	80040c4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b0:	2220      	movs	r2, #32
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	2201      	movs	r2, #1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040d0:	23e0      	movs	r3, #224	@ 0xe0
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80040da:	4313      	orrs	r3, r2
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a65      	ldr	r2, [pc, #404]	@ (8004280 <HAL_ADC_Init+0x33c>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0f9b      	lsrs	r3, r3, #30
 80040fe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004104:	4313      	orrs	r3, r2
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	223c      	movs	r2, #60	@ 0x3c
 8004110:	5c9b      	ldrb	r3, [r3, r2]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d111      	bne.n	800413a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	0f9b      	lsrs	r3, r3, #30
 800411c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004122:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004128:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800412e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	2201      	movs	r2, #1
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4a50      	ldr	r2, [pc, #320]	@ (8004284 <HAL_ADC_Init+0x340>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	430a      	orrs	r2, r1
 800414e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	23c0      	movs	r3, #192	@ 0xc0
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	429a      	cmp	r2, r3
 800415a:	d018      	beq.n	800418e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004160:	2380      	movs	r3, #128	@ 0x80
 8004162:	05db      	lsls	r3, r3, #23
 8004164:	429a      	cmp	r2, r3
 8004166:	d012      	beq.n	800418e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	061b      	lsls	r3, r3, #24
 8004170:	429a      	cmp	r2, r3
 8004172:	d00c      	beq.n	800418e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004174:	4b44      	ldr	r3, [pc, #272]	@ (8004288 <HAL_ADC_Init+0x344>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a44      	ldr	r2, [pc, #272]	@ (800428c <HAL_ADC_Init+0x348>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	23f0      	movs	r3, #240	@ 0xf0
 8004184:	039b      	lsls	r3, r3, #14
 8004186:	401a      	ands	r2, r3
 8004188:	4b3f      	ldr	r3, [pc, #252]	@ (8004288 <HAL_ADC_Init+0x344>)
 800418a:	430a      	orrs	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004196:	001a      	movs	r2, r3
 8004198:	2100      	movs	r1, #0
 800419a:	f7ff fd90 	bl	8003cbe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	493a      	ldr	r1, [pc, #232]	@ (8004290 <HAL_ADC_Init+0x34c>)
 80041a8:	001a      	movs	r2, r3
 80041aa:	f7ff fd88 	bl	8003cbe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2110      	movs	r1, #16
 80041c2:	4249      	negs	r1, r1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c8:	e018      	b.n	80041fc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	2380      	movs	r3, #128	@ 0x80
 80041d0:	039b      	lsls	r3, r3, #14
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d112      	bne.n	80041fc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	221c      	movs	r2, #28
 80041e6:	4013      	ands	r3, r2
 80041e8:	2210      	movs	r2, #16
 80041ea:	4252      	negs	r2, r2
 80041ec:	409a      	lsls	r2, r3
 80041ee:	0011      	movs	r1, r2
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2100      	movs	r1, #0
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff fd78 	bl	8003cf8 <LL_ADC_GetSamplingTimeCommonChannels>
 8004208:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800420e:	429a      	cmp	r2, r3
 8004210:	d10b      	bne.n	800422a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421c:	2203      	movs	r2, #3
 800421e:	4393      	bics	r3, r2
 8004220:	2201      	movs	r2, #1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004228:	e01c      	b.n	8004264 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422e:	2212      	movs	r2, #18
 8004230:	4393      	bics	r3, r2
 8004232:	2210      	movs	r2, #16
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423e:	2201      	movs	r2, #1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004246:	231f      	movs	r3, #31
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800424e:	e009      	b.n	8004264 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	2210      	movs	r2, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800425c:	231f      	movs	r3, #31
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004264:	231f      	movs	r3, #31
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	781b      	ldrb	r3, [r3, #0]
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b008      	add	sp, #32
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	20000064 	.word	0x20000064
 8004278:	00030d40 	.word	0x00030d40
 800427c:	fffffefd 	.word	0xfffffefd
 8004280:	ffde0201 	.word	0xffde0201
 8004284:	1ffffc02 	.word	0x1ffffc02
 8004288:	40012708 	.word	0x40012708
 800428c:	ffc3ffff 	.word	0xffc3ffff
 8004290:	07ffff04 	.word	0x07ffff04

08004294 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7ff fe3d 	bl	8003f20 <LL_ADC_REG_IsConversionOngoing>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d135      	bne.n	8004316 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2254      	movs	r2, #84	@ 0x54
 80042ae:	5c9b      	ldrb	r3, [r3, r2]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_Start+0x24>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e035      	b.n	8004324 <HAL_ADC_Start+0x90>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2254      	movs	r2, #84	@ 0x54
 80042bc:	2101      	movs	r1, #1
 80042be:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80042c0:	250f      	movs	r5, #15
 80042c2:	197c      	adds	r4, r7, r5
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fb46 	bl	8004958 <ADC_Enable>
 80042cc:	0003      	movs	r3, r0
 80042ce:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80042d0:	197b      	adds	r3, r7, r5
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d119      	bne.n	800430c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042dc:	4a13      	ldr	r2, [pc, #76]	@ (800432c <HAL_ADC_Start+0x98>)
 80042de:	4013      	ands	r3, r2
 80042e0:	2280      	movs	r2, #128	@ 0x80
 80042e2:	0052      	lsls	r2, r2, #1
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	221c      	movs	r2, #28
 80042f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2254      	movs	r2, #84	@ 0x54
 80042fc:	2100      	movs	r1, #0
 80042fe:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff fdf9 	bl	8003efc <LL_ADC_REG_StartConversion>
 800430a:	e008      	b.n	800431e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2254      	movs	r2, #84	@ 0x54
 8004310:	2100      	movs	r1, #0
 8004312:	5499      	strb	r1, [r3, r2]
 8004314:	e003      	b.n	800431e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004316:	230f      	movs	r3, #15
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800431e:	230f      	movs	r3, #15
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	781b      	ldrb	r3, [r3, #0]
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bdb0      	pop	{r4, r5, r7, pc}
 800432c:	fffff0fe 	.word	0xfffff0fe

08004330 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b002      	add	sp, #8
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2202      	movs	r2, #2
 8004368:	4013      	ands	r3, r2
 800436a:	d017      	beq.n	800439c <HAL_ADC_IRQHandler+0x54>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004378:	2210      	movs	r2, #16
 800437a:	4013      	ands	r3, r2
 800437c:	d106      	bne.n	800438c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	0112      	lsls	r2, r2, #4
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	0018      	movs	r0, r3
 8004390:	f000 fd6a 	bl	8004e68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2202      	movs	r2, #2
 800439a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2204      	movs	r2, #4
 80043a0:	4013      	ands	r3, r2
 80043a2:	d003      	beq.n	80043ac <HAL_ADC_IRQHandler+0x64>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2204      	movs	r2, #4
 80043a8:	4013      	ands	r3, r2
 80043aa:	d107      	bne.n	80043bc <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2208      	movs	r2, #8
 80043b0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043b2:	d04d      	beq.n	8004450 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2208      	movs	r2, #8
 80043b8:	4013      	ands	r3, r2
 80043ba:	d049      	beq.n	8004450 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c0:	2210      	movs	r2, #16
 80043c2:	4013      	ands	r3, r2
 80043c4:	d106      	bne.n	80043d4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ca:	2280      	movs	r2, #128	@ 0x80
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7ff fca4 	bl	8003d26 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d02e      	beq.n	8004440 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	7e9b      	ldrb	r3, [r3, #26]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d12a      	bne.n	8004440 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2208      	movs	r2, #8
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d123      	bne.n	8004440 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff fd8f 	bl	8003f20 <LL_ADC_REG_IsConversionOngoing>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d110      	bne.n	8004428 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	210c      	movs	r1, #12
 8004412:	438a      	bics	r2, r1
 8004414:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441a:	4a56      	ldr	r2, [pc, #344]	@ (8004574 <HAL_ADC_IRQHandler+0x22c>)
 800441c:	4013      	ands	r3, r2
 800441e:	2201      	movs	r2, #1
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	659a      	str	r2, [r3, #88]	@ 0x58
 8004426:	e00b      	b.n	8004440 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442c:	2220      	movs	r2, #32
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004438:	2201      	movs	r2, #1
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f000 f898 	bl	8004578 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	220c      	movs	r2, #12
 800444e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2280      	movs	r2, #128	@ 0x80
 8004454:	4013      	ands	r3, r2
 8004456:	d012      	beq.n	800447e <HAL_ADC_IRQHandler+0x136>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2280      	movs	r2, #128	@ 0x80
 800445c:	4013      	ands	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	2280      	movs	r2, #128	@ 0x80
 8004466:	0252      	lsls	r2, r2, #9
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f000 f889 	bl	8004588 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2280      	movs	r2, #128	@ 0x80
 800447c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4013      	ands	r3, r2
 8004486:	d014      	beq.n	80044b2 <HAL_ADC_IRQHandler+0x16a>
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	2380      	movs	r3, #128	@ 0x80
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4013      	ands	r3, r2
 8004490:	d00f      	beq.n	80044b2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	2280      	movs	r2, #128	@ 0x80
 8004498:	0292      	lsls	r2, r2, #10
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 fcd0 	bl	8004e48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2280      	movs	r2, #128	@ 0x80
 80044ae:	0052      	lsls	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4013      	ands	r3, r2
 80044ba:	d014      	beq.n	80044e6 <HAL_ADC_IRQHandler+0x19e>
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	2380      	movs	r3, #128	@ 0x80
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4013      	ands	r3, r2
 80044c4:	d00f      	beq.n	80044e6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	2280      	movs	r2, #128	@ 0x80
 80044cc:	02d2      	lsls	r2, r2, #11
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 fcbe 	bl	8004e58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	0092      	lsls	r2, r2, #2
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2210      	movs	r2, #16
 80044ea:	4013      	ands	r3, r2
 80044ec:	d02b      	beq.n	8004546 <HAL_ADC_IRQHandler+0x1fe>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2210      	movs	r2, #16
 80044f2:	4013      	ands	r3, r2
 80044f4:	d027      	beq.n	8004546 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80044fe:	2301      	movs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e008      	b.n	8004516 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0018      	movs	r0, r3
 800450a:	f7ff fc60 	bl	8003dce <LL_ADC_REG_GetDMATransfer>
 800450e:	1e03      	subs	r3, r0, #0
 8004510:	d001      	beq.n	8004516 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8004512:	2301      	movs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d110      	bne.n	800453e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	00d2      	lsls	r2, r2, #3
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	2202      	movs	r2, #2
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f000 f82d 	bl	8004598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2210      	movs	r2, #16
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	2380      	movs	r3, #128	@ 0x80
 800454a:	019b      	lsls	r3, r3, #6
 800454c:	4013      	ands	r3, r2
 800454e:	d00d      	beq.n	800456c <HAL_ADC_IRQHandler+0x224>
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	2380      	movs	r3, #128	@ 0x80
 8004554:	019b      	lsls	r3, r3, #6
 8004556:	4013      	ands	r3, r2
 8004558:	d008      	beq.n	800456c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f000 fc8b 	bl	8004e78 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2280      	movs	r2, #128	@ 0x80
 8004568:	0192      	lsls	r2, r2, #6
 800456a:	601a      	str	r2, [r3, #0]
  }
}
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b006      	add	sp, #24
 8004572:	bd80      	pop	{r7, pc}
 8004574:	fffffefe 	.word	0xfffffefe

08004578 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004580:	46c0      	nop			@ (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004590:	46c0      	nop			@ (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045a0:	46c0      	nop			@ (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b2:	2317      	movs	r3, #23
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2254      	movs	r2, #84	@ 0x54
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x24>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e1c0      	b.n	800494e <HAL_ADC_ConfigChannel+0x3a6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2254      	movs	r2, #84	@ 0x54
 80045d0:	2101      	movs	r1, #1
 80045d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	0018      	movs	r0, r3
 80045da:	f7ff fca1 	bl	8003f20 <LL_ADC_REG_IsConversionOngoing>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d000      	beq.n	80045e4 <HAL_ADC_ConfigChannel+0x3c>
 80045e2:	e1a3      	b.n	800492c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d100      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x46>
 80045ec:	e143      	b.n	8004876 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d004      	beq.n	8004604 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045fe:	4ac1      	ldr	r2, [pc, #772]	@ (8004904 <HAL_ADC_ConfigChannel+0x35c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d108      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0019      	movs	r1, r3
 800460e:	0010      	movs	r0, r2
 8004610:	f7ff fbba 	bl	8003d88 <LL_ADC_REG_SetSequencerChAdd>
 8004614:	e0c9      	b.n	80047aa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	211f      	movs	r1, #31
 8004620:	400b      	ands	r3, r1
 8004622:	210f      	movs	r1, #15
 8004624:	4099      	lsls	r1, r3
 8004626:	000b      	movs	r3, r1
 8004628:	43db      	mvns	r3, r3
 800462a:	4013      	ands	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	035b      	lsls	r3, r3, #13
 8004634:	0b5b      	lsrs	r3, r3, #13
 8004636:	d105      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x9c>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0e9b      	lsrs	r3, r3, #26
 800463e:	221f      	movs	r2, #31
 8004640:	4013      	ands	r3, r2
 8004642:	e098      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	4013      	ands	r3, r2
 800464c:	d000      	beq.n	8004650 <HAL_ADC_ConfigChannel+0xa8>
 800464e:	e091      	b.n	8004774 <HAL_ADC_ConfigChannel+0x1cc>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2202      	movs	r2, #2
 8004656:	4013      	ands	r3, r2
 8004658:	d000      	beq.n	800465c <HAL_ADC_ConfigChannel+0xb4>
 800465a:	e089      	b.n	8004770 <HAL_ADC_ConfigChannel+0x1c8>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2204      	movs	r2, #4
 8004662:	4013      	ands	r3, r2
 8004664:	d000      	beq.n	8004668 <HAL_ADC_ConfigChannel+0xc0>
 8004666:	e081      	b.n	800476c <HAL_ADC_ConfigChannel+0x1c4>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2208      	movs	r2, #8
 800466e:	4013      	ands	r3, r2
 8004670:	d000      	beq.n	8004674 <HAL_ADC_ConfigChannel+0xcc>
 8004672:	e079      	b.n	8004768 <HAL_ADC_ConfigChannel+0x1c0>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2210      	movs	r2, #16
 800467a:	4013      	ands	r3, r2
 800467c:	d000      	beq.n	8004680 <HAL_ADC_ConfigChannel+0xd8>
 800467e:	e071      	b.n	8004764 <HAL_ADC_ConfigChannel+0x1bc>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2220      	movs	r2, #32
 8004686:	4013      	ands	r3, r2
 8004688:	d000      	beq.n	800468c <HAL_ADC_ConfigChannel+0xe4>
 800468a:	e069      	b.n	8004760 <HAL_ADC_ConfigChannel+0x1b8>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2240      	movs	r2, #64	@ 0x40
 8004692:	4013      	ands	r3, r2
 8004694:	d000      	beq.n	8004698 <HAL_ADC_ConfigChannel+0xf0>
 8004696:	e061      	b.n	800475c <HAL_ADC_ConfigChannel+0x1b4>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2280      	movs	r2, #128	@ 0x80
 800469e:	4013      	ands	r3, r2
 80046a0:	d000      	beq.n	80046a4 <HAL_ADC_ConfigChannel+0xfc>
 80046a2:	e059      	b.n	8004758 <HAL_ADC_ConfigChannel+0x1b0>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4013      	ands	r3, r2
 80046ae:	d151      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x1ac>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4013      	ands	r3, r2
 80046ba:	d149      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x1a8>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4013      	ands	r3, r2
 80046c6:	d141      	bne.n	800474c <HAL_ADC_ConfigChannel+0x1a4>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4013      	ands	r3, r2
 80046d2:	d139      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x1a0>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	2380      	movs	r3, #128	@ 0x80
 80046da:	015b      	lsls	r3, r3, #5
 80046dc:	4013      	ands	r3, r2
 80046de:	d131      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x19c>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	019b      	lsls	r3, r3, #6
 80046e8:	4013      	ands	r3, r2
 80046ea:	d129      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x198>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2380      	movs	r3, #128	@ 0x80
 80046f2:	01db      	lsls	r3, r3, #7
 80046f4:	4013      	ands	r3, r2
 80046f6:	d121      	bne.n	800473c <HAL_ADC_ConfigChannel+0x194>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	4013      	ands	r3, r2
 8004702:	d119      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x190>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2380      	movs	r3, #128	@ 0x80
 800470a:	025b      	lsls	r3, r3, #9
 800470c:	4013      	ands	r3, r2
 800470e:	d111      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x18c>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	4013      	ands	r3, r2
 800471a:	d109      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x188>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2380      	movs	r3, #128	@ 0x80
 8004722:	02db      	lsls	r3, r3, #11
 8004724:	4013      	ands	r3, r2
 8004726:	d001      	beq.n	800472c <HAL_ADC_ConfigChannel+0x184>
 8004728:	2312      	movs	r3, #18
 800472a:	e024      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 800472c:	2300      	movs	r3, #0
 800472e:	e022      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004730:	2311      	movs	r3, #17
 8004732:	e020      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004734:	2310      	movs	r3, #16
 8004736:	e01e      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004738:	230f      	movs	r3, #15
 800473a:	e01c      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 800473c:	230e      	movs	r3, #14
 800473e:	e01a      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004740:	230d      	movs	r3, #13
 8004742:	e018      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004744:	230c      	movs	r3, #12
 8004746:	e016      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004748:	230b      	movs	r3, #11
 800474a:	e014      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 800474c:	230a      	movs	r3, #10
 800474e:	e012      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004750:	2309      	movs	r3, #9
 8004752:	e010      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004754:	2308      	movs	r3, #8
 8004756:	e00e      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004758:	2307      	movs	r3, #7
 800475a:	e00c      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 800475c:	2306      	movs	r3, #6
 800475e:	e00a      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004760:	2305      	movs	r3, #5
 8004762:	e008      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004764:	2304      	movs	r3, #4
 8004766:	e006      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004768:	2303      	movs	r3, #3
 800476a:	e004      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 800476c:	2302      	movs	r3, #2
 800476e:	e002      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ce>
 8004774:	2300      	movs	r3, #0
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	6852      	ldr	r2, [r2, #4]
 800477a:	201f      	movs	r0, #31
 800477c:	4002      	ands	r2, r0
 800477e:	4093      	lsls	r3, r2
 8004780:	000a      	movs	r2, r1
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	429a      	cmp	r2, r3
 8004796:	d808      	bhi.n	80047aa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	001a      	movs	r2, r3
 80047a6:	f7ff facf 	bl	8003d48 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	001a      	movs	r2, r3
 80047b8:	f7ff fb16 	bl	8003de8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db00      	blt.n	80047c6 <HAL_ADC_ConfigChannel+0x21e>
 80047c4:	e0bc      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047c6:	4b50      	ldr	r3, [pc, #320]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7ff fa6b 	bl	8003ca4 <LL_ADC_GetCommonPathInternalCh>
 80047ce:	0003      	movs	r3, r0
 80047d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a4d      	ldr	r2, [pc, #308]	@ (800490c <HAL_ADC_ConfigChannel+0x364>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d122      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047e4:	d11d      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2280      	movs	r2, #128	@ 0x80
 80047ea:	0412      	lsls	r2, r2, #16
 80047ec:	4313      	orrs	r3, r2
 80047ee:	4a46      	ldr	r2, [pc, #280]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 80047f0:	0019      	movs	r1, r3
 80047f2:	0010      	movs	r0, r2
 80047f4:	f7ff fa42 	bl	8003c7c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047f8:	4b45      	ldr	r3, [pc, #276]	@ (8004910 <HAL_ADC_ConfigChannel+0x368>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4945      	ldr	r1, [pc, #276]	@ (8004914 <HAL_ADC_ConfigChannel+0x36c>)
 80047fe:	0018      	movs	r0, r3
 8004800:	f7fb fc9c 	bl	800013c <__udivsi3>
 8004804:	0003      	movs	r3, r0
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	0013      	movs	r3, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	189b      	adds	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004812:	e002      	b.n	800481a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f9      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004820:	e08e      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3c      	ldr	r2, [pc, #240]	@ (8004918 <HAL_ADC_ConfigChannel+0x370>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d10e      	bne.n	800484a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	045b      	lsls	r3, r3, #17
 8004832:	4013      	ands	r3, r2
 8004834:	d109      	bne.n	800484a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2280      	movs	r2, #128	@ 0x80
 800483a:	0452      	lsls	r2, r2, #17
 800483c:	4313      	orrs	r3, r2
 800483e:	4a32      	ldr	r2, [pc, #200]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 8004840:	0019      	movs	r1, r3
 8004842:	0010      	movs	r0, r2
 8004844:	f7ff fa1a 	bl	8003c7c <LL_ADC_SetCommonPathInternalCh>
 8004848:	e07a      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a33      	ldr	r2, [pc, #204]	@ (800491c <HAL_ADC_ConfigChannel+0x374>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d000      	beq.n	8004856 <HAL_ADC_ConfigChannel+0x2ae>
 8004854:	e074      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	03db      	lsls	r3, r3, #15
 800485c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800485e:	d000      	beq.n	8004862 <HAL_ADC_ConfigChannel+0x2ba>
 8004860:	e06e      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2280      	movs	r2, #128	@ 0x80
 8004866:	03d2      	lsls	r2, r2, #15
 8004868:	4313      	orrs	r3, r2
 800486a:	4a27      	ldr	r2, [pc, #156]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 800486c:	0019      	movs	r1, r3
 800486e:	0010      	movs	r0, r2
 8004870:	f7ff fa04 	bl	8003c7c <LL_ADC_SetCommonPathInternalCh>
 8004874:	e064      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	429a      	cmp	r2, r3
 8004880:	d004      	beq.n	800488c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004886:	4a1f      	ldr	r2, [pc, #124]	@ (8004904 <HAL_ADC_ConfigChannel+0x35c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d107      	bne.n	800489c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0019      	movs	r1, r3
 8004896:	0010      	movs	r0, r2
 8004898:	f7ff fa87 	bl	8003daa <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	da4d      	bge.n	8004940 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a4:	4b18      	ldr	r3, [pc, #96]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7ff f9fc 	bl	8003ca4 <LL_ADC_GetCommonPathInternalCh>
 80048ac:	0003      	movs	r3, r0
 80048ae:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a15      	ldr	r2, [pc, #84]	@ (800490c <HAL_ADC_ConfigChannel+0x364>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4a18      	ldr	r2, [pc, #96]	@ (8004920 <HAL_ADC_ConfigChannel+0x378>)
 80048be:	4013      	ands	r3, r2
 80048c0:	4a11      	ldr	r2, [pc, #68]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 80048c2:	0019      	movs	r1, r3
 80048c4:	0010      	movs	r0, r2
 80048c6:	f7ff f9d9 	bl	8003c7c <LL_ADC_SetCommonPathInternalCh>
 80048ca:	e039      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a11      	ldr	r2, [pc, #68]	@ (8004918 <HAL_ADC_ConfigChannel+0x370>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4a12      	ldr	r2, [pc, #72]	@ (8004924 <HAL_ADC_ConfigChannel+0x37c>)
 80048da:	4013      	ands	r3, r2
 80048dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 80048de:	0019      	movs	r1, r3
 80048e0:	0010      	movs	r0, r2
 80048e2:	f7ff f9cb 	bl	8003c7c <LL_ADC_SetCommonPathInternalCh>
 80048e6:	e02b      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a0b      	ldr	r2, [pc, #44]	@ (800491c <HAL_ADC_ConfigChannel+0x374>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d126      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <HAL_ADC_ConfigChannel+0x380>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	4a03      	ldr	r2, [pc, #12]	@ (8004908 <HAL_ADC_ConfigChannel+0x360>)
 80048fa:	0019      	movs	r1, r3
 80048fc:	0010      	movs	r0, r2
 80048fe:	f7ff f9bd 	bl	8003c7c <LL_ADC_SetCommonPathInternalCh>
 8004902:	e01d      	b.n	8004940 <HAL_ADC_ConfigChannel+0x398>
 8004904:	80000004 	.word	0x80000004
 8004908:	40012708 	.word	0x40012708
 800490c:	b0001000 	.word	0xb0001000
 8004910:	20000064 	.word	0x20000064
 8004914:	00030d40 	.word	0x00030d40
 8004918:	b8004000 	.word	0xb8004000
 800491c:	b4002000 	.word	0xb4002000
 8004920:	ff7fffff 	.word	0xff7fffff
 8004924:	feffffff 	.word	0xfeffffff
 8004928:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004930:	2220      	movs	r2, #32
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004938:	2317      	movs	r3, #23
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2254      	movs	r2, #84	@ 0x54
 8004944:	2100      	movs	r1, #0
 8004946:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004948:	2317      	movs	r3, #23
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b006      	add	sp, #24
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)

08004958 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004960:	2300      	movs	r3, #0
 8004962:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	0018      	movs	r0, r3
 800496a:	f7ff faa5 	bl	8003eb8 <LL_ADC_IsEnabled>
 800496e:	1e03      	subs	r3, r0, #0
 8004970:	d000      	beq.n	8004974 <ADC_Enable+0x1c>
 8004972:	e069      	b.n	8004a48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4a36      	ldr	r2, [pc, #216]	@ (8004a54 <ADC_Enable+0xfc>)
 800497c:	4013      	ands	r3, r2
 800497e:	d00d      	beq.n	800499c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004984:	2210      	movs	r2, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004990:	2201      	movs	r2, #1
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e056      	b.n	8004a4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7ff fa65 	bl	8003e70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80049a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a58 <ADC_Enable+0x100>)
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff f97b 	bl	8003ca4 <LL_ADC_GetCommonPathInternalCh>
 80049ae:	0002      	movs	r2, r0
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	4013      	ands	r3, r2
 80049b6:	d00f      	beq.n	80049d8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049b8:	4b28      	ldr	r3, [pc, #160]	@ (8004a5c <ADC_Enable+0x104>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4928      	ldr	r1, [pc, #160]	@ (8004a60 <ADC_Enable+0x108>)
 80049be:	0018      	movs	r0, r3
 80049c0:	f7fb fbbc 	bl	800013c <__udivsi3>
 80049c4:	0003      	movs	r3, r0
 80049c6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80049c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049ca:	e002      	b.n	80049d2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f9      	bne.n	80049cc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7e5b      	ldrb	r3, [r3, #25]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d033      	beq.n	8004a48 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80049e0:	f7ff f91e 	bl	8003c20 <HAL_GetTick>
 80049e4:	0003      	movs	r3, r0
 80049e6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e8:	e027      	b.n	8004a3a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7ff fa62 	bl	8003eb8 <LL_ADC_IsEnabled>
 80049f4:	1e03      	subs	r3, r0, #0
 80049f6:	d104      	bne.n	8004a02 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7ff fa37 	bl	8003e70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a02:	f7ff f90d 	bl	8003c20 <HAL_GetTick>
 8004a06:	0002      	movs	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d914      	bls.n	8004a3a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2201      	movs	r2, #1
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d00d      	beq.n	8004a3a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a22:	2210      	movs	r2, #16
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2e:	2201      	movs	r2, #1
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e007      	b.n	8004a4a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d1d0      	bne.n	80049ea <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b004      	add	sp, #16
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	80000017 	.word	0x80000017
 8004a58:	40012708 	.word	0x40012708
 8004a5c:	20000064 	.word	0x20000064
 8004a60:	00030d40 	.word	0x00030d40

08004a64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7ff fa32 	bl	8003eda <LL_ADC_IsDisableOngoing>
 8004a76:	0003      	movs	r3, r0
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7ff fa1a 	bl	8003eb8 <LL_ADC_IsEnabled>
 8004a84:	1e03      	subs	r3, r0, #0
 8004a86:	d046      	beq.n	8004b16 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d143      	bne.n	8004b16 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2205      	movs	r2, #5
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10d      	bne.n	8004ab8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff f9f7 	bl	8003e94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aae:	f7ff f8b7 	bl	8003c20 <HAL_GetTick>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ab6:	e028      	b.n	8004b0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abc:	2210      	movs	r2, #16
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac8:	2201      	movs	r2, #1
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e021      	b.n	8004b18 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ad4:	f7ff f8a4 	bl	8003c20 <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d913      	bls.n	8004b0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4013      	ands	r3, r2
 8004aec:	d00d      	beq.n	8004b0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af2:	2210      	movs	r2, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afe:	2201      	movs	r2, #1
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e006      	b.n	8004b18 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2201      	movs	r2, #1
 8004b12:	4013      	ands	r3, r2
 8004b14:	d1de      	bne.n	8004ad4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b004      	add	sp, #16
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <LL_ADC_GetCommonClock>:
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	23f0      	movs	r3, #240	@ 0xf0
 8004b2e:	039b      	lsls	r3, r3, #14
 8004b30:	4013      	ands	r3, r2
}
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b002      	add	sp, #8
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <LL_ADC_GetClock>:
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	0f9b      	lsrs	r3, r3, #30
 8004b48:	079b      	lsls	r3, r3, #30
}
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b002      	add	sp, #8
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <LL_ADC_SetCalibrationFactor>:
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	22b4      	movs	r2, #180	@ 0xb4
 8004b60:	589b      	ldr	r3, [r3, r2]
 8004b62:	227f      	movs	r2, #127	@ 0x7f
 8004b64:	4393      	bics	r3, r2
 8004b66:	001a      	movs	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	21b4      	movs	r1, #180	@ 0xb4
 8004b70:	505a      	str	r2, [r3, r1]
}
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <LL_ADC_GetCalibrationFactor>:
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	22b4      	movs	r2, #180	@ 0xb4
 8004b86:	589b      	ldr	r3, [r3, r2]
 8004b88:	227f      	movs	r2, #127	@ 0x7f
 8004b8a:	4013      	ands	r3, r2
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <LL_ADC_Enable>:
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a04      	ldr	r2, [pc, #16]	@ (8004bb4 <LL_ADC_Enable+0x20>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	46c0      	nop			@ (mov r8, r8)
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	7fffffe8 	.word	0x7fffffe8

08004bb8 <LL_ADC_Disable>:
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a04      	ldr	r2, [pc, #16]	@ (8004bd8 <LL_ADC_Disable+0x20>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2202      	movs	r2, #2
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	7fffffe8 	.word	0x7fffffe8

08004bdc <LL_ADC_IsEnabled>:
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2201      	movs	r2, #1
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <LL_ADC_IsEnabled+0x18>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <LL_ADC_IsEnabled+0x1a>
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <LL_ADC_StartCalibration>:
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a05      	ldr	r2, [pc, #20]	@ (8004c24 <LL_ADC_StartCalibration+0x24>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2280      	movs	r2, #128	@ 0x80
 8004c12:	0612      	lsls	r2, r2, #24
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	609a      	str	r2, [r3, #8]
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	7fffffe8 	.word	0x7fffffe8

08004c28 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	0fdb      	lsrs	r3, r3, #31
 8004c36:	07da      	lsls	r2, r3, #31
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	061b      	lsls	r3, r3, #24
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d101      	bne.n	8004c44 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b08b      	sub	sp, #44	@ 0x2c
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2254      	movs	r2, #84	@ 0x54
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_ADCEx_Calibration_Start+0x1e>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e0dd      	b.n	8004e2a <HAL_ADCEx_Calibration_Start+0x1da>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2254      	movs	r2, #84	@ 0x54
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c76:	231f      	movs	r3, #31
 8004c78:	18fc      	adds	r4, r7, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7ff fef1 	bl	8004a64 <ADC_Disable>
 8004c82:	0003      	movs	r3, r0
 8004c84:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f7ff ffa6 	bl	8004bdc <LL_ADC_IsEnabled>
 8004c90:	1e03      	subs	r3, r0, #0
 8004c92:	d000      	beq.n	8004c96 <HAL_ADCEx_Calibration_Start+0x46>
 8004c94:	e0bc      	b.n	8004e10 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9a:	4a66      	ldr	r2, [pc, #408]	@ (8004e34 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a62      	ldr	r2, [pc, #392]	@ (8004e38 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	495f      	ldr	r1, [pc, #380]	@ (8004e3c <HAL_ADCEx_Calibration_Start+0x1ec>)
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc6:	e02d      	b.n	8004d24 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7ff ff97 	bl	8004c00 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cd2:	e014      	b.n	8004cfe <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a58      	ldr	r2, [pc, #352]	@ (8004e40 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d90d      	bls.n	8004cfe <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce6:	2212      	movs	r2, #18
 8004ce8:	4393      	bics	r3, r2
 8004cea:	2210      	movs	r2, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2254      	movs	r2, #84	@ 0x54
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e095      	b.n	8004e2a <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7ff ff90 	bl	8004c28 <LL_ADC_IsCalibrationOnGoing>
 8004d08:	1e03      	subs	r3, r0, #0
 8004d0a:	d1e3      	bne.n	8004cd4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7ff ff32 	bl	8004b7a <LL_ADC_GetCalibrationFactor>
 8004d16:	0002      	movs	r2, r0
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	3301      	adds	r3, #1
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	2b07      	cmp	r3, #7
 8004d28:	d9ce      	bls.n	8004cc8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004d2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d2c:	6a38      	ldr	r0, [r7, #32]
 8004d2e:	f7fb fa05 	bl	800013c <__udivsi3>
 8004d32:	0003      	movs	r3, r0
 8004d34:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7ff ff2a 	bl	8004b94 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f7ff fef8 	bl	8004b3a <LL_ADC_GetClock>
 8004d4a:	1e03      	subs	r3, r0, #0
 8004d4c:	d11b      	bne.n	8004d86 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e44 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff fee5 	bl	8004b20 <LL_ADC_GetCommonClock>
 8004d56:	0003      	movs	r3, r0
 8004d58:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	23e0      	movs	r3, #224	@ 0xe0
 8004d5e:	035b      	lsls	r3, r3, #13
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d310      	bcc.n	8004d86 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	0c9b      	lsrs	r3, r3, #18
 8004d68:	3b03      	subs	r3, #3
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	0013      	movs	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8004d78:	e002      	b.n	8004d80 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f9      	bne.n	8004d7a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	0011      	movs	r1, r2
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f7ff fedf 	bl	8004b52 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff ff0d 	bl	8004bb8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d9e:	f7fe ff3f 	bl	8003c20 <HAL_GetTick>
 8004da2:	0003      	movs	r3, r0
 8004da4:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004da6:	e01b      	b.n	8004de0 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004da8:	f7fe ff3a 	bl	8003c20 <HAL_GetTick>
 8004dac:	0002      	movs	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d914      	bls.n	8004de0 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7ff ff0e 	bl	8004bdc <LL_ADC_IsEnabled>
 8004dc0:	1e03      	subs	r3, r0, #0
 8004dc2:	d00d      	beq.n	8004de0 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc8:	2210      	movs	r2, #16
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e024      	b.n	8004e2a <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f7ff fef9 	bl	8004bdc <LL_ADC_IsEnabled>
 8004dea:	1e03      	subs	r3, r0, #0
 8004dec:	d1dc      	bne.n	8004da8 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68d9      	ldr	r1, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e02:	2203      	movs	r2, #3
 8004e04:	4393      	bics	r3, r2
 8004e06:	2201      	movs	r2, #1
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e0e:	e005      	b.n	8004e1c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	2210      	movs	r2, #16
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2254      	movs	r2, #84	@ 0x54
 8004e20:	2100      	movs	r1, #0
 8004e22:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004e24:	231f      	movs	r3, #31
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	781b      	ldrb	r3, [r3, #0]
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b00b      	add	sp, #44	@ 0x2c
 8004e30:	bd90      	pop	{r4, r7, pc}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	fffffefd 	.word	0xfffffefd
 8004e38:	00008003 	.word	0x00008003
 8004e3c:	ffff7ffc 	.word	0xffff7ffc
 8004e40:	0002f1ff 	.word	0x0002f1ff
 8004e44:	40012708 	.word	0x40012708

08004e48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004e60:	46c0      	nop			@ (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e70:	46c0      	nop			@ (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b002      	add	sp, #8
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004e80:	46c0      	nop			@ (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b002      	add	sp, #8
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	0002      	movs	r2, r0
 8004e90:	1dfb      	adds	r3, r7, #7
 8004e92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e9a:	d809      	bhi.n	8004eb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9c:	1dfb      	adds	r3, r7, #7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	231f      	movs	r3, #31
 8004ea4:	401a      	ands	r2, r3
 8004ea6:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <__NVIC_EnableIRQ+0x30>)
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4091      	lsls	r1, r2
 8004eac:	000a      	movs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000e100 	.word	0xe000e100

08004ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	0002      	movs	r2, r0
 8004ec4:	6039      	str	r1, [r7, #0]
 8004ec6:	1dfb      	adds	r3, r7, #7
 8004ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004eca:	1dfb      	adds	r3, r7, #7
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ed0:	d828      	bhi.n	8004f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f90 <__NVIC_SetPriority+0xd4>)
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	33c0      	adds	r3, #192	@ 0xc0
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	589b      	ldr	r3, [r3, r2]
 8004ee2:	1dfa      	adds	r2, r7, #7
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	2203      	movs	r2, #3
 8004eea:	400a      	ands	r2, r1
 8004eec:	00d2      	lsls	r2, r2, #3
 8004eee:	21ff      	movs	r1, #255	@ 0xff
 8004ef0:	4091      	lsls	r1, r2
 8004ef2:	000a      	movs	r2, r1
 8004ef4:	43d2      	mvns	r2, r2
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	019b      	lsls	r3, r3, #6
 8004efe:	22ff      	movs	r2, #255	@ 0xff
 8004f00:	401a      	ands	r2, r3
 8004f02:	1dfb      	adds	r3, r7, #7
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	0018      	movs	r0, r3
 8004f08:	2303      	movs	r3, #3
 8004f0a:	4003      	ands	r3, r0
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f10:	481f      	ldr	r0, [pc, #124]	@ (8004f90 <__NVIC_SetPriority+0xd4>)
 8004f12:	1dfb      	adds	r3, r7, #7
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b25b      	sxtb	r3, r3
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	33c0      	adds	r3, #192	@ 0xc0
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f22:	e031      	b.n	8004f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f24:	4a1b      	ldr	r2, [pc, #108]	@ (8004f94 <__NVIC_SetPriority+0xd8>)
 8004f26:	1dfb      	adds	r3, r7, #7
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	230f      	movs	r3, #15
 8004f2e:	400b      	ands	r3, r1
 8004f30:	3b08      	subs	r3, #8
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3306      	adds	r3, #6
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	18d3      	adds	r3, r2, r3
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1dfa      	adds	r2, r7, #7
 8004f40:	7812      	ldrb	r2, [r2, #0]
 8004f42:	0011      	movs	r1, r2
 8004f44:	2203      	movs	r2, #3
 8004f46:	400a      	ands	r2, r1
 8004f48:	00d2      	lsls	r2, r2, #3
 8004f4a:	21ff      	movs	r1, #255	@ 0xff
 8004f4c:	4091      	lsls	r1, r2
 8004f4e:	000a      	movs	r2, r1
 8004f50:	43d2      	mvns	r2, r2
 8004f52:	401a      	ands	r2, r3
 8004f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	22ff      	movs	r2, #255	@ 0xff
 8004f5c:	401a      	ands	r2, r3
 8004f5e:	1dfb      	adds	r3, r7, #7
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	0018      	movs	r0, r3
 8004f64:	2303      	movs	r3, #3
 8004f66:	4003      	ands	r3, r0
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f6c:	4809      	ldr	r0, [pc, #36]	@ (8004f94 <__NVIC_SetPriority+0xd8>)
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	001c      	movs	r4, r3
 8004f74:	230f      	movs	r3, #15
 8004f76:	4023      	ands	r3, r4
 8004f78:	3b08      	subs	r3, #8
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	3306      	adds	r3, #6
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	18c3      	adds	r3, r0, r3
 8004f84:	3304      	adds	r3, #4
 8004f86:	601a      	str	r2, [r3, #0]
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b003      	add	sp, #12
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	e000e100 	.word	0xe000e100
 8004f94:	e000ed00 	.word	0xe000ed00

08004f98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f9c:	f3bf 8f4f 	dsb	sy
}
 8004fa0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fa2:	4b04      	ldr	r3, [pc, #16]	@ (8004fb4 <__NVIC_SystemReset+0x1c>)
 8004fa4:	4a04      	ldr	r2, [pc, #16]	@ (8004fb8 <__NVIC_SystemReset+0x20>)
 8004fa6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fa8:	f3bf 8f4f 	dsb	sy
}
 8004fac:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	e7fd      	b.n	8004fae <__NVIC_SystemReset+0x16>
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	e000ed00 	.word	0xe000ed00
 8004fb8:	05fa0004 	.word	0x05fa0004

08004fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	1e5a      	subs	r2, r3, #1
 8004fc8:	2380      	movs	r3, #128	@ 0x80
 8004fca:	045b      	lsls	r3, r3, #17
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d301      	bcc.n	8004fd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e010      	b.n	8004ff6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005000 <SysTick_Config+0x44>)
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	3a01      	subs	r2, #1
 8004fda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fdc:	2301      	movs	r3, #1
 8004fde:	425b      	negs	r3, r3
 8004fe0:	2103      	movs	r1, #3
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7ff ff6a 	bl	8004ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <SysTick_Config+0x44>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fee:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <SysTick_Config+0x44>)
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b002      	add	sp, #8
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	e000e010 	.word	0xe000e010

08005004 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	210f      	movs	r1, #15
 8005010:	187b      	adds	r3, r7, r1
 8005012:	1c02      	adds	r2, r0, #0
 8005014:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	187b      	adds	r3, r7, r1
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b25b      	sxtb	r3, r3
 800501e:	0011      	movs	r1, r2
 8005020:	0018      	movs	r0, r3
 8005022:	f7ff ff4b 	bl	8004ebc <__NVIC_SetPriority>
}
 8005026:	46c0      	nop			@ (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b004      	add	sp, #16
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	0002      	movs	r2, r0
 8005036:	1dfb      	adds	r3, r7, #7
 8005038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800503a:	1dfb      	adds	r3, r7, #7
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b25b      	sxtb	r3, r3
 8005040:	0018      	movs	r0, r3
 8005042:	f7ff ff21 	bl	8004e88 <__NVIC_EnableIRQ>
}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b002      	add	sp, #8
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005052:	f7ff ffa1 	bl	8004f98 <__NVIC_SystemReset>

08005056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff ffab 	bl	8004fbc <SysTick_Config>
 8005066:	0003      	movs	r3, r0
}
 8005068:	0018      	movs	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	b002      	add	sp, #8
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e050      	b.n	8005124 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2225      	movs	r2, #37	@ 0x25
 8005086:	5c9b      	ldrb	r3, [r3, r2]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d008      	beq.n	80050a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2204      	movs	r2, #4
 8005092:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	2100      	movs	r1, #0
 800509a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e041      	b.n	8005124 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	210e      	movs	r1, #14
 80050ac:	438a      	bics	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	491c      	ldr	r1, [pc, #112]	@ (800512c <HAL_DMA_Abort+0xbc>)
 80050bc:	400a      	ands	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2101      	movs	r1, #1
 80050cc:	438a      	bics	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80050d0:	4b17      	ldr	r3, [pc, #92]	@ (8005130 <HAL_DMA_Abort+0xc0>)
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	221c      	movs	r2, #28
 80050da:	4013      	ands	r3, r2
 80050dc:	2201      	movs	r2, #1
 80050de:	409a      	lsls	r2, r3
 80050e0:	4b13      	ldr	r3, [pc, #76]	@ (8005130 <HAL_DMA_Abort+0xc0>)
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80050ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005102:	490a      	ldr	r1, [pc, #40]	@ (800512c <HAL_DMA_Abort+0xbc>)
 8005104:	400a      	ands	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005110:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2225      	movs	r2, #37	@ 0x25
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2224      	movs	r2, #36	@ 0x24
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fffffeff 	.word	0xfffffeff
 8005130:	40020000 	.word	0x40020000

08005134 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	210f      	movs	r1, #15
 800513e:	187b      	adds	r3, r7, r1
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2225      	movs	r2, #37	@ 0x25
 8005148:	5c9b      	ldrb	r3, [r3, r2]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d006      	beq.n	800515e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2204      	movs	r2, #4
 8005154:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005156:	187b      	adds	r3, r7, r1
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e049      	b.n	80051f2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	210e      	movs	r1, #14
 800516a:	438a      	bics	r2, r1
 800516c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2101      	movs	r1, #1
 800517a:	438a      	bics	r2, r1
 800517c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005188:	491d      	ldr	r1, [pc, #116]	@ (8005200 <HAL_DMA_Abort_IT+0xcc>)
 800518a:	400a      	ands	r2, r1
 800518c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800518e:	4b1d      	ldr	r3, [pc, #116]	@ (8005204 <HAL_DMA_Abort_IT+0xd0>)
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	221c      	movs	r2, #28
 8005198:	4013      	ands	r3, r2
 800519a:	2201      	movs	r2, #1
 800519c:	409a      	lsls	r2, r3
 800519e:	4b19      	ldr	r3, [pc, #100]	@ (8005204 <HAL_DMA_Abort_IT+0xd0>)
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c0:	490f      	ldr	r1, [pc, #60]	@ (8005200 <HAL_DMA_Abort_IT+0xcc>)
 80051c2:	400a      	ands	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80051ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2225      	movs	r2, #37	@ 0x25
 80051d4:	2101      	movs	r1, #1
 80051d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2224      	movs	r2, #36	@ 0x24
 80051dc:	2100      	movs	r1, #0
 80051de:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	0010      	movs	r0, r2
 80051f0:	4798      	blx	r3
    }
  }
  return status;
 80051f2:	230f      	movs	r3, #15
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	781b      	ldrb	r3, [r3, #0]
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b004      	add	sp, #16
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	fffffeff 	.word	0xfffffeff
 8005204:	40020000 	.word	0x40020000

08005208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005216:	e147      	b.n	80054a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2101      	movs	r1, #1
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4091      	lsls	r1, r2
 8005222:	000a      	movs	r2, r1
 8005224:	4013      	ands	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d100      	bne.n	8005230 <HAL_GPIO_Init+0x28>
 800522e:	e138      	b.n	80054a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2203      	movs	r2, #3
 8005236:	4013      	ands	r3, r2
 8005238:	2b01      	cmp	r3, #1
 800523a:	d005      	beq.n	8005248 <HAL_GPIO_Init+0x40>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2203      	movs	r2, #3
 8005242:	4013      	ands	r3, r2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d130      	bne.n	80052aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	2203      	movs	r2, #3
 8005254:	409a      	lsls	r2, r3
 8005256:	0013      	movs	r3, r2
 8005258:	43da      	mvns	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4013      	ands	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	409a      	lsls	r2, r3
 800526a:	0013      	movs	r3, r2
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800527e:	2201      	movs	r2, #1
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	409a      	lsls	r2, r3
 8005284:	0013      	movs	r3, r2
 8005286:	43da      	mvns	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	2201      	movs	r2, #1
 8005296:	401a      	ands	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	409a      	lsls	r2, r3
 800529c:	0013      	movs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d017      	beq.n	80052e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	2203      	movs	r2, #3
 80052c2:	409a      	lsls	r2, r3
 80052c4:	0013      	movs	r3, r2
 80052c6:	43da      	mvns	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	409a      	lsls	r2, r3
 80052d8:	0013      	movs	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2203      	movs	r2, #3
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d123      	bne.n	800533a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	08da      	lsrs	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3208      	adds	r2, #8
 80052fa:	0092      	lsls	r2, r2, #2
 80052fc:	58d3      	ldr	r3, [r2, r3]
 80052fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2207      	movs	r2, #7
 8005304:	4013      	ands	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	220f      	movs	r2, #15
 800530a:	409a      	lsls	r2, r3
 800530c:	0013      	movs	r3, r2
 800530e:	43da      	mvns	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4013      	ands	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2107      	movs	r1, #7
 800531e:	400b      	ands	r3, r1
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	409a      	lsls	r2, r3
 8005324:	0013      	movs	r3, r2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	08da      	lsrs	r2, r3, #3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3208      	adds	r2, #8
 8005334:	0092      	lsls	r2, r2, #2
 8005336:	6939      	ldr	r1, [r7, #16]
 8005338:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	2203      	movs	r2, #3
 8005346:	409a      	lsls	r2, r3
 8005348:	0013      	movs	r3, r2
 800534a:	43da      	mvns	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4013      	ands	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2203      	movs	r2, #3
 8005358:	401a      	ands	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	409a      	lsls	r2, r3
 8005360:	0013      	movs	r3, r2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	23c0      	movs	r3, #192	@ 0xc0
 8005374:	029b      	lsls	r3, r3, #10
 8005376:	4013      	ands	r3, r2
 8005378:	d100      	bne.n	800537c <HAL_GPIO_Init+0x174>
 800537a:	e092      	b.n	80054a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800537c:	4a50      	ldr	r2, [pc, #320]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	089b      	lsrs	r3, r3, #2
 8005382:	3318      	adds	r3, #24
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	589b      	ldr	r3, [r3, r2]
 8005388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2203      	movs	r2, #3
 800538e:	4013      	ands	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	220f      	movs	r2, #15
 8005394:	409a      	lsls	r2, r3
 8005396:	0013      	movs	r3, r2
 8005398:	43da      	mvns	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4013      	ands	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	23a0      	movs	r3, #160	@ 0xa0
 80053a4:	05db      	lsls	r3, r3, #23
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d013      	beq.n	80053d2 <HAL_GPIO_Init+0x1ca>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a45      	ldr	r2, [pc, #276]	@ (80054c4 <HAL_GPIO_Init+0x2bc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00d      	beq.n	80053ce <HAL_GPIO_Init+0x1c6>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a44      	ldr	r2, [pc, #272]	@ (80054c8 <HAL_GPIO_Init+0x2c0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <HAL_GPIO_Init+0x1c2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a43      	ldr	r2, [pc, #268]	@ (80054cc <HAL_GPIO_Init+0x2c4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d101      	bne.n	80053c6 <HAL_GPIO_Init+0x1be>
 80053c2:	2303      	movs	r3, #3
 80053c4:	e006      	b.n	80053d4 <HAL_GPIO_Init+0x1cc>
 80053c6:	2305      	movs	r3, #5
 80053c8:	e004      	b.n	80053d4 <HAL_GPIO_Init+0x1cc>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e002      	b.n	80053d4 <HAL_GPIO_Init+0x1cc>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_GPIO_Init+0x1cc>
 80053d2:	2300      	movs	r3, #0
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	2103      	movs	r1, #3
 80053d8:	400a      	ands	r2, r1
 80053da:	00d2      	lsls	r2, r2, #3
 80053dc:	4093      	lsls	r3, r2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80053e4:	4936      	ldr	r1, [pc, #216]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	3318      	adds	r3, #24
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053f2:	4b33      	ldr	r3, [pc, #204]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	43da      	mvns	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	035b      	lsls	r3, r3, #13
 800540a:	4013      	ands	r3, r2
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005416:	4b2a      	ldr	r3, [pc, #168]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800541c:	4b28      	ldr	r3, [pc, #160]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	43da      	mvns	r2, r3
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4013      	ands	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	2380      	movs	r3, #128	@ 0x80
 8005432:	039b      	lsls	r3, r3, #14
 8005434:	4013      	ands	r3, r2
 8005436:	d003      	beq.n	8005440 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005440:	4b1f      	ldr	r3, [pc, #124]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005446:	4a1e      	ldr	r2, [pc, #120]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 8005448:	2384      	movs	r3, #132	@ 0x84
 800544a:	58d3      	ldr	r3, [r2, r3]
 800544c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	43da      	mvns	r2, r3
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	2380      	movs	r3, #128	@ 0x80
 800545e:	029b      	lsls	r3, r3, #10
 8005460:	4013      	ands	r3, r2
 8005462:	d003      	beq.n	800546c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800546c:	4914      	ldr	r1, [pc, #80]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 800546e:	2284      	movs	r2, #132	@ 0x84
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005474:	4a12      	ldr	r2, [pc, #72]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	58d3      	ldr	r3, [r2, r3]
 800547a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	43da      	mvns	r2, r3
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	025b      	lsls	r3, r3, #9
 800548e:	4013      	ands	r3, r2
 8005490:	d003      	beq.n	800549a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800549a:	4909      	ldr	r1, [pc, #36]	@ (80054c0 <HAL_GPIO_Init+0x2b8>)
 800549c:	2280      	movs	r2, #128	@ 0x80
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	3301      	adds	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	40da      	lsrs	r2, r3
 80054b0:	1e13      	subs	r3, r2, #0
 80054b2:	d000      	beq.n	80054b6 <HAL_GPIO_Init+0x2ae>
 80054b4:	e6b0      	b.n	8005218 <HAL_GPIO_Init+0x10>
  }
}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	46c0      	nop			@ (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b006      	add	sp, #24
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021800 	.word	0x40021800
 80054c4:	50000400 	.word	0x50000400
 80054c8:	50000800 	.word	0x50000800
 80054cc:	50000c00 	.word	0x50000c00

080054d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	000a      	movs	r2, r1
 80054da:	1cbb      	adds	r3, r7, #2
 80054dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	1cba      	adds	r2, r7, #2
 80054e4:	8812      	ldrh	r2, [r2, #0]
 80054e6:	4013      	ands	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80054ea:	230f      	movs	r3, #15
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2201      	movs	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e003      	b.n	80054fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054f4:	230f      	movs	r3, #15
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80054fc:	230f      	movs	r3, #15
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	781b      	ldrb	r3, [r3, #0]
}
 8005502:	0018      	movs	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	b004      	add	sp, #16
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	0008      	movs	r0, r1
 8005514:	0011      	movs	r1, r2
 8005516:	1cbb      	adds	r3, r7, #2
 8005518:	1c02      	adds	r2, r0, #0
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	1c7b      	adds	r3, r7, #1
 800551e:	1c0a      	adds	r2, r1, #0
 8005520:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005522:	1c7b      	adds	r3, r7, #1
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800552a:	1cbb      	adds	r3, r7, #2
 800552c:	881a      	ldrh	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005532:	e003      	b.n	800553c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005534:	1cbb      	adds	r3, r7, #2
 8005536:	881a      	ldrh	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800553c:	46c0      	nop			@ (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	0002      	movs	r2, r0
 800554c:	1dbb      	adds	r3, r7, #6
 800554e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005550:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	1dba      	adds	r2, r7, #6
 8005556:	8812      	ldrh	r2, [r2, #0]
 8005558:	4013      	ands	r3, r2
 800555a:	d008      	beq.n	800556e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800555c:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800555e:	1dba      	adds	r2, r7, #6
 8005560:	8812      	ldrh	r2, [r2, #0]
 8005562:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005564:	1dbb      	adds	r3, r7, #6
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	0018      	movs	r0, r3
 800556a:	f000 f815 	bl	8005598 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800556e:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	1dba      	adds	r2, r7, #6
 8005574:	8812      	ldrh	r2, [r2, #0]
 8005576:	4013      	ands	r3, r2
 8005578:	d008      	beq.n	800558c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800557a:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800557c:	1dba      	adds	r2, r7, #6
 800557e:	8812      	ldrh	r2, [r2, #0]
 8005580:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005582:	1dbb      	adds	r3, r7, #6
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	0018      	movs	r0, r3
 8005588:	f7fd fbf6 	bl	8002d78 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b002      	add	sp, #8
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021800 	.word	0x40021800

08005598 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	0002      	movs	r2, r0
 80055a0:	1dbb      	adds	r3, r7, #6
 80055a2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80055b4:	4b19      	ldr	r3, [pc, #100]	@ (800561c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	4b17      	ldr	r3, [pc, #92]	@ (800561c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d11f      	bne.n	8005610 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80055d0:	4b14      	ldr	r3, [pc, #80]	@ (8005624 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	0013      	movs	r3, r2
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4912      	ldr	r1, [pc, #72]	@ (8005628 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80055de:	0018      	movs	r0, r3
 80055e0:	f7fa fdac 	bl	800013c <__udivsi3>
 80055e4:	0003      	movs	r3, r0
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055ea:	e008      	b.n	80055fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e001      	b.n	80055fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e009      	b.n	8005612 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	2380      	movs	r3, #128	@ 0x80
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	401a      	ands	r2, r3
 8005608:	2380      	movs	r3, #128	@ 0x80
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	429a      	cmp	r2, r3
 800560e:	d0ed      	beq.n	80055ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	0018      	movs	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	b004      	add	sp, #16
 8005618:	bd80      	pop	{r7, pc}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	40007000 	.word	0x40007000
 8005620:	fffff9ff 	.word	0xfffff9ff
 8005624:	20000064 	.word	0x20000064
 8005628:	000f4240 	.word	0x000f4240

0800562c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005630:	4b03      	ldr	r3, [pc, #12]	@ (8005640 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	23e0      	movs	r3, #224	@ 0xe0
 8005636:	01db      	lsls	r3, r3, #7
 8005638:	4013      	ands	r3, r2
}
 800563a:	0018      	movs	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000

08005644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e2fe      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	4013      	ands	r3, r2
 800565e:	d100      	bne.n	8005662 <HAL_RCC_OscConfig+0x1e>
 8005660:	e07c      	b.n	800575c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005662:	4bc3      	ldr	r3, [pc, #780]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2238      	movs	r2, #56	@ 0x38
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800566c:	4bc0      	ldr	r3, [pc, #768]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2203      	movs	r2, #3
 8005672:	4013      	ands	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b10      	cmp	r3, #16
 800567a:	d102      	bne.n	8005682 <HAL_RCC_OscConfig+0x3e>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d002      	beq.n	8005688 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d10b      	bne.n	80056a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005688:	4bb9      	ldr	r3, [pc, #740]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	2380      	movs	r3, #128	@ 0x80
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	4013      	ands	r3, r2
 8005692:	d062      	beq.n	800575a <HAL_RCC_OscConfig+0x116>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d15e      	bne.n	800575a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e2d9      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	2380      	movs	r3, #128	@ 0x80
 80056a6:	025b      	lsls	r3, r3, #9
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d107      	bne.n	80056bc <HAL_RCC_OscConfig+0x78>
 80056ac:	4bb0      	ldr	r3, [pc, #704]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4baf      	ldr	r3, [pc, #700]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056b2:	2180      	movs	r1, #128	@ 0x80
 80056b4:	0249      	lsls	r1, r1, #9
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e020      	b.n	80056fe <HAL_RCC_OscConfig+0xba>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	23a0      	movs	r3, #160	@ 0xa0
 80056c2:	02db      	lsls	r3, r3, #11
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d10e      	bne.n	80056e6 <HAL_RCC_OscConfig+0xa2>
 80056c8:	4ba9      	ldr	r3, [pc, #676]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056ce:	2180      	movs	r1, #128	@ 0x80
 80056d0:	02c9      	lsls	r1, r1, #11
 80056d2:	430a      	orrs	r2, r1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	4ba6      	ldr	r3, [pc, #664]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4ba5      	ldr	r3, [pc, #660]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056dc:	2180      	movs	r1, #128	@ 0x80
 80056de:	0249      	lsls	r1, r1, #9
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	e00b      	b.n	80056fe <HAL_RCC_OscConfig+0xba>
 80056e6:	4ba2      	ldr	r3, [pc, #648]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4ba1      	ldr	r3, [pc, #644]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056ec:	49a1      	ldr	r1, [pc, #644]	@ (8005974 <HAL_RCC_OscConfig+0x330>)
 80056ee:	400a      	ands	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	4b9f      	ldr	r3, [pc, #636]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b9e      	ldr	r3, [pc, #632]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80056f8:	499f      	ldr	r1, [pc, #636]	@ (8005978 <HAL_RCC_OscConfig+0x334>)
 80056fa:	400a      	ands	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d014      	beq.n	8005730 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fe fa8b 	bl	8003c20 <HAL_GetTick>
 800570a:	0003      	movs	r3, r0
 800570c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005710:	f7fe fa86 	bl	8003c20 <HAL_GetTick>
 8005714:	0002      	movs	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b64      	cmp	r3, #100	@ 0x64
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e298      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005722:	4b93      	ldr	r3, [pc, #588]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	2380      	movs	r3, #128	@ 0x80
 8005728:	029b      	lsls	r3, r3, #10
 800572a:	4013      	ands	r3, r2
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0xcc>
 800572e:	e015      	b.n	800575c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fe fa76 	bl	8003c20 <HAL_GetTick>
 8005734:	0003      	movs	r3, r0
 8005736:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800573a:	f7fe fa71 	bl	8003c20 <HAL_GetTick>
 800573e:	0002      	movs	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b64      	cmp	r3, #100	@ 0x64
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e283      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800574c:	4b88      	ldr	r3, [pc, #544]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	4013      	ands	r3, r2
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0xf6>
 8005758:	e000      	b.n	800575c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2202      	movs	r2, #2
 8005762:	4013      	ands	r3, r2
 8005764:	d100      	bne.n	8005768 <HAL_RCC_OscConfig+0x124>
 8005766:	e099      	b.n	800589c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005768:	4b81      	ldr	r3, [pc, #516]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2238      	movs	r2, #56	@ 0x38
 800576e:	4013      	ands	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005772:	4b7f      	ldr	r3, [pc, #508]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2203      	movs	r2, #3
 8005778:	4013      	ands	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b10      	cmp	r3, #16
 8005780:	d102      	bne.n	8005788 <HAL_RCC_OscConfig+0x144>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d002      	beq.n	800578e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d135      	bne.n	80057fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800578e:	4b78      	ldr	r3, [pc, #480]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	2380      	movs	r3, #128	@ 0x80
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4013      	ands	r3, r2
 8005798:	d005      	beq.n	80057a6 <HAL_RCC_OscConfig+0x162>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e256      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a6:	4b72      	ldr	r3, [pc, #456]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4a74      	ldr	r2, [pc, #464]	@ (800597c <HAL_RCC_OscConfig+0x338>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	0019      	movs	r1, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	021a      	lsls	r2, r3, #8
 80057b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80057b8:	430a      	orrs	r2, r1
 80057ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d112      	bne.n	80057e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80057c2:	4b6b      	ldr	r3, [pc, #428]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6e      	ldr	r2, [pc, #440]	@ (8005980 <HAL_RCC_OscConfig+0x33c>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	0019      	movs	r1, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	4b67      	ldr	r3, [pc, #412]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80057d6:	4b66      	ldr	r3, [pc, #408]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	0adb      	lsrs	r3, r3, #11
 80057dc:	2207      	movs	r2, #7
 80057de:	4013      	ands	r3, r2
 80057e0:	4a68      	ldr	r2, [pc, #416]	@ (8005984 <HAL_RCC_OscConfig+0x340>)
 80057e2:	40da      	lsrs	r2, r3
 80057e4:	4b68      	ldr	r3, [pc, #416]	@ (8005988 <HAL_RCC_OscConfig+0x344>)
 80057e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057e8:	4b68      	ldr	r3, [pc, #416]	@ (800598c <HAL_RCC_OscConfig+0x348>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f7fe f9bb 	bl	8003b68 <HAL_InitTick>
 80057f2:	1e03      	subs	r3, r0, #0
 80057f4:	d051      	beq.n	800589a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e22c      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d030      	beq.n	8005864 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005802:	4b5b      	ldr	r3, [pc, #364]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a5e      	ldr	r2, [pc, #376]	@ (8005980 <HAL_RCC_OscConfig+0x33c>)
 8005808:	4013      	ands	r3, r2
 800580a:	0019      	movs	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	4b57      	ldr	r3, [pc, #348]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005812:	430a      	orrs	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005816:	4b56      	ldr	r3, [pc, #344]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b55      	ldr	r3, [pc, #340]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800581c:	2180      	movs	r1, #128	@ 0x80
 800581e:	0049      	lsls	r1, r1, #1
 8005820:	430a      	orrs	r2, r1
 8005822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fe f9fc 	bl	8003c20 <HAL_GetTick>
 8005828:	0003      	movs	r3, r0
 800582a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800582e:	f7fe f9f7 	bl	8003c20 <HAL_GetTick>
 8005832:	0002      	movs	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e209      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005840:	4b4b      	ldr	r3, [pc, #300]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2380      	movs	r3, #128	@ 0x80
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	4013      	ands	r3, r2
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584c:	4b48      	ldr	r3, [pc, #288]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4a4a      	ldr	r2, [pc, #296]	@ (800597c <HAL_RCC_OscConfig+0x338>)
 8005852:	4013      	ands	r3, r2
 8005854:	0019      	movs	r1, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	4b44      	ldr	r3, [pc, #272]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	e01b      	b.n	800589c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005864:	4b42      	ldr	r3, [pc, #264]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b41      	ldr	r3, [pc, #260]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800586a:	4949      	ldr	r1, [pc, #292]	@ (8005990 <HAL_RCC_OscConfig+0x34c>)
 800586c:	400a      	ands	r2, r1
 800586e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fe f9d6 	bl	8003c20 <HAL_GetTick>
 8005874:	0003      	movs	r3, r0
 8005876:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587a:	f7fe f9d1 	bl	8003c20 <HAL_GetTick>
 800587e:	0002      	movs	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e1e3      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800588c:	4b38      	ldr	r3, [pc, #224]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	2380      	movs	r3, #128	@ 0x80
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4013      	ands	r3, r2
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x236>
 8005898:	e000      	b.n	800589c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800589a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2208      	movs	r2, #8
 80058a2:	4013      	ands	r3, r2
 80058a4:	d047      	beq.n	8005936 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80058a6:	4b32      	ldr	r3, [pc, #200]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2238      	movs	r2, #56	@ 0x38
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b18      	cmp	r3, #24
 80058b0:	d10a      	bne.n	80058c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80058b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80058b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b6:	2202      	movs	r2, #2
 80058b8:	4013      	ands	r3, r2
 80058ba:	d03c      	beq.n	8005936 <HAL_RCC_OscConfig+0x2f2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d138      	bne.n	8005936 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e1c5      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d019      	beq.n	8005904 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80058d0:	4b27      	ldr	r3, [pc, #156]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80058d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058d4:	4b26      	ldr	r3, [pc, #152]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80058d6:	2101      	movs	r1, #1
 80058d8:	430a      	orrs	r2, r1
 80058da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fe f9a0 	bl	8003c20 <HAL_GetTick>
 80058e0:	0003      	movs	r3, r0
 80058e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e6:	f7fe f99b 	bl	8003c20 <HAL_GetTick>
 80058ea:	0002      	movs	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e1ad      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 80058fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058fc:	2202      	movs	r2, #2
 80058fe:	4013      	ands	r3, r2
 8005900:	d0f1      	beq.n	80058e6 <HAL_RCC_OscConfig+0x2a2>
 8005902:	e018      	b.n	8005936 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005904:	4b1a      	ldr	r3, [pc, #104]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005906:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005908:	4b19      	ldr	r3, [pc, #100]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800590a:	2101      	movs	r1, #1
 800590c:	438a      	bics	r2, r1
 800590e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fe f986 	bl	8003c20 <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591a:	f7fe f981 	bl	8003c20 <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e193      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800592c:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005930:	2202      	movs	r2, #2
 8005932:	4013      	ands	r3, r2
 8005934:	d1f1      	bne.n	800591a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2204      	movs	r2, #4
 800593c:	4013      	ands	r3, r2
 800593e:	d100      	bne.n	8005942 <HAL_RCC_OscConfig+0x2fe>
 8005940:	e0c6      	b.n	8005ad0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005942:	231f      	movs	r3, #31
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800594a:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2238      	movs	r2, #56	@ 0x38
 8005950:	4013      	ands	r3, r2
 8005952:	2b20      	cmp	r3, #32
 8005954:	d11e      	bne.n	8005994 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005956:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <HAL_RCC_OscConfig+0x32c>)
 8005958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595a:	2202      	movs	r2, #2
 800595c:	4013      	ands	r3, r2
 800595e:	d100      	bne.n	8005962 <HAL_RCC_OscConfig+0x31e>
 8005960:	e0b6      	b.n	8005ad0 <HAL_RCC_OscConfig+0x48c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d000      	beq.n	800596c <HAL_RCC_OscConfig+0x328>
 800596a:	e0b1      	b.n	8005ad0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e171      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
 8005970:	40021000 	.word	0x40021000
 8005974:	fffeffff 	.word	0xfffeffff
 8005978:	fffbffff 	.word	0xfffbffff
 800597c:	ffff80ff 	.word	0xffff80ff
 8005980:	ffffc7ff 	.word	0xffffc7ff
 8005984:	00f42400 	.word	0x00f42400
 8005988:	20000064 	.word	0x20000064
 800598c:	20000068 	.word	0x20000068
 8005990:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005994:	4bb1      	ldr	r3, [pc, #708]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005998:	2380      	movs	r3, #128	@ 0x80
 800599a:	055b      	lsls	r3, r3, #21
 800599c:	4013      	ands	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_RCC_OscConfig+0x360>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <HAL_RCC_OscConfig+0x362>
 80059a4:	2300      	movs	r3, #0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d011      	beq.n	80059ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80059aa:	4bac      	ldr	r3, [pc, #688]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 80059ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ae:	4bab      	ldr	r3, [pc, #684]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 80059b0:	2180      	movs	r1, #128	@ 0x80
 80059b2:	0549      	lsls	r1, r1, #21
 80059b4:	430a      	orrs	r2, r1
 80059b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80059b8:	4ba8      	ldr	r3, [pc, #672]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 80059ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059bc:	2380      	movs	r3, #128	@ 0x80
 80059be:	055b      	lsls	r3, r3, #21
 80059c0:	4013      	ands	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80059c6:	231f      	movs	r3, #31
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	2201      	movs	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ce:	4ba4      	ldr	r3, [pc, #656]	@ (8005c60 <HAL_RCC_OscConfig+0x61c>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4013      	ands	r3, r2
 80059d8:	d11a      	bne.n	8005a10 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059da:	4ba1      	ldr	r3, [pc, #644]	@ (8005c60 <HAL_RCC_OscConfig+0x61c>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4ba0      	ldr	r3, [pc, #640]	@ (8005c60 <HAL_RCC_OscConfig+0x61c>)
 80059e0:	2180      	movs	r1, #128	@ 0x80
 80059e2:	0049      	lsls	r1, r1, #1
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80059e8:	f7fe f91a 	bl	8003c20 <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f2:	f7fe f915 	bl	8003c20 <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e127      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a04:	4b96      	ldr	r3, [pc, #600]	@ (8005c60 <HAL_RCC_OscConfig+0x61c>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2380      	movs	r3, #128	@ 0x80
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d106      	bne.n	8005a26 <HAL_RCC_OscConfig+0x3e2>
 8005a18:	4b90      	ldr	r3, [pc, #576]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a1e:	2101      	movs	r1, #1
 8005a20:	430a      	orrs	r2, r1
 8005a22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a24:	e01c      	b.n	8005a60 <HAL_RCC_OscConfig+0x41c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b05      	cmp	r3, #5
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCC_OscConfig+0x404>
 8005a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a32:	4b8a      	ldr	r3, [pc, #552]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a34:	2104      	movs	r1, #4
 8005a36:	430a      	orrs	r2, r1
 8005a38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a3a:	4b88      	ldr	r3, [pc, #544]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a3e:	4b87      	ldr	r3, [pc, #540]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a40:	2101      	movs	r1, #1
 8005a42:	430a      	orrs	r2, r1
 8005a44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a46:	e00b      	b.n	8005a60 <HAL_RCC_OscConfig+0x41c>
 8005a48:	4b84      	ldr	r3, [pc, #528]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a4c:	4b83      	ldr	r3, [pc, #524]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a4e:	2101      	movs	r1, #1
 8005a50:	438a      	bics	r2, r1
 8005a52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a54:	4b81      	ldr	r3, [pc, #516]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a58:	4b80      	ldr	r3, [pc, #512]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	438a      	bics	r2, r1
 8005a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d014      	beq.n	8005a92 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fe f8da 	bl	8003c20 <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a70:	e009      	b.n	8005a86 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a72:	f7fe f8d5 	bl	8003c20 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	4a79      	ldr	r2, [pc, #484]	@ (8005c64 <HAL_RCC_OscConfig+0x620>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e0e6      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a86:	4b75      	ldr	r3, [pc, #468]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x42e>
 8005a90:	e013      	b.n	8005aba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a92:	f7fe f8c5 	bl	8003c20 <HAL_GetTick>
 8005a96:	0003      	movs	r3, r0
 8005a98:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a9a:	e009      	b.n	8005ab0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9c:	f7fe f8c0 	bl	8003c20 <HAL_GetTick>
 8005aa0:	0002      	movs	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8005c64 <HAL_RCC_OscConfig+0x620>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e0d1      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005aba:	231f      	movs	r3, #31
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d105      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005ac4:	4b65      	ldr	r3, [pc, #404]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ac8:	4b64      	ldr	r3, [pc, #400]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005aca:	4967      	ldr	r1, [pc, #412]	@ (8005c68 <HAL_RCC_OscConfig+0x624>)
 8005acc:	400a      	ands	r2, r1
 8005ace:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d100      	bne.n	8005ada <HAL_RCC_OscConfig+0x496>
 8005ad8:	e0bb      	b.n	8005c52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ada:	4b60      	ldr	r3, [pc, #384]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2238      	movs	r2, #56	@ 0x38
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d100      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x4a4>
 8005ae6:	e07b      	b.n	8005be0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d156      	bne.n	8005b9e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af0:	4b5a      	ldr	r3, [pc, #360]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4b59      	ldr	r3, [pc, #356]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005af6:	495d      	ldr	r1, [pc, #372]	@ (8005c6c <HAL_RCC_OscConfig+0x628>)
 8005af8:	400a      	ands	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afc:	f7fe f890 	bl	8003c20 <HAL_GetTick>
 8005b00:	0003      	movs	r3, r0
 8005b02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b06:	f7fe f88b 	bl	8003c20 <HAL_GetTick>
 8005b0a:	0002      	movs	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e09d      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b18:	4b50      	ldr	r3, [pc, #320]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	049b      	lsls	r3, r3, #18
 8005b20:	4013      	ands	r3, r2
 8005b22:	d1f0      	bne.n	8005b06 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b24:	4b4d      	ldr	r3, [pc, #308]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a51      	ldr	r2, [pc, #324]	@ (8005c70 <HAL_RCC_OscConfig+0x62c>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b50:	431a      	orrs	r2, r3
 8005b52:	4b42      	ldr	r3, [pc, #264]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b54:	430a      	orrs	r2, r1
 8005b56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b58:	4b40      	ldr	r3, [pc, #256]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b5e:	2180      	movs	r1, #128	@ 0x80
 8005b60:	0449      	lsls	r1, r1, #17
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005b66:	4b3d      	ldr	r3, [pc, #244]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b6c:	2180      	movs	r1, #128	@ 0x80
 8005b6e:	0549      	lsls	r1, r1, #21
 8005b70:	430a      	orrs	r2, r1
 8005b72:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7fe f854 	bl	8003c20 <HAL_GetTick>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7e:	f7fe f84f 	bl	8003c20 <HAL_GetTick>
 8005b82:	0002      	movs	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e061      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b90:	4b32      	ldr	r3, [pc, #200]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	2380      	movs	r3, #128	@ 0x80
 8005b96:	049b      	lsls	r3, r3, #18
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x53a>
 8005b9c:	e059      	b.n	8005c52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005ba4:	4931      	ldr	r1, [pc, #196]	@ (8005c6c <HAL_RCC_OscConfig+0x628>)
 8005ba6:	400a      	ands	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fe f839 	bl	8003c20 <HAL_GetTick>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fe f834 	bl	8003c20 <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e046      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc6:	4b25      	ldr	r3, [pc, #148]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	2380      	movs	r3, #128	@ 0x80
 8005bcc:	049b      	lsls	r3, r3, #18
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005bd2:	4b22      	ldr	r3, [pc, #136]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	4b21      	ldr	r3, [pc, #132]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005bd8:	4926      	ldr	r1, [pc, #152]	@ (8005c74 <HAL_RCC_OscConfig+0x630>)
 8005bda:	400a      	ands	r2, r1
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	e038      	b.n	8005c52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e033      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005bec:	4b1b      	ldr	r3, [pc, #108]	@ (8005c5c <HAL_RCC_OscConfig+0x618>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d126      	bne.n	8005c4e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2270      	movs	r2, #112	@ 0x70
 8005c04:	401a      	ands	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d11f      	bne.n	8005c4e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	23fe      	movs	r3, #254	@ 0xfe
 8005c12:	01db      	lsls	r3, r3, #7
 8005c14:	401a      	ands	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d116      	bne.n	8005c4e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	23f8      	movs	r3, #248	@ 0xf8
 8005c24:	039b      	lsls	r3, r3, #14
 8005c26:	401a      	ands	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d10e      	bne.n	8005c4e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	23e0      	movs	r3, #224	@ 0xe0
 8005c34:	051b      	lsls	r3, r3, #20
 8005c36:	401a      	ands	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d106      	bne.n	8005c4e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	0f5b      	lsrs	r3, r3, #29
 8005c44:	075a      	lsls	r2, r3, #29
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d001      	beq.n	8005c52 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	0018      	movs	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b008      	add	sp, #32
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40007000 	.word	0x40007000
 8005c64:	00001388 	.word	0x00001388
 8005c68:	efffffff 	.word	0xefffffff
 8005c6c:	feffffff 	.word	0xfeffffff
 8005c70:	11c1808c 	.word	0x11c1808c
 8005c74:	eefefffc 	.word	0xeefefffc

08005c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0e9      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c8c:	4b76      	ldr	r3, [pc, #472]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2207      	movs	r2, #7
 8005c92:	4013      	ands	r3, r2
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d91e      	bls.n	8005cd8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9a:	4b73      	ldr	r3, [pc, #460]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2207      	movs	r2, #7
 8005ca0:	4393      	bics	r3, r2
 8005ca2:	0019      	movs	r1, r3
 8005ca4:	4b70      	ldr	r3, [pc, #448]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cac:	f7fd ffb8 	bl	8003c20 <HAL_GetTick>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005cb4:	e009      	b.n	8005cca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb6:	f7fd ffb3 	bl	8003c20 <HAL_GetTick>
 8005cba:	0002      	movs	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8005e6c <HAL_RCC_ClockConfig+0x1f4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e0ca      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2207      	movs	r2, #7
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1ee      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d015      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d006      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005cec:	4b60      	ldr	r3, [pc, #384]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	4b5f      	ldr	r3, [pc, #380]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005cf2:	21e0      	movs	r1, #224	@ 0xe0
 8005cf4:	01c9      	lsls	r1, r1, #7
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8005e74 <HAL_RCC_ClockConfig+0x1fc>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	0019      	movs	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	4b59      	ldr	r3, [pc, #356]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2201      	movs	r2, #1
 8005d14:	4013      	ands	r3, r2
 8005d16:	d057      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d107      	bne.n	8005d30 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d20:	4b53      	ldr	r3, [pc, #332]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d12b      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e097      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d38:	4b4d      	ldr	r3, [pc, #308]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	049b      	lsls	r3, r3, #18
 8005d40:	4013      	ands	r3, r2
 8005d42:	d11f      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e08b      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d107      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d50:	4b47      	ldr	r3, [pc, #284]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	2380      	movs	r3, #128	@ 0x80
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d113      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e07f      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d106      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d68:	4b41      	ldr	r3, [pc, #260]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d108      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e074      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d76:	4b3e      	ldr	r3, [pc, #248]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e06d      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d84:	4b3a      	ldr	r3, [pc, #232]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2207      	movs	r2, #7
 8005d8a:	4393      	bics	r3, r2
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	4b37      	ldr	r3, [pc, #220]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d98:	f7fd ff42 	bl	8003c20 <HAL_GetTick>
 8005d9c:	0003      	movs	r3, r0
 8005d9e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da0:	e009      	b.n	8005db6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da2:	f7fd ff3d 	bl	8003c20 <HAL_GetTick>
 8005da6:	0002      	movs	r2, r0
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	4a2f      	ldr	r2, [pc, #188]	@ (8005e6c <HAL_RCC_ClockConfig+0x1f4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e054      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db6:	4b2e      	ldr	r3, [pc, #184]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2238      	movs	r2, #56	@ 0x38
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d1ec      	bne.n	8005da2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2207      	movs	r2, #7
 8005dce:	4013      	ands	r3, r2
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d21e      	bcs.n	8005e14 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b24      	ldr	r3, [pc, #144]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2207      	movs	r2, #7
 8005ddc:	4393      	bics	r3, r2
 8005dde:	0019      	movs	r1, r3
 8005de0:	4b21      	ldr	r3, [pc, #132]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005de8:	f7fd ff1a 	bl	8003c20 <HAL_GetTick>
 8005dec:	0003      	movs	r3, r0
 8005dee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005df0:	e009      	b.n	8005e06 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df2:	f7fd ff15 	bl	8003c20 <HAL_GetTick>
 8005df6:	0002      	movs	r2, r0
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005e6c <HAL_RCC_ClockConfig+0x1f4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e02c      	b.n	8005e60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e06:	4b18      	ldr	r3, [pc, #96]	@ (8005e68 <HAL_RCC_ClockConfig+0x1f0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2207      	movs	r2, #7
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d1ee      	bne.n	8005df2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e1e:	4b14      	ldr	r3, [pc, #80]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	4a15      	ldr	r2, [pc, #84]	@ (8005e78 <HAL_RCC_ClockConfig+0x200>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	0019      	movs	r1, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	4b10      	ldr	r3, [pc, #64]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005e32:	f000 f829 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e36:	0001      	movs	r1, r0
 8005e38:	4b0d      	ldr	r3, [pc, #52]	@ (8005e70 <HAL_RCC_ClockConfig+0x1f8>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	220f      	movs	r2, #15
 8005e40:	401a      	ands	r2, r3
 8005e42:	4b0e      	ldr	r3, [pc, #56]	@ (8005e7c <HAL_RCC_ClockConfig+0x204>)
 8005e44:	0092      	lsls	r2, r2, #2
 8005e46:	58d3      	ldr	r3, [r2, r3]
 8005e48:	221f      	movs	r2, #31
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	000a      	movs	r2, r1
 8005e4e:	40da      	lsrs	r2, r3
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <HAL_RCC_ClockConfig+0x208>)
 8005e52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e54:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <HAL_RCC_ClockConfig+0x20c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7fd fe85 	bl	8003b68 <HAL_InitTick>
 8005e5e:	0003      	movs	r3, r0
}
 8005e60:	0018      	movs	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b004      	add	sp, #16
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40022000 	.word	0x40022000
 8005e6c:	00001388 	.word	0x00001388
 8005e70:	40021000 	.word	0x40021000
 8005e74:	fffff0ff 	.word	0xfffff0ff
 8005e78:	ffff8fff 	.word	0xffff8fff
 8005e7c:	0800a834 	.word	0x0800a834
 8005e80:	20000064 	.word	0x20000064
 8005e84:	20000068 	.word	0x20000068

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2238      	movs	r2, #56	@ 0x38
 8005e94:	4013      	ands	r3, r2
 8005e96:	d10f      	bne.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005e98:	4b39      	ldr	r3, [pc, #228]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0adb      	lsrs	r3, r3, #11
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	409a      	lsls	r2, r3
 8005ea6:	0013      	movs	r3, r2
 8005ea8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	4835      	ldr	r0, [pc, #212]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005eae:	f7fa f945 	bl	800013c <__udivsi3>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	e05d      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eb8:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2238      	movs	r2, #56	@ 0x38
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d102      	bne.n	8005eca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ec4:	4b30      	ldr	r3, [pc, #192]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	e054      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eca:	4b2d      	ldr	r3, [pc, #180]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2238      	movs	r2, #56	@ 0x38
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d138      	bne.n	8005f48 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2203      	movs	r2, #3
 8005edc:	4013      	ands	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ee0:	4b27      	ldr	r3, [pc, #156]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	2207      	movs	r2, #7
 8005ee8:	4013      	ands	r3, r2
 8005eea:	3301      	adds	r3, #1
 8005eec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d10d      	bne.n	8005f10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4824      	ldr	r0, [pc, #144]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ef8:	f7fa f920 	bl	800013c <__udivsi3>
 8005efc:	0003      	movs	r3, r0
 8005efe:	0019      	movs	r1, r3
 8005f00:	4b1f      	ldr	r3, [pc, #124]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	0a1b      	lsrs	r3, r3, #8
 8005f06:	227f      	movs	r2, #127	@ 0x7f
 8005f08:	4013      	ands	r3, r2
 8005f0a:	434b      	muls	r3, r1
 8005f0c:	617b      	str	r3, [r7, #20]
        break;
 8005f0e:	e00d      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	481c      	ldr	r0, [pc, #112]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f14:	f7fa f912 	bl	800013c <__udivsi3>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	4b18      	ldr	r3, [pc, #96]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	0a1b      	lsrs	r3, r3, #8
 8005f22:	227f      	movs	r2, #127	@ 0x7f
 8005f24:	4013      	ands	r3, r2
 8005f26:	434b      	muls	r3, r1
 8005f28:	617b      	str	r3, [r7, #20]
        break;
 8005f2a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005f2c:	4b14      	ldr	r3, [pc, #80]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	0f5b      	lsrs	r3, r3, #29
 8005f32:	2207      	movs	r2, #7
 8005f34:	4013      	ands	r3, r2
 8005f36:	3301      	adds	r3, #1
 8005f38:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f7fa f8fd 	bl	800013c <__udivsi3>
 8005f42:	0003      	movs	r3, r0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	e015      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005f48:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2238      	movs	r2, #56	@ 0x38
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d103      	bne.n	8005f5c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005f54:	2380      	movs	r3, #128	@ 0x80
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	e00b      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005f5c:	4b08      	ldr	r3, [pc, #32]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2238      	movs	r2, #56	@ 0x38
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b18      	cmp	r3, #24
 8005f66:	d103      	bne.n	8005f70 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005f68:	23fa      	movs	r3, #250	@ 0xfa
 8005f6a:	01db      	lsls	r3, r3, #7
 8005f6c:	613b      	str	r3, [r7, #16]
 8005f6e:	e001      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f74:	693b      	ldr	r3, [r7, #16]
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b006      	add	sp, #24
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	46c0      	nop			@ (mov r8, r8)
 8005f80:	40021000 	.word	0x40021000
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	007a1200 	.word	0x007a1200

08005f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f90:	4b02      	ldr	r3, [pc, #8]	@ (8005f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	0018      	movs	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	20000064 	.word	0x20000064

08005fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa0:	b5b0      	push	{r4, r5, r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005fa4:	f7ff fff2 	bl	8005f8c <HAL_RCC_GetHCLKFreq>
 8005fa8:	0004      	movs	r4, r0
 8005faa:	f7ff fb3f 	bl	800562c <LL_RCC_GetAPB1Prescaler>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	0b1a      	lsrs	r2, r3, #12
 8005fb2:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fb4:	0092      	lsls	r2, r2, #2
 8005fb6:	58d3      	ldr	r3, [r2, r3]
 8005fb8:	221f      	movs	r2, #31
 8005fba:	4013      	ands	r3, r2
 8005fbc:	40dc      	lsrs	r4, r3
 8005fbe:	0023      	movs	r3, r4
}
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	0800a874 	.word	0x0800a874

08005fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005fd4:	2313      	movs	r3, #19
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fdc:	2312      	movs	r3, #18
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	2380      	movs	r3, #128	@ 0x80
 8005fea:	029b      	lsls	r3, r3, #10
 8005fec:	4013      	ands	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005ff0:	e0a3      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff2:	2011      	movs	r0, #17
 8005ff4:	183b      	adds	r3, r7, r0
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffa:	4bc3      	ldr	r3, [pc, #780]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ffe:	2380      	movs	r3, #128	@ 0x80
 8006000:	055b      	lsls	r3, r3, #21
 8006002:	4013      	ands	r3, r2
 8006004:	d110      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006006:	4bc0      	ldr	r3, [pc, #768]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006008:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800600a:	4bbf      	ldr	r3, [pc, #764]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800600c:	2180      	movs	r1, #128	@ 0x80
 800600e:	0549      	lsls	r1, r1, #21
 8006010:	430a      	orrs	r2, r1
 8006012:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006014:	4bbc      	ldr	r3, [pc, #752]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006018:	2380      	movs	r3, #128	@ 0x80
 800601a:	055b      	lsls	r3, r3, #21
 800601c:	4013      	ands	r3, r2
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006022:	183b      	adds	r3, r7, r0
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006028:	4bb8      	ldr	r3, [pc, #736]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4bb7      	ldr	r3, [pc, #732]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800602e:	2180      	movs	r1, #128	@ 0x80
 8006030:	0049      	lsls	r1, r1, #1
 8006032:	430a      	orrs	r2, r1
 8006034:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006036:	f7fd fdf3 	bl	8003c20 <HAL_GetTick>
 800603a:	0003      	movs	r3, r0
 800603c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800603e:	e00b      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006040:	f7fd fdee 	bl	8003c20 <HAL_GetTick>
 8006044:	0002      	movs	r2, r0
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d904      	bls.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800604e:	2313      	movs	r3, #19
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	2203      	movs	r2, #3
 8006054:	701a      	strb	r2, [r3, #0]
        break;
 8006056:	e005      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006058:	4bac      	ldr	r3, [pc, #688]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	2380      	movs	r3, #128	@ 0x80
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4013      	ands	r3, r2
 8006062:	d0ed      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006064:	2313      	movs	r3, #19
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d154      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800606e:	4ba6      	ldr	r3, [pc, #664]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006070:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006072:	23c0      	movs	r3, #192	@ 0xc0
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4013      	ands	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d019      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	429a      	cmp	r2, r3
 8006088:	d014      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800608a:	4b9f      	ldr	r3, [pc, #636]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800608c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608e:	4aa0      	ldr	r2, [pc, #640]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006090:	4013      	ands	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006094:	4b9c      	ldr	r3, [pc, #624]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006098:	4b9b      	ldr	r3, [pc, #620]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800609a:	2180      	movs	r1, #128	@ 0x80
 800609c:	0249      	lsls	r1, r1, #9
 800609e:	430a      	orrs	r2, r1
 80060a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060a2:	4b99      	ldr	r3, [pc, #612]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060a6:	4b98      	ldr	r3, [pc, #608]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060a8:	499a      	ldr	r1, [pc, #616]	@ (8006314 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060ae:	4b96      	ldr	r3, [pc, #600]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2201      	movs	r2, #1
 80060b8:	4013      	ands	r3, r2
 80060ba:	d016      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fd fdb0 	bl	8003c20 <HAL_GetTick>
 80060c0:	0003      	movs	r3, r0
 80060c2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c4:	e00c      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fd fdab 	bl	8003c20 <HAL_GetTick>
 80060ca:	0002      	movs	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	4a91      	ldr	r2, [pc, #580]	@ (8006318 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d904      	bls.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80060d6:	2313      	movs	r3, #19
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	2203      	movs	r2, #3
 80060dc:	701a      	strb	r2, [r3, #0]
            break;
 80060de:	e004      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e0:	4b89      	ldr	r3, [pc, #548]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e4:	2202      	movs	r2, #2
 80060e6:	4013      	ands	r3, r2
 80060e8:	d0ed      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80060ea:	2313      	movs	r3, #19
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060f4:	4b84      	ldr	r3, [pc, #528]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f8:	4a85      	ldr	r2, [pc, #532]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	0019      	movs	r1, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006102:	4b81      	ldr	r3, [pc, #516]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006104:	430a      	orrs	r2, r1
 8006106:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006108:	e00c      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800610a:	2312      	movs	r3, #18
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	2213      	movs	r2, #19
 8006110:	18ba      	adds	r2, r7, r2
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e005      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	2312      	movs	r3, #18
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	2213      	movs	r2, #19
 800611e:	18ba      	adds	r2, r7, r2
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006124:	2311      	movs	r3, #17
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d105      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612e:	4b76      	ldr	r3, [pc, #472]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006132:	4b75      	ldr	r3, [pc, #468]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006134:	4979      	ldr	r1, [pc, #484]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006136:	400a      	ands	r2, r1
 8006138:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	4013      	ands	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006144:	4b70      	ldr	r3, [pc, #448]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006148:	2203      	movs	r2, #3
 800614a:	4393      	bics	r3, r2
 800614c:	0019      	movs	r1, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	4b6d      	ldr	r3, [pc, #436]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006154:	430a      	orrs	r2, r1
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2202      	movs	r2, #2
 800615e:	4013      	ands	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006162:	4b69      	ldr	r3, [pc, #420]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006166:	220c      	movs	r2, #12
 8006168:	4393      	bics	r3, r2
 800616a:	0019      	movs	r1, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	4b65      	ldr	r3, [pc, #404]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006172:	430a      	orrs	r2, r1
 8006174:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2210      	movs	r2, #16
 800617c:	4013      	ands	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006180:	4b61      	ldr	r3, [pc, #388]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006184:	4a66      	ldr	r2, [pc, #408]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006186:	4013      	ands	r3, r2
 8006188:	0019      	movs	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	4b5e      	ldr	r3, [pc, #376]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006190:	430a      	orrs	r2, r1
 8006192:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	2380      	movs	r3, #128	@ 0x80
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4013      	ands	r3, r2
 800619e:	d009      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061a0:	4b59      	ldr	r3, [pc, #356]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a4:	4a5f      	ldr	r2, [pc, #380]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	0019      	movs	r1, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	4b56      	ldr	r3, [pc, #344]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061b0:	430a      	orrs	r2, r1
 80061b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4013      	ands	r3, r2
 80061be:	d009      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061c0:	4b51      	ldr	r3, [pc, #324]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c4:	4a58      	ldr	r2, [pc, #352]	@ (8006328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	0019      	movs	r1, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	4b4e      	ldr	r3, [pc, #312]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061d0:	430a      	orrs	r2, r1
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2220      	movs	r2, #32
 80061da:	4013      	ands	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061de:	4b4a      	ldr	r3, [pc, #296]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e2:	4a52      	ldr	r2, [pc, #328]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	0019      	movs	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	4b46      	ldr	r3, [pc, #280]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061ee:	430a      	orrs	r2, r1
 80061f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	2380      	movs	r3, #128	@ 0x80
 80061f8:	01db      	lsls	r3, r3, #7
 80061fa:	4013      	ands	r3, r2
 80061fc:	d015      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061fe:	4b42      	ldr	r3, [pc, #264]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	0899      	lsrs	r1, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	4b3f      	ldr	r3, [pc, #252]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800620c:	430a      	orrs	r2, r1
 800620e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	2380      	movs	r3, #128	@ 0x80
 8006216:	05db      	lsls	r3, r3, #23
 8006218:	429a      	cmp	r2, r3
 800621a:	d106      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800621c:	4b3a      	ldr	r3, [pc, #232]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	4b39      	ldr	r3, [pc, #228]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006222:	2180      	movs	r1, #128	@ 0x80
 8006224:	0249      	lsls	r1, r1, #9
 8006226:	430a      	orrs	r2, r1
 8006228:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	031b      	lsls	r3, r3, #12
 8006232:	4013      	ands	r3, r2
 8006234:	d009      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006236:	4b34      	ldr	r3, [pc, #208]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	2240      	movs	r2, #64	@ 0x40
 800623c:	4393      	bics	r3, r2
 800623e:	0019      	movs	r1, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006244:	4b30      	ldr	r3, [pc, #192]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006246:	430a      	orrs	r2, r1
 8006248:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	2380      	movs	r3, #128	@ 0x80
 8006250:	039b      	lsls	r3, r3, #14
 8006252:	4013      	ands	r3, r2
 8006254:	d016      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006256:	4b2c      	ldr	r3, [pc, #176]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625a:	4a35      	ldr	r2, [pc, #212]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800625c:	4013      	ands	r3, r2
 800625e:	0019      	movs	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006264:	4b28      	ldr	r3, [pc, #160]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006266:	430a      	orrs	r2, r1
 8006268:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800626e:	2380      	movs	r3, #128	@ 0x80
 8006270:	03db      	lsls	r3, r3, #15
 8006272:	429a      	cmp	r2, r3
 8006274:	d106      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006276:	4b24      	ldr	r3, [pc, #144]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	4b23      	ldr	r3, [pc, #140]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800627c:	2180      	movs	r1, #128	@ 0x80
 800627e:	0449      	lsls	r1, r1, #17
 8006280:	430a      	orrs	r2, r1
 8006282:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	03db      	lsls	r3, r3, #15
 800628c:	4013      	ands	r3, r2
 800628e:	d016      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006290:	4b1d      	ldr	r3, [pc, #116]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006294:	4a27      	ldr	r2, [pc, #156]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006296:	4013      	ands	r3, r2
 8006298:	0019      	movs	r1, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629e:	4b1a      	ldr	r3, [pc, #104]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062a0:	430a      	orrs	r2, r1
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a8:	2380      	movs	r3, #128	@ 0x80
 80062aa:	045b      	lsls	r3, r3, #17
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d106      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80062b0:	4b15      	ldr	r3, [pc, #84]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	4b14      	ldr	r3, [pc, #80]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062b6:	2180      	movs	r1, #128	@ 0x80
 80062b8:	0449      	lsls	r1, r1, #17
 80062ba:	430a      	orrs	r2, r1
 80062bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	2380      	movs	r3, #128	@ 0x80
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	4013      	ands	r3, r2
 80062c8:	d016      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80062ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	0019      	movs	r1, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062da:	430a      	orrs	r2, r1
 80062dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	2380      	movs	r3, #128	@ 0x80
 80062e4:	01db      	lsls	r3, r3, #7
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d106      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80062ea:	4b07      	ldr	r3, [pc, #28]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	4b06      	ldr	r3, [pc, #24]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062f0:	2180      	movs	r1, #128	@ 0x80
 80062f2:	0249      	lsls	r1, r1, #9
 80062f4:	430a      	orrs	r2, r1
 80062f6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80062f8:	2312      	movs	r3, #18
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	781b      	ldrb	r3, [r3, #0]
}
 80062fe:	0018      	movs	r0, r3
 8006300:	46bd      	mov	sp, r7
 8006302:	b006      	add	sp, #24
 8006304:	bd80      	pop	{r7, pc}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	40021000 	.word	0x40021000
 800630c:	40007000 	.word	0x40007000
 8006310:	fffffcff 	.word	0xfffffcff
 8006314:	fffeffff 	.word	0xfffeffff
 8006318:	00001388 	.word	0x00001388
 800631c:	efffffff 	.word	0xefffffff
 8006320:	fffff3ff 	.word	0xfffff3ff
 8006324:	fff3ffff 	.word	0xfff3ffff
 8006328:	ffcfffff 	.word	0xffcfffff
 800632c:	ffffcfff 	.word	0xffffcfff
 8006330:	ffbfffff 	.word	0xffbfffff
 8006334:	feffffff 	.word	0xfeffffff
 8006338:	ffff3fff 	.word	0xffff3fff

0800633c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e0a8      	b.n	80064a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	2b00      	cmp	r3, #0
 8006354:	d109      	bne.n	800636a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	2382      	movs	r3, #130	@ 0x82
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	429a      	cmp	r2, r3
 8006360:	d009      	beq.n	8006376 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	61da      	str	r2, [r3, #28]
 8006368:	e005      	b.n	8006376 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	225d      	movs	r2, #93	@ 0x5d
 8006380:	5c9b      	ldrb	r3, [r3, r2]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d107      	bne.n	8006398 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	225c      	movs	r2, #92	@ 0x5c
 800638c:	2100      	movs	r1, #0
 800638e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0018      	movs	r0, r3
 8006394:	f7fd f9b6 	bl	8003704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	225d      	movs	r2, #93	@ 0x5d
 800639c:	2102      	movs	r1, #2
 800639e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2140      	movs	r1, #64	@ 0x40
 80063ac:	438a      	bics	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	23e0      	movs	r3, #224	@ 0xe0
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d902      	bls.n	80063c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e002      	b.n	80063c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063c2:	2380      	movs	r3, #128	@ 0x80
 80063c4:	015b      	lsls	r3, r3, #5
 80063c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	23f0      	movs	r3, #240	@ 0xf0
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d008      	beq.n	80063e6 <HAL_SPI_Init+0xaa>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	23e0      	movs	r3, #224	@ 0xe0
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	429a      	cmp	r2, r3
 80063de:	d002      	beq.n	80063e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	2382      	movs	r3, #130	@ 0x82
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	401a      	ands	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6899      	ldr	r1, [r3, #8]
 80063f4:	2384      	movs	r3, #132	@ 0x84
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	400b      	ands	r3, r1
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2102      	movs	r1, #2
 8006402:	400b      	ands	r3, r1
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2101      	movs	r1, #1
 800640c:	400b      	ands	r3, r1
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	2380      	movs	r3, #128	@ 0x80
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	400b      	ands	r3, r1
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	2138      	movs	r1, #56	@ 0x38
 8006422:	400b      	ands	r3, r1
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	400b      	ands	r3, r1
 800642e:	431a      	orrs	r2, r3
 8006430:	0011      	movs	r1, r2
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006436:	2380      	movs	r3, #128	@ 0x80
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	401a      	ands	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	0c1b      	lsrs	r3, r3, #16
 800644a:	2204      	movs	r2, #4
 800644c:	401a      	ands	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	2110      	movs	r1, #16
 8006454:	400b      	ands	r3, r1
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645c:	2108      	movs	r1, #8
 800645e:	400b      	ands	r3, r1
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	23f0      	movs	r3, #240	@ 0xf0
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	400b      	ands	r3, r1
 800646c:	431a      	orrs	r2, r3
 800646e:	0011      	movs	r1, r2
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	015b      	lsls	r3, r3, #5
 8006476:	401a      	ands	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69da      	ldr	r2, [r3, #28]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4907      	ldr	r1, [pc, #28]	@ (80064a8 <HAL_SPI_Init+0x16c>)
 800648c:	400a      	ands	r2, r1
 800648e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	225d      	movs	r2, #93	@ 0x5d
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b004      	add	sp, #16
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	fffff7ff 	.word	0xfffff7ff

080064ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	1dbb      	adds	r3, r7, #6
 80064ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064bc:	231f      	movs	r3, #31
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	225c      	movs	r2, #92	@ 0x5c
 80064c8:	5c9b      	ldrb	r3, [r3, r2]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_SPI_Transmit+0x26>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e147      	b.n	8006762 <HAL_SPI_Transmit+0x2b6>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	225c      	movs	r2, #92	@ 0x5c
 80064d6:	2101      	movs	r1, #1
 80064d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064da:	f7fd fba1 	bl	8003c20 <HAL_GetTick>
 80064de:	0003      	movs	r3, r0
 80064e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80064e2:	2316      	movs	r3, #22
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	1dba      	adds	r2, r7, #6
 80064e8:	8812      	ldrh	r2, [r2, #0]
 80064ea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	225d      	movs	r2, #93	@ 0x5d
 80064f0:	5c9b      	ldrb	r3, [r3, r2]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d004      	beq.n	8006502 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80064f8:	231f      	movs	r3, #31
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	2202      	movs	r2, #2
 80064fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8006500:	e128      	b.n	8006754 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_SPI_Transmit+0x64>
 8006508:	1dbb      	adds	r3, r7, #6
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006510:	231f      	movs	r3, #31
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	2201      	movs	r2, #1
 8006516:	701a      	strb	r2, [r3, #0]
    goto error;
 8006518:	e11c      	b.n	8006754 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	225d      	movs	r2, #93	@ 0x5d
 800651e:	2103      	movs	r1, #3
 8006520:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1dba      	adds	r2, r7, #6
 8006532:	8812      	ldrh	r2, [r2, #0]
 8006534:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1dba      	adds	r2, r7, #6
 800653a:	8812      	ldrh	r2, [r2, #0]
 800653c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2244      	movs	r2, #68	@ 0x44
 8006548:	2100      	movs	r1, #0
 800654a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2246      	movs	r2, #70	@ 0x46
 8006550:	2100      	movs	r1, #0
 8006552:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	2380      	movs	r3, #128	@ 0x80
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	429a      	cmp	r2, r3
 800656a:	d110      	bne.n	800658e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2140      	movs	r1, #64	@ 0x40
 8006578:	438a      	bics	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2180      	movs	r1, #128	@ 0x80
 8006588:	01c9      	lsls	r1, r1, #7
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2240      	movs	r2, #64	@ 0x40
 8006596:	4013      	ands	r3, r2
 8006598:	2b40      	cmp	r3, #64	@ 0x40
 800659a:	d007      	beq.n	80065ac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2140      	movs	r1, #64	@ 0x40
 80065a8:	430a      	orrs	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	23e0      	movs	r3, #224	@ 0xe0
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d952      	bls.n	800665e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_SPI_Transmit+0x11e>
 80065c0:	2316      	movs	r3, #22
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d143      	bne.n	8006652 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ee:	e030      	b.n	8006652 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2202      	movs	r2, #2
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d112      	bne.n	8006624 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006602:	881a      	ldrh	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660e:	1c9a      	adds	r2, r3, #2
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006622:	e016      	b.n	8006652 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006624:	f7fd fafc 	bl	8003c20 <HAL_GetTick>
 8006628:	0002      	movs	r2, r0
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d802      	bhi.n	800663a <HAL_SPI_Transmit+0x18e>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	d102      	bne.n	8006640 <HAL_SPI_Transmit+0x194>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d108      	bne.n	8006652 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006640:	231f      	movs	r3, #31
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	2203      	movs	r2, #3
 8006646:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	225d      	movs	r2, #93	@ 0x5d
 800664c:	2101      	movs	r1, #1
 800664e:	5499      	strb	r1, [r3, r2]
          goto error;
 8006650:	e080      	b.n	8006754 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006656:	b29b      	uxth	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1c9      	bne.n	80065f0 <HAL_SPI_Transmit+0x144>
 800665c:	e053      	b.n	8006706 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <HAL_SPI_Transmit+0x1c4>
 8006666:	2316      	movs	r3, #22
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d145      	bne.n	80066fc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006696:	e031      	b.n	80066fc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2202      	movs	r2, #2
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d113      	bne.n	80066ce <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80066cc:	e016      	b.n	80066fc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ce:	f7fd faa7 	bl	8003c20 <HAL_GetTick>
 80066d2:	0002      	movs	r2, r0
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d802      	bhi.n	80066e4 <HAL_SPI_Transmit+0x238>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	d102      	bne.n	80066ea <HAL_SPI_Transmit+0x23e>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80066ea:	231f      	movs	r3, #31
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	2203      	movs	r2, #3
 80066f0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	225d      	movs	r2, #93	@ 0x5d
 80066f6:	2101      	movs	r1, #1
 80066f8:	5499      	strb	r1, [r3, r2]
          goto error;
 80066fa:	e02b      	b.n	8006754 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1c8      	bne.n	8006698 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 fdb5 	bl	800727c <SPI_EndRxTxTransaction>
 8006712:	1e03      	subs	r3, r0, #0
 8006714:	d002      	beq.n	800671c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006742:	231f      	movs	r3, #31
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	2201      	movs	r2, #1
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	e003      	b.n	8006754 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	225d      	movs	r2, #93	@ 0x5d
 8006750:	2101      	movs	r1, #1
 8006752:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	225c      	movs	r2, #92	@ 0x5c
 8006758:	2100      	movs	r1, #0
 800675a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800675c:	231f      	movs	r3, #31
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	781b      	ldrb	r3, [r3, #0]
}
 8006762:	0018      	movs	r0, r3
 8006764:	46bd      	mov	sp, r7
 8006766:	b008      	add	sp, #32
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	1dbb      	adds	r3, r7, #6
 8006778:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800677a:	2117      	movs	r1, #23
 800677c:	187b      	adds	r3, r7, r1
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]


  if (hspi->State != HAL_SPI_STATE_READY)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	225d      	movs	r2, #93	@ 0x5d
 8006786:	5c9b      	ldrb	r3, [r3, r2]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d003      	beq.n	8006796 <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
 800678e:	187b      	adds	r3, r7, r1
 8006790:	2202      	movs	r2, #2
 8006792:	701a      	strb	r2, [r3, #0]
    goto error;
 8006794:	e09c      	b.n	80068d0 <HAL_SPI_Receive_IT+0x164>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d112      	bne.n	80067c4 <HAL_SPI_Receive_IT+0x58>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	2382      	movs	r3, #130	@ 0x82
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d10c      	bne.n	80067c4 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	225d      	movs	r2, #93	@ 0x5d
 80067ae:	2104      	movs	r1, #4
 80067b0:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80067b2:	1dbb      	adds	r3, r7, #6
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 f898 	bl	80068f0 <HAL_SPI_TransmitReceive_IT>
 80067c0:	0003      	movs	r3, r0
 80067c2:	e088      	b.n	80068d6 <HAL_SPI_Receive_IT+0x16a>
  }


  if ((pData == NULL) || (Size == 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_SPI_Receive_IT+0x66>
 80067ca:	1dbb      	adds	r3, r7, #6
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80067d2:	2317      	movs	r3, #23
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80067da:	e079      	b.n	80068d0 <HAL_SPI_Receive_IT+0x164>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	225c      	movs	r2, #92	@ 0x5c
 80067e0:	5c9b      	ldrb	r3, [r3, r2]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_SPI_Receive_IT+0x7e>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e075      	b.n	80068d6 <HAL_SPI_Receive_IT+0x16a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	225c      	movs	r2, #92	@ 0x5c
 80067ee:	2101      	movs	r1, #1
 80067f0:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	225d      	movs	r2, #93	@ 0x5d
 80067f6:	2104      	movs	r1, #4
 80067f8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1dba      	adds	r2, r7, #6
 800680a:	2144      	movs	r1, #68	@ 0x44
 800680c:	8812      	ldrh	r2, [r2, #0]
 800680e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	1dba      	adds	r2, r7, #6
 8006814:	2146      	movs	r1, #70	@ 0x46
 8006816:	8812      	ldrh	r2, [r2, #0]
 8006818:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	23e0      	movs	r3, #224	@ 0xe0
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	429a      	cmp	r2, r3
 800683c:	d90b      	bls.n	8006856 <HAL_SPI_Receive_IT+0xea>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4925      	ldr	r1, [pc, #148]	@ (80068e0 <HAL_SPI_Receive_IT+0x174>)
 800684a:	400a      	ands	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a24      	ldr	r2, [pc, #144]	@ (80068e4 <HAL_SPI_Receive_IT+0x178>)
 8006852:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006854:	e00b      	b.n	800686e <HAL_SPI_Receive_IT+0x102>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2180      	movs	r1, #128	@ 0x80
 8006862:	0149      	lsls	r1, r1, #5
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <HAL_SPI_Receive_IT+0x17c>)
 800686c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	2380      	movs	r3, #128	@ 0x80
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	429a      	cmp	r2, r3
 8006878:	d10f      	bne.n	800689a <HAL_SPI_Receive_IT+0x12e>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2140      	movs	r1, #64	@ 0x40
 8006886:	438a      	bics	r2, r1
 8006888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4915      	ldr	r1, [pc, #84]	@ (80068ec <HAL_SPI_Receive_IT+0x180>)
 8006896:	400a      	ands	r2, r1
 8006898:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2240      	movs	r2, #64	@ 0x40
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b40      	cmp	r3, #64	@ 0x40
 80068a6:	d007      	beq.n	80068b8 <HAL_SPI_Receive_IT+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2140      	movs	r1, #64	@ 0x40
 80068b4:	430a      	orrs	r2, r1
 80068b6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	225c      	movs	r2, #92	@ 0x5c
 80068bc:	2100      	movs	r1, #0
 80068be:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2160      	movs	r1, #96	@ 0x60
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80068d0:	2317      	movs	r3, #23
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	781b      	ldrb	r3, [r3, #0]
}
 80068d6:	0018      	movs	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	b006      	add	sp, #24
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	ffffefff 	.word	0xffffefff
 80068e4:	08006f13 	.word	0x08006f13
 80068e8:	08006ec1 	.word	0x08006ec1
 80068ec:	ffffbfff 	.word	0xffffbfff

080068f0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	001a      	movs	r2, r3
 80068fe:	1cbb      	adds	r3, r7, #2
 8006900:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006902:	2317      	movs	r3, #23
 8006904:	18fb      	adds	r3, r7, r3
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800690a:	2016      	movs	r0, #22
 800690c:	183b      	adds	r3, r7, r0
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	215d      	movs	r1, #93	@ 0x5d
 8006912:	5c52      	ldrb	r2, [r2, r1]
 8006914:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800691c:	0001      	movs	r1, r0
 800691e:	187b      	adds	r3, r7, r1
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d011      	beq.n	800694a <HAL_SPI_TransmitReceive_IT+0x5a>
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	2382      	movs	r3, #130	@ 0x82
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	d107      	bne.n	8006940 <HAL_SPI_TransmitReceive_IT+0x50>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <HAL_SPI_TransmitReceive_IT+0x50>
 8006938:	187b      	adds	r3, r7, r1
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b04      	cmp	r3, #4
 800693e:	d004      	beq.n	800694a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8006940:	2317      	movs	r3, #23
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	2202      	movs	r2, #2
 8006946:	701a      	strb	r2, [r3, #0]
    goto error;
 8006948:	e088      	b.n	8006a5c <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <HAL_SPI_TransmitReceive_IT+0x6e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_SPI_TransmitReceive_IT+0x6e>
 8006956:	1cbb      	adds	r3, r7, #2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_SPI_TransmitReceive_IT+0x78>
  {
    errorcode = HAL_ERROR;
 800695e:	2317      	movs	r3, #23
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	2201      	movs	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
    goto error;
 8006966:	e079      	b.n	8006a5c <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	225c      	movs	r2, #92	@ 0x5c
 800696c:	5c9b      	ldrb	r3, [r3, r2]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_SPI_TransmitReceive_IT+0x86>
 8006972:	2302      	movs	r3, #2
 8006974:	e075      	b.n	8006a62 <HAL_SPI_TransmitReceive_IT+0x172>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	225c      	movs	r2, #92	@ 0x5c
 800697a:	2101      	movs	r1, #1
 800697c:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	225d      	movs	r2, #93	@ 0x5d
 8006982:	5c9b      	ldrb	r3, [r3, r2]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b04      	cmp	r3, #4
 8006988:	d003      	beq.n	8006992 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	225d      	movs	r2, #93	@ 0x5d
 800698e:	2105      	movs	r1, #5
 8006990:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1cba      	adds	r2, r7, #2
 80069a2:	8812      	ldrh	r2, [r2, #0]
 80069a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1cba      	adds	r2, r7, #2
 80069aa:	8812      	ldrh	r2, [r2, #0]
 80069ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	1cba      	adds	r2, r7, #2
 80069b8:	2144      	movs	r1, #68	@ 0x44
 80069ba:	8812      	ldrh	r2, [r2, #0]
 80069bc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1cba      	adds	r2, r7, #2
 80069c2:	2146      	movs	r1, #70	@ 0x46
 80069c4:	8812      	ldrh	r2, [r2, #0]
 80069c6:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	23e0      	movs	r3, #224	@ 0xe0
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d906      	bls.n	80069e2 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a25      	ldr	r2, [pc, #148]	@ (8006a6c <HAL_SPI_TransmitReceive_IT+0x17c>)
 80069d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a24      	ldr	r2, [pc, #144]	@ (8006a70 <HAL_SPI_TransmitReceive_IT+0x180>)
 80069de:	651a      	str	r2, [r3, #80]	@ 0x50
 80069e0:	e005      	b.n	80069ee <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a23      	ldr	r2, [pc, #140]	@ (8006a74 <HAL_SPI_TransmitReceive_IT+0x184>)
 80069e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4a23      	ldr	r2, [pc, #140]	@ (8006a78 <HAL_SPI_TransmitReceive_IT+0x188>)
 80069ec:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	23e0      	movs	r3, #224	@ 0xe0
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d803      	bhi.n	8006a02 <HAL_SPI_TransmitReceive_IT+0x112>
 80069fa:	1cbb      	adds	r3, r7, #2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d908      	bls.n	8006a14 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	491b      	ldr	r1, [pc, #108]	@ (8006a7c <HAL_SPI_TransmitReceive_IT+0x18c>)
 8006a0e:	400a      	ands	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e008      	b.n	8006a26 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2180      	movs	r1, #128	@ 0x80
 8006a20:	0149      	lsls	r1, r1, #5
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2240      	movs	r2, #64	@ 0x40
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	d007      	beq.n	8006a44 <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2140      	movs	r1, #64	@ 0x40
 8006a40:	430a      	orrs	r2, r1
 8006a42:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	225c      	movs	r2, #92	@ 0x5c
 8006a48:	2100      	movs	r1, #0
 8006a4a:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	21e0      	movs	r1, #224	@ 0xe0
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006a5c:	2317      	movs	r3, #23
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	781b      	ldrb	r3, [r3, #0]
}
 8006a62:	0018      	movs	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b006      	add	sp, #24
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	08006df7 	.word	0x08006df7
 8006a70:	08006e5f 	.word	0x08006e5f
 8006a74:	08006ca1 	.word	0x08006ca1
 8006a78:	08006d63 	.word	0x08006d63
 8006a7c:	ffffefff 	.word	0xffffefff

08006a80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2240      	movs	r2, #64	@ 0x40
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d10d      	bne.n	8006abc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006aa6:	d009      	beq.n	8006abc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2240      	movs	r2, #64	@ 0x40
 8006aac:	4013      	ands	r3, r2
 8006aae:	d005      	beq.n	8006abc <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	0010      	movs	r0, r2
 8006ab8:	4798      	blx	r3
    return;
 8006aba:	e0c5      	b.n	8006c48 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	d009      	beq.n	8006ad8 <HAL_SPI_IRQHandler+0x58>
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2280      	movs	r2, #128	@ 0x80
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d005      	beq.n	8006ad8 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	0010      	movs	r0, r2
 8006ad4:	4798      	blx	r3
    return;
 8006ad6:	e0b7      	b.n	8006c48 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2220      	movs	r2, #32
 8006adc:	4013      	ands	r3, r2
 8006ade:	d109      	bne.n	8006af4 <HAL_SPI_IRQHandler+0x74>
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2240      	movs	r2, #64	@ 0x40
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	d105      	bne.n	8006af4 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	2380      	movs	r3, #128	@ 0x80
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4013      	ands	r3, r2
 8006af0:	d100      	bne.n	8006af4 <HAL_SPI_IRQHandler+0x74>
 8006af2:	e0a9      	b.n	8006c48 <HAL_SPI_IRQHandler+0x1c8>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2220      	movs	r2, #32
 8006af8:	4013      	ands	r3, r2
 8006afa:	d100      	bne.n	8006afe <HAL_SPI_IRQHandler+0x7e>
 8006afc:	e0a4      	b.n	8006c48 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2240      	movs	r2, #64	@ 0x40
 8006b02:	4013      	ands	r3, r2
 8006b04:	d023      	beq.n	8006b4e <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	225d      	movs	r2, #93	@ 0x5d
 8006b0a:	5c9b      	ldrb	r3, [r3, r2]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d011      	beq.n	8006b36 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b16:	2204      	movs	r2, #4
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	e00b      	b.n	8006b4e <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]
        return;
 8006b4c:	e07c      	b.n	8006c48 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2220      	movs	r2, #32
 8006b52:	4013      	ands	r3, r2
 8006b54:	d014      	beq.n	8006b80 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2140      	movs	r1, #64	@ 0x40
 8006b7a:	438a      	bics	r2, r1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	2380      	movs	r3, #128	@ 0x80
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4013      	ands	r3, r2
 8006b88:	d00c      	beq.n	8006ba4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8e:	2208      	movs	r2, #8
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d04c      	beq.n	8006c46 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	21e0      	movs	r1, #224	@ 0xe0
 8006bb8:	438a      	bics	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	225d      	movs	r2, #93	@ 0x5d
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d103      	bne.n	8006bd4 <HAL_SPI_IRQHandler+0x154>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d032      	beq.n	8006c3a <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2103      	movs	r1, #3
 8006be0:	438a      	bics	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d010      	beq.n	8006c0e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf0:	4a17      	ldr	r2, [pc, #92]	@ (8006c50 <HAL_SPI_IRQHandler+0x1d0>)
 8006bf2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7fe fa9b 	bl	8005134 <HAL_DMA_Abort_IT>
 8006bfe:	1e03      	subs	r3, r0, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c06:	2240      	movs	r2, #64	@ 0x40
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d016      	beq.n	8006c44 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c50 <HAL_SPI_IRQHandler+0x1d0>)
 8006c1c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c22:	0018      	movs	r0, r3
 8006c24:	f7fe fa86 	bl	8005134 <HAL_DMA_Abort_IT>
 8006c28:	1e03      	subs	r3, r0, #0
 8006c2a:	d00b      	beq.n	8006c44 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c30:	2240      	movs	r2, #64	@ 0x40
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006c38:	e004      	b.n	8006c44 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f000 f811 	bl	8006c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c42:	e000      	b.n	8006c46 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8006c44:	46c0      	nop			@ (mov r8, r8)
    return;
 8006c46:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b008      	add	sp, #32
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			@ (mov r8, r8)
 8006c50:	08006c75 	.word	0x08006c75

08006c54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006c5c:	46c0      	nop			@ (mov r8, r8)
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b002      	add	sp, #8
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c6c:	46c0      	nop			@ (mov r8, r8)
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b002      	add	sp, #8
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2246      	movs	r2, #70	@ 0x46
 8006c86:	2100      	movs	r1, #0
 8006c88:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7ff ffe6 	bl	8006c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c98:	46c0      	nop			@ (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b004      	add	sp, #16
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2246      	movs	r2, #70	@ 0x46
 8006cac:	5a9b      	ldrh	r3, [r3, r2]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d924      	bls.n	8006cfe <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbe:	b292      	uxth	r2, r2
 8006cc0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	1c9a      	adds	r2, r3, #2
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2246      	movs	r2, #70	@ 0x46
 8006cd0:	5a9b      	ldrh	r3, [r3, r2]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b02      	subs	r3, #2
 8006cd6:	b299      	uxth	r1, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2246      	movs	r2, #70	@ 0x46
 8006cdc:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2246      	movs	r2, #70	@ 0x46
 8006ce2:	5a9b      	ldrh	r3, [r3, r2]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d120      	bne.n	8006d2c <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2180      	movs	r1, #128	@ 0x80
 8006cf6:	0149      	lsls	r1, r1, #5
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	e016      	b.n	8006d2c <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	001a      	movs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2246      	movs	r2, #70	@ 0x46
 8006d1e:	5a9b      	ldrh	r3, [r3, r2]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b299      	uxth	r1, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2246      	movs	r2, #70	@ 0x46
 8006d2a:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2246      	movs	r2, #70	@ 0x46
 8006d30:	5a9b      	ldrh	r3, [r3, r2]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d110      	bne.n	8006d5a <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2160      	movs	r1, #96	@ 0x60
 8006d44:	438a      	bics	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	0018      	movs	r0, r3
 8006d56:	f000 fad7 	bl	8007308 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	b002      	add	sp, #8
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d912      	bls.n	8006d9a <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	1c9a      	adds	r2, r3, #2
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b02      	subs	r3, #2
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d98:	e012      	b.n	8006dc0 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d111      	bne.n	8006dee <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2180      	movs	r1, #128	@ 0x80
 8006dd6:	438a      	bics	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2246      	movs	r2, #70	@ 0x46
 8006dde:	5a9b      	ldrh	r3, [r3, r2]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d103      	bne.n	8006dee <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0018      	movs	r0, r3
 8006dea:	f000 fa8d 	bl	8007308 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006dee:	46c0      	nop			@ (mov r8, r8)
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b002      	add	sp, #8
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	1c9a      	adds	r2, r3, #2
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2246      	movs	r2, #70	@ 0x46
 8006e1a:	5a9b      	ldrh	r3, [r3, r2]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b299      	uxth	r1, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2246      	movs	r2, #70	@ 0x46
 8006e26:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2246      	movs	r2, #70	@ 0x46
 8006e2c:	5a9b      	ldrh	r3, [r3, r2]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d110      	bne.n	8006e56 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2140      	movs	r1, #64	@ 0x40
 8006e40:	438a      	bics	r2, r1
 8006e42:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f000 fa59 	bl	8007308 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e56:	46c0      	nop			@ (mov r8, r8)
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b002      	add	sp, #8
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	881a      	ldrh	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	1c9a      	adds	r2, r3, #2
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d111      	bne.n	8006eb8 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2180      	movs	r1, #128	@ 0x80
 8006ea0:	438a      	bics	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2246      	movs	r2, #70	@ 0x46
 8006ea8:	5a9b      	ldrh	r3, [r3, r2]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 fa28 	bl	8007308 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006eb8:	46c0      	nop			@ (mov r8, r8)
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b002      	add	sp, #8
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	001a      	movs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2246      	movs	r2, #70	@ 0x46
 8006ee8:	5a9b      	ldrh	r3, [r3, r2]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b299      	uxth	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2246      	movs	r2, #70	@ 0x46
 8006ef4:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2246      	movs	r2, #70	@ 0x46
 8006efa:	5a9b      	ldrh	r3, [r3, r2]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	0018      	movs	r0, r3
 8006f06:	f000 fa45 	bl	8007394 <SPI_CloseRx_ISR>
  }
}
 8006f0a:	46c0      	nop			@ (mov r8, r8)
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	b002      	add	sp, #8
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f24:	b292      	uxth	r2, r2
 8006f26:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2c:	1c9a      	adds	r2, r3, #2
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2246      	movs	r2, #70	@ 0x46
 8006f36:	5a9b      	ldrh	r3, [r3, r2]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b299      	uxth	r1, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2246      	movs	r2, #70	@ 0x46
 8006f42:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2246      	movs	r2, #70	@ 0x46
 8006f48:	5a9b      	ldrh	r3, [r3, r2]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d103      	bne.n	8006f58 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	0018      	movs	r0, r3
 8006f54:	f000 fa1e 	bl	8007394 <SPI_CloseRx_ISR>
  }
}
 8006f58:	46c0      	nop			@ (mov r8, r8)
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b002      	add	sp, #8
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	1dfb      	adds	r3, r7, #7
 8006f6e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f70:	f7fc fe56 	bl	8003c20 <HAL_GetTick>
 8006f74:	0002      	movs	r2, r0
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	18d3      	adds	r3, r2, r3
 8006f7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f80:	f7fc fe4e 	bl	8003c20 <HAL_GetTick>
 8006f84:	0003      	movs	r3, r0
 8006f86:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f88:	4b3a      	ldr	r3, [pc, #232]	@ (8007074 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	015b      	lsls	r3, r3, #5
 8006f8e:	0d1b      	lsrs	r3, r3, #20
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	4353      	muls	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f96:	e058      	b.n	800704a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	d055      	beq.n	800704a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f9e:	f7fc fe3f 	bl	8003c20 <HAL_GetTick>
 8006fa2:	0002      	movs	r2, r0
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d902      	bls.n	8006fb4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d142      	bne.n	800703a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	21e0      	movs	r1, #224	@ 0xe0
 8006fc0:	438a      	bics	r2, r1
 8006fc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	2382      	movs	r3, #130	@ 0x82
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d113      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d005      	beq.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d107      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2140      	movs	r1, #64	@ 0x40
 8006ff4:	438a      	bics	r2, r1
 8006ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ffc:	2380      	movs	r3, #128	@ 0x80
 8006ffe:	019b      	lsls	r3, r3, #6
 8007000:	429a      	cmp	r2, r3
 8007002:	d110      	bne.n	8007026 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	491a      	ldr	r1, [pc, #104]	@ (8007078 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007010:	400a      	ands	r2, r1
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2180      	movs	r1, #128	@ 0x80
 8007020:	0189      	lsls	r1, r1, #6
 8007022:	430a      	orrs	r2, r1
 8007024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	225d      	movs	r2, #93	@ 0x5d
 800702a:	2101      	movs	r1, #1
 800702c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	225c      	movs	r2, #92	@ 0x5c
 8007032:	2100      	movs	r1, #0
 8007034:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e017      	b.n	800706a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	3b01      	subs	r3, #1
 8007048:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4013      	ands	r3, r2
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	425a      	negs	r2, r3
 800705a:	4153      	adcs	r3, r2
 800705c:	b2db      	uxtb	r3, r3
 800705e:	001a      	movs	r2, r3
 8007060:	1dfb      	adds	r3, r7, #7
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d197      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	0018      	movs	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	b008      	add	sp, #32
 8007070:	bd80      	pop	{r7, pc}
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	20000064 	.word	0x20000064
 8007078:	ffffdfff 	.word	0xffffdfff

0800707c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08a      	sub	sp, #40	@ 0x28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800708a:	2317      	movs	r3, #23
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007092:	f7fc fdc5 	bl	8003c20 <HAL_GetTick>
 8007096:	0002      	movs	r2, r0
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	18d3      	adds	r3, r2, r3
 80070a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80070a2:	f7fc fdbd 	bl	8003c20 <HAL_GetTick>
 80070a6:	0003      	movs	r3, r0
 80070a8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80070b2:	4b41      	ldr	r3, [pc, #260]	@ (80071b8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	0013      	movs	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	189b      	adds	r3, r3, r2
 80070bc:	00da      	lsls	r2, r3, #3
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	0d1b      	lsrs	r3, r3, #20
 80070c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c4:	4353      	muls	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070c8:	e068      	b.n	800719c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	23c0      	movs	r3, #192	@ 0xc0
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d10a      	bne.n	80070ea <SPI_WaitFifoStateUntilTimeout+0x6e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	2117      	movs	r1, #23
 80070e2:	187b      	adds	r3, r7, r1
 80070e4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80070e6:	187b      	adds	r3, r7, r1
 80070e8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	3301      	adds	r3, #1
 80070ee:	d055      	beq.n	800719c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070f0:	f7fc fd96 	bl	8003c20 <HAL_GetTick>
 80070f4:	0002      	movs	r2, r0
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d902      	bls.n	8007106 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d142      	bne.n	800718c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	21e0      	movs	r1, #224	@ 0xe0
 8007112:	438a      	bics	r2, r1
 8007114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	2382      	movs	r3, #130	@ 0x82
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	429a      	cmp	r2, r3
 8007120:	d113      	bne.n	800714a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	2380      	movs	r3, #128	@ 0x80
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	429a      	cmp	r2, r3
 800712c:	d005      	beq.n	800713a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	429a      	cmp	r2, r3
 8007138:	d107      	bne.n	800714a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2140      	movs	r1, #64	@ 0x40
 8007146:	438a      	bics	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800714e:	2380      	movs	r3, #128	@ 0x80
 8007150:	019b      	lsls	r3, r3, #6
 8007152:	429a      	cmp	r2, r3
 8007154:	d110      	bne.n	8007178 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4916      	ldr	r1, [pc, #88]	@ (80071bc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007162:	400a      	ands	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2180      	movs	r1, #128	@ 0x80
 8007172:	0189      	lsls	r1, r1, #6
 8007174:	430a      	orrs	r2, r1
 8007176:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	225d      	movs	r2, #93	@ 0x5d
 800717c:	2101      	movs	r1, #1
 800717e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	225c      	movs	r2, #92	@ 0x5c
 8007184:	2100      	movs	r1, #0
 8007186:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e010      	b.n	80071ae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	3b01      	subs	r3, #1
 800719a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4013      	ands	r3, r2
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d18e      	bne.n	80070ca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	0018      	movs	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	b00a      	add	sp, #40	@ 0x28
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	46c0      	nop			@ (mov r8, r8)
 80071b8:	20000064 	.word	0x20000064
 80071bc:	ffffdfff 	.word	0xffffdfff

080071c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	2382      	movs	r3, #130	@ 0x82
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d113      	bne.n	8007200 <SPI_EndRxTransaction+0x40>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	2380      	movs	r3, #128	@ 0x80
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d005      	beq.n	80071f0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	2380      	movs	r3, #128	@ 0x80
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d107      	bne.n	8007200 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2140      	movs	r1, #64	@ 0x40
 80071fc:	438a      	bics	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	0013      	movs	r3, r2
 800720a:	2200      	movs	r2, #0
 800720c:	2180      	movs	r1, #128	@ 0x80
 800720e:	f7ff fea7 	bl	8006f60 <SPI_WaitFlagStateUntilTimeout>
 8007212:	1e03      	subs	r3, r0, #0
 8007214:	d007      	beq.n	8007226 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800721a:	2220      	movs	r2, #32
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e026      	b.n	8007274 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	2382      	movs	r3, #130	@ 0x82
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	429a      	cmp	r2, r3
 8007230:	d11f      	bne.n	8007272 <SPI_EndRxTransaction+0xb2>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	2380      	movs	r3, #128	@ 0x80
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	429a      	cmp	r2, r3
 800723c:	d005      	beq.n	800724a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	2380      	movs	r3, #128	@ 0x80
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	429a      	cmp	r2, r3
 8007248:	d113      	bne.n	8007272 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	23c0      	movs	r3, #192	@ 0xc0
 800724e:	00d9      	lsls	r1, r3, #3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	0013      	movs	r3, r2
 8007258:	2200      	movs	r2, #0
 800725a:	f7ff ff0f 	bl	800707c <SPI_WaitFifoStateUntilTimeout>
 800725e:	1e03      	subs	r3, r0, #0
 8007260:	d007      	beq.n	8007272 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007266:	2220      	movs	r2, #32
 8007268:	431a      	orrs	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e000      	b.n	8007274 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	0018      	movs	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	b004      	add	sp, #16
 800727a:	bd80      	pop	{r7, pc}

0800727c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	23c0      	movs	r3, #192	@ 0xc0
 800728c:	0159      	lsls	r1, r3, #5
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	0013      	movs	r3, r2
 8007296:	2200      	movs	r2, #0
 8007298:	f7ff fef0 	bl	800707c <SPI_WaitFifoStateUntilTimeout>
 800729c:	1e03      	subs	r3, r0, #0
 800729e:	d007      	beq.n	80072b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a4:	2220      	movs	r2, #32
 80072a6:	431a      	orrs	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e027      	b.n	8007300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	0013      	movs	r3, r2
 80072ba:	2200      	movs	r2, #0
 80072bc:	2180      	movs	r1, #128	@ 0x80
 80072be:	f7ff fe4f 	bl	8006f60 <SPI_WaitFlagStateUntilTimeout>
 80072c2:	1e03      	subs	r3, r0, #0
 80072c4:	d007      	beq.n	80072d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ca:	2220      	movs	r2, #32
 80072cc:	431a      	orrs	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e014      	b.n	8007300 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	23c0      	movs	r3, #192	@ 0xc0
 80072da:	00d9      	lsls	r1, r3, #3
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	0013      	movs	r3, r2
 80072e4:	2200      	movs	r2, #0
 80072e6:	f7ff fec9 	bl	800707c <SPI_WaitFifoStateUntilTimeout>
 80072ea:	1e03      	subs	r3, r0, #0
 80072ec:	d007      	beq.n	80072fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f2:	2220      	movs	r2, #32
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e000      	b.n	8007300 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b004      	add	sp, #16
 8007306:	bd80      	pop	{r7, pc}

08007308 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007310:	f7fc fc86 	bl	8003c20 <HAL_GetTick>
 8007314:	0003      	movs	r3, r0
 8007316:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2120      	movs	r1, #32
 8007324:	438a      	bics	r2, r1
 8007326:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2164      	movs	r1, #100	@ 0x64
 800732e:	0018      	movs	r0, r3
 8007330:	f7ff ffa4 	bl	800727c <SPI_EndRxTxTransaction>
 8007334:	1e03      	subs	r3, r0, #0
 8007336:	d005      	beq.n	8007344 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800733c:	2220      	movs	r2, #32
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007348:	2b00      	cmp	r3, #0
 800734a:	d117      	bne.n	800737c <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	225d      	movs	r2, #93	@ 0x5d
 8007350:	5c9b      	ldrb	r3, [r3, r2]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b04      	cmp	r3, #4
 8007356:	d108      	bne.n	800736a <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	225d      	movs	r2, #93	@ 0x5d
 800735c:	2101      	movs	r1, #1
 800735e:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0018      	movs	r0, r3
 8007364:	f7fb ff9a 	bl	800329c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007368:	e010      	b.n	800738c <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	225d      	movs	r2, #93	@ 0x5d
 800736e:	2101      	movs	r1, #1
 8007370:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	0018      	movs	r0, r3
 8007376:	f7ff fc6d 	bl	8006c54 <HAL_SPI_TxRxCpltCallback>
}
 800737a:	e007      	b.n	800738c <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	225d      	movs	r2, #93	@ 0x5d
 8007380:	2101      	movs	r1, #1
 8007382:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	0018      	movs	r0, r3
 8007388:	f7ff fc6c 	bl	8006c64 <HAL_SPI_ErrorCallback>
}
 800738c:	46c0      	nop			@ (mov r8, r8)
 800738e:	46bd      	mov	sp, r7
 8007390:	b004      	add	sp, #16
 8007392:	bd80      	pop	{r7, pc}

08007394 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2160      	movs	r1, #96	@ 0x60
 80073a8:	438a      	bics	r2, r1
 80073aa:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80073ac:	f7fc fc38 	bl	8003c20 <HAL_GetTick>
 80073b0:	0002      	movs	r2, r0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2164      	movs	r1, #100	@ 0x64
 80073b6:	0018      	movs	r0, r3
 80073b8:	f7ff ff02 	bl	80071c0 <SPI_EndRxTransaction>
 80073bc:	1e03      	subs	r3, r0, #0
 80073be:	d005      	beq.n	80073cc <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073c4:	2220      	movs	r2, #32
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	225d      	movs	r2, #93	@ 0x5d
 80073d0:	2101      	movs	r1, #1
 80073d2:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	0018      	movs	r0, r3
 80073e0:	f7fb ff5c 	bl	800329c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80073e4:	e003      	b.n	80073ee <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7ff fc3b 	bl	8006c64 <HAL_SPI_ErrorCallback>
}
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b002      	add	sp, #8
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e04a      	b.n	800749e <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	223d      	movs	r2, #61	@ 0x3d
 800740c:	5c9b      	ldrb	r3, [r3, r2]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d107      	bne.n	8007424 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	223c      	movs	r2, #60	@ 0x3c
 8007418:	2100      	movs	r1, #0
 800741a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	0018      	movs	r0, r3
 8007420:	f7fc f9c2 	bl	80037a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	223d      	movs	r2, #61	@ 0x3d
 8007428:	2102      	movs	r1, #2
 800742a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3304      	adds	r3, #4
 8007434:	0019      	movs	r1, r3
 8007436:	0010      	movs	r0, r2
 8007438:	f000 f960 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2248      	movs	r2, #72	@ 0x48
 8007440:	2101      	movs	r1, #1
 8007442:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	223e      	movs	r2, #62	@ 0x3e
 8007448:	2101      	movs	r1, #1
 800744a:	5499      	strb	r1, [r3, r2]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	223f      	movs	r2, #63	@ 0x3f
 8007450:	2101      	movs	r1, #1
 8007452:	5499      	strb	r1, [r3, r2]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2240      	movs	r2, #64	@ 0x40
 8007458:	2101      	movs	r1, #1
 800745a:	5499      	strb	r1, [r3, r2]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2241      	movs	r2, #65	@ 0x41
 8007460:	2101      	movs	r1, #1
 8007462:	5499      	strb	r1, [r3, r2]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2242      	movs	r2, #66	@ 0x42
 8007468:	2101      	movs	r1, #1
 800746a:	5499      	strb	r1, [r3, r2]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2243      	movs	r2, #67	@ 0x43
 8007470:	2101      	movs	r1, #1
 8007472:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2244      	movs	r2, #68	@ 0x44
 8007478:	2101      	movs	r1, #1
 800747a:	5499      	strb	r1, [r3, r2]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2245      	movs	r2, #69	@ 0x45
 8007480:	2101      	movs	r1, #1
 8007482:	5499      	strb	r1, [r3, r2]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2246      	movs	r2, #70	@ 0x46
 8007488:	2101      	movs	r1, #1
 800748a:	5499      	strb	r1, [r3, r2]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2247      	movs	r2, #71	@ 0x47
 8007490:	2101      	movs	r1, #1
 8007492:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	223d      	movs	r2, #61	@ 0x3d
 8007498:	2101      	movs	r1, #1
 800749a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	0018      	movs	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	b002      	add	sp, #8
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	223d      	movs	r2, #61	@ 0x3d
 80074b4:	5c9b      	ldrb	r3, [r3, r2]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d001      	beq.n	80074c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e03a      	b.n	8007536 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	223d      	movs	r2, #61	@ 0x3d
 80074c4:	2102      	movs	r1, #2
 80074c6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007540 <HAL_TIM_Base_Start+0x98>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <HAL_TIM_Base_Start+0x4a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	2380      	movs	r3, #128	@ 0x80
 80074d8:	05db      	lsls	r3, r3, #23
 80074da:	429a      	cmp	r2, r3
 80074dc:	d009      	beq.n	80074f2 <HAL_TIM_Base_Start+0x4a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <HAL_TIM_Base_Start+0x9c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_TIM_Base_Start+0x4a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a16      	ldr	r2, [pc, #88]	@ (8007548 <HAL_TIM_Base_Start+0xa0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d116      	bne.n	8007520 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a14      	ldr	r2, [pc, #80]	@ (800754c <HAL_TIM_Base_Start+0xa4>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b06      	cmp	r3, #6
 8007502:	d016      	beq.n	8007532 <HAL_TIM_Base_Start+0x8a>
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	2380      	movs	r3, #128	@ 0x80
 8007508:	025b      	lsls	r3, r3, #9
 800750a:	429a      	cmp	r2, r3
 800750c:	d011      	beq.n	8007532 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2101      	movs	r1, #1
 800751a:	430a      	orrs	r2, r1
 800751c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	e008      	b.n	8007532 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2101      	movs	r1, #1
 800752c:	430a      	orrs	r2, r1
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	e000      	b.n	8007534 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007532:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	0018      	movs	r0, r3
 8007538:	46bd      	mov	sp, r7
 800753a:	b004      	add	sp, #16
 800753c:	bd80      	pop	{r7, pc}
 800753e:	46c0      	nop			@ (mov r8, r8)
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40000400 	.word	0x40000400
 8007548:	40014000 	.word	0x40014000
 800754c:	00010007 	.word	0x00010007

08007550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800755a:	230f      	movs	r3, #15
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	2200      	movs	r2, #0
 8007560:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	223c      	movs	r2, #60	@ 0x3c
 8007566:	5c9b      	ldrb	r3, [r3, r2]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_TIM_ConfigClockSource+0x20>
 800756c:	2302      	movs	r3, #2
 800756e:	e0bc      	b.n	80076ea <HAL_TIM_ConfigClockSource+0x19a>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	223c      	movs	r2, #60	@ 0x3c
 8007574:	2101      	movs	r1, #1
 8007576:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	223d      	movs	r2, #61	@ 0x3d
 800757c:	2102      	movs	r1, #2
 800757e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4a5a      	ldr	r2, [pc, #360]	@ (80076f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800758c:	4013      	ands	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4a59      	ldr	r2, [pc, #356]	@ (80076f8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8007594:	4013      	ands	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2280      	movs	r2, #128	@ 0x80
 80075a6:	0192      	lsls	r2, r2, #6
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d040      	beq.n	800762e <HAL_TIM_ConfigClockSource+0xde>
 80075ac:	2280      	movs	r2, #128	@ 0x80
 80075ae:	0192      	lsls	r2, r2, #6
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d900      	bls.n	80075b6 <HAL_TIM_ConfigClockSource+0x66>
 80075b4:	e088      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075b6:	2280      	movs	r2, #128	@ 0x80
 80075b8:	0152      	lsls	r2, r2, #5
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d100      	bne.n	80075c0 <HAL_TIM_ConfigClockSource+0x70>
 80075be:	e088      	b.n	80076d2 <HAL_TIM_ConfigClockSource+0x182>
 80075c0:	2280      	movs	r2, #128	@ 0x80
 80075c2:	0152      	lsls	r2, r2, #5
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d900      	bls.n	80075ca <HAL_TIM_ConfigClockSource+0x7a>
 80075c8:	e07e      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075ca:	2b70      	cmp	r3, #112	@ 0x70
 80075cc:	d018      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0xb0>
 80075ce:	d900      	bls.n	80075d2 <HAL_TIM_ConfigClockSource+0x82>
 80075d0:	e07a      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075d2:	2b60      	cmp	r3, #96	@ 0x60
 80075d4:	d04f      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x126>
 80075d6:	d900      	bls.n	80075da <HAL_TIM_ConfigClockSource+0x8a>
 80075d8:	e076      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075da:	2b50      	cmp	r3, #80	@ 0x50
 80075dc:	d03b      	beq.n	8007656 <HAL_TIM_ConfigClockSource+0x106>
 80075de:	d900      	bls.n	80075e2 <HAL_TIM_ConfigClockSource+0x92>
 80075e0:	e072      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075e2:	2b40      	cmp	r3, #64	@ 0x40
 80075e4:	d057      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0x146>
 80075e6:	d900      	bls.n	80075ea <HAL_TIM_ConfigClockSource+0x9a>
 80075e8:	e06e      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075ea:	2b30      	cmp	r3, #48	@ 0x30
 80075ec:	d063      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x166>
 80075ee:	d86b      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d060      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x166>
 80075f4:	d868      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05d      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x166>
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d05b      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x166>
 80075fe:	e063      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007610:	f000 f97e 	bl	8007910 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2277      	movs	r2, #119	@ 0x77
 8007620:	4313      	orrs	r3, r2
 8007622:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	609a      	str	r2, [r3, #8]
      break;
 800762c:	e052      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800763e:	f000 f967 	bl	8007910 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2180      	movs	r1, #128	@ 0x80
 800764e:	01c9      	lsls	r1, r1, #7
 8007650:	430a      	orrs	r2, r1
 8007652:	609a      	str	r2, [r3, #8]
      break;
 8007654:	e03e      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	001a      	movs	r2, r3
 8007664:	f000 f8d8 	bl	8007818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2150      	movs	r1, #80	@ 0x50
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f932 	bl	80078d8 <TIM_ITRx_SetConfig>
      break;
 8007674:	e02e      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007682:	001a      	movs	r2, r3
 8007684:	f000 f8f6 	bl	8007874 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2160      	movs	r1, #96	@ 0x60
 800768e:	0018      	movs	r0, r3
 8007690:	f000 f922 	bl	80078d8 <TIM_ITRx_SetConfig>
      break;
 8007694:	e01e      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a2:	001a      	movs	r2, r3
 80076a4:	f000 f8b8 	bl	8007818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2140      	movs	r1, #64	@ 0x40
 80076ae:	0018      	movs	r0, r3
 80076b0:	f000 f912 	bl	80078d8 <TIM_ITRx_SetConfig>
      break;
 80076b4:	e00e      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	0019      	movs	r1, r3
 80076c0:	0010      	movs	r0, r2
 80076c2:	f000 f909 	bl	80078d8 <TIM_ITRx_SetConfig>
      break;
 80076c6:	e005      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80076c8:	230f      	movs	r3, #15
 80076ca:	18fb      	adds	r3, r7, r3
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
      break;
 80076d0:	e000      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80076d2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	223d      	movs	r2, #61	@ 0x3d
 80076d8:	2101      	movs	r1, #1
 80076da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	223c      	movs	r2, #60	@ 0x3c
 80076e0:	2100      	movs	r1, #0
 80076e2:	5499      	strb	r1, [r3, r2]

  return status;
 80076e4:	230f      	movs	r3, #15
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	781b      	ldrb	r3, [r3, #0]
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b004      	add	sp, #16
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	46c0      	nop			@ (mov r8, r8)
 80076f4:	ffceff88 	.word	0xffceff88
 80076f8:	ffff00ff 	.word	0xffff00ff

080076fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a3b      	ldr	r2, [pc, #236]	@ (80077fc <TIM_Base_SetConfig+0x100>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d008      	beq.n	8007726 <TIM_Base_SetConfig+0x2a>
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	2380      	movs	r3, #128	@ 0x80
 8007718:	05db      	lsls	r3, r3, #23
 800771a:	429a      	cmp	r2, r3
 800771c:	d003      	beq.n	8007726 <TIM_Base_SetConfig+0x2a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a37      	ldr	r2, [pc, #220]	@ (8007800 <TIM_Base_SetConfig+0x104>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d108      	bne.n	8007738 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2270      	movs	r2, #112	@ 0x70
 800772a:	4393      	bics	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a30      	ldr	r2, [pc, #192]	@ (80077fc <TIM_Base_SetConfig+0x100>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d018      	beq.n	8007772 <TIM_Base_SetConfig+0x76>
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	2380      	movs	r3, #128	@ 0x80
 8007744:	05db      	lsls	r3, r3, #23
 8007746:	429a      	cmp	r2, r3
 8007748:	d013      	beq.n	8007772 <TIM_Base_SetConfig+0x76>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2c      	ldr	r2, [pc, #176]	@ (8007800 <TIM_Base_SetConfig+0x104>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00f      	beq.n	8007772 <TIM_Base_SetConfig+0x76>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2b      	ldr	r2, [pc, #172]	@ (8007804 <TIM_Base_SetConfig+0x108>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00b      	beq.n	8007772 <TIM_Base_SetConfig+0x76>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2a      	ldr	r2, [pc, #168]	@ (8007808 <TIM_Base_SetConfig+0x10c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d007      	beq.n	8007772 <TIM_Base_SetConfig+0x76>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a29      	ldr	r2, [pc, #164]	@ (800780c <TIM_Base_SetConfig+0x110>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <TIM_Base_SetConfig+0x76>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a28      	ldr	r2, [pc, #160]	@ (8007810 <TIM_Base_SetConfig+0x114>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d108      	bne.n	8007784 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a27      	ldr	r2, [pc, #156]	@ (8007814 <TIM_Base_SetConfig+0x118>)
 8007776:	4013      	ands	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2280      	movs	r2, #128	@ 0x80
 8007788:	4393      	bics	r3, r2
 800778a:	001a      	movs	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a13      	ldr	r2, [pc, #76]	@ (80077fc <TIM_Base_SetConfig+0x100>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00b      	beq.n	80077ca <TIM_Base_SetConfig+0xce>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a14      	ldr	r2, [pc, #80]	@ (8007808 <TIM_Base_SetConfig+0x10c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d007      	beq.n	80077ca <TIM_Base_SetConfig+0xce>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a13      	ldr	r2, [pc, #76]	@ (800780c <TIM_Base_SetConfig+0x110>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d003      	beq.n	80077ca <TIM_Base_SetConfig+0xce>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a12      	ldr	r2, [pc, #72]	@ (8007810 <TIM_Base_SetConfig+0x114>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d103      	bne.n	80077d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	691a      	ldr	r2, [r3, #16]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2201      	movs	r2, #1
 80077de:	4013      	ands	r3, r2
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d106      	bne.n	80077f2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2201      	movs	r2, #1
 80077ea:	4393      	bics	r3, r2
 80077ec:	001a      	movs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]
  }
}
 80077f2:	46c0      	nop			@ (mov r8, r8)
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b004      	add	sp, #16
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40000400 	.word	0x40000400
 8007804:	40002000 	.word	0x40002000
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800
 8007814:	fffffcff 	.word	0xfffffcff

08007818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	2201      	movs	r2, #1
 8007830:	4393      	bics	r3, r2
 8007832:	001a      	movs	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	22f0      	movs	r2, #240	@ 0xf0
 8007842:	4393      	bics	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	220a      	movs	r2, #10
 8007854:	4393      	bics	r3, r2
 8007856:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	46c0      	nop			@ (mov r8, r8)
 800786e:	46bd      	mov	sp, r7
 8007870:	b006      	add	sp, #24
 8007872:	bd80      	pop	{r7, pc}

08007874 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	2210      	movs	r2, #16
 800788c:	4393      	bics	r3, r2
 800788e:	001a      	movs	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	4a0d      	ldr	r2, [pc, #52]	@ (80078d4 <TIM_TI2_ConfigInputStage+0x60>)
 800789e:	4013      	ands	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	031b      	lsls	r3, r3, #12
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	22a0      	movs	r2, #160	@ 0xa0
 80078b0:	4393      	bics	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	46c0      	nop			@ (mov r8, r8)
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b006      	add	sp, #24
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	46c0      	nop			@ (mov r8, r8)
 80078d4:	ffff0fff 	.word	0xffff0fff

080078d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a08      	ldr	r2, [pc, #32]	@ (800790c <TIM_ITRx_SetConfig+0x34>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	2207      	movs	r2, #7
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	609a      	str	r2, [r3, #8]
}
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	46bd      	mov	sp, r7
 8007906:	b004      	add	sp, #16
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	ffcfff8f 	.word	0xffcfff8f

08007910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4a09      	ldr	r2, [pc, #36]	@ (800794c <TIM_ETR_SetConfig+0x3c>)
 8007928:	4013      	ands	r3, r2
 800792a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	021a      	lsls	r2, r3, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	431a      	orrs	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	46c0      	nop			@ (mov r8, r8)
 8007946:	46bd      	mov	sp, r7
 8007948:	b006      	add	sp, #24
 800794a:	bd80      	pop	{r7, pc}
 800794c:	ffff00ff 	.word	0xffff00ff

08007950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	223c      	movs	r2, #60	@ 0x3c
 800795e:	5c9b      	ldrb	r3, [r3, r2]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007964:	2302      	movs	r3, #2
 8007966:	e055      	b.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	223c      	movs	r2, #60	@ 0x3c
 800796c:	2101      	movs	r1, #1
 800796e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	223d      	movs	r2, #61	@ 0x3d
 8007974:	2102      	movs	r1, #2
 8007976:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a23      	ldr	r2, [pc, #140]	@ (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d108      	bne.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4a22      	ldr	r2, [pc, #136]	@ (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007996:	4013      	ands	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2270      	movs	r2, #112	@ 0x70
 80079a8:	4393      	bics	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a16      	ldr	r2, [pc, #88]	@ (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00f      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	2380      	movs	r3, #128	@ 0x80
 80079ce:	05db      	lsls	r3, r3, #23
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d009      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a12      	ldr	r2, [pc, #72]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10c      	bne.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2280      	movs	r2, #128	@ 0x80
 80079ec:	4393      	bics	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	223d      	movs	r2, #61	@ 0x3d
 8007a06:	2101      	movs	r1, #1
 8007a08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	223c      	movs	r2, #60	@ 0x3c
 8007a0e:	2100      	movs	r1, #0
 8007a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	0018      	movs	r0, r3
 8007a16:	46bd      	mov	sp, r7
 8007a18:	b004      	add	sp, #16
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40012c00 	.word	0x40012c00
 8007a20:	ff0fffff 	.word	0xff0fffff
 8007a24:	40000400 	.word	0x40000400
 8007a28:	40014000 	.word	0x40014000

08007a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e046      	b.n	8007acc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2288      	movs	r2, #136	@ 0x88
 8007a42:	589b      	ldr	r3, [r3, r2]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d107      	bne.n	8007a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2284      	movs	r2, #132	@ 0x84
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	0018      	movs	r0, r3
 8007a54:	f7fb fede 	bl	8003814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2288      	movs	r2, #136	@ 0x88
 8007a5c:	2124      	movs	r1, #36	@ 0x24
 8007a5e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	438a      	bics	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f000 ff2e 	bl	80088dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f000 fc6c 	bl	8008360 <UART_SetConfig>
 8007a88:	0003      	movs	r3, r0
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e01c      	b.n	8007acc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	490d      	ldr	r1, [pc, #52]	@ (8007ad4 <HAL_UART_Init+0xa8>)
 8007a9e:	400a      	ands	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	212a      	movs	r1, #42	@ 0x2a
 8007aae:	438a      	bics	r2, r1
 8007ab0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2101      	movs	r1, #1
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f000 ffbd 	bl	8008a44 <UART_CheckIdleState>
 8007aca:	0003      	movs	r3, r0
}
 8007acc:	0018      	movs	r0, r3
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b002      	add	sp, #8
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	ffffb7ff 	.word	0xffffb7ff

08007ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	@ 0x28
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	1dbb      	adds	r3, r7, #6
 8007ae6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2288      	movs	r2, #136	@ 0x88
 8007aec:	589b      	ldr	r3, [r3, r2]
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	d000      	beq.n	8007af4 <HAL_UART_Transmit+0x1c>
 8007af2:	e090      	b.n	8007c16 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_UART_Transmit+0x2a>
 8007afa:	1dbb      	adds	r3, r7, #6
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e088      	b.n	8007c18 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	2380      	movs	r3, #128	@ 0x80
 8007b0c:	015b      	lsls	r3, r3, #5
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d109      	bne.n	8007b26 <HAL_UART_Transmit+0x4e>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	4013      	ands	r3, r2
 8007b20:	d001      	beq.n	8007b26 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e078      	b.n	8007c18 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2290      	movs	r2, #144	@ 0x90
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2288      	movs	r2, #136	@ 0x88
 8007b32:	2121      	movs	r1, #33	@ 0x21
 8007b34:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b36:	f7fc f873 	bl	8003c20 <HAL_GetTick>
 8007b3a:	0003      	movs	r3, r0
 8007b3c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1dba      	adds	r2, r7, #6
 8007b42:	2154      	movs	r1, #84	@ 0x54
 8007b44:	8812      	ldrh	r2, [r2, #0]
 8007b46:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	1dba      	adds	r2, r7, #6
 8007b4c:	2156      	movs	r1, #86	@ 0x56
 8007b4e:	8812      	ldrh	r2, [r2, #0]
 8007b50:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	2380      	movs	r3, #128	@ 0x80
 8007b58:	015b      	lsls	r3, r3, #5
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d108      	bne.n	8007b70 <HAL_UART_Transmit+0x98>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	e003      	b.n	8007b78 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b78:	e030      	b.n	8007bdc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	0013      	movs	r3, r2
 8007b84:	2200      	movs	r2, #0
 8007b86:	2180      	movs	r1, #128	@ 0x80
 8007b88:	f001 f806 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8007b8c:	1e03      	subs	r3, r0, #0
 8007b8e:	d005      	beq.n	8007b9c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2288      	movs	r2, #136	@ 0x88
 8007b94:	2120      	movs	r1, #32
 8007b96:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e03d      	b.n	8007c18 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10b      	bne.n	8007bba <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	001a      	movs	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	05d2      	lsls	r2, r2, #23
 8007bae:	0dd2      	lsrs	r2, r2, #23
 8007bb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	61bb      	str	r3, [r7, #24]
 8007bb8:	e007      	b.n	8007bca <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	781a      	ldrb	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2256      	movs	r2, #86	@ 0x56
 8007bce:	5a9b      	ldrh	r3, [r3, r2]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b299      	uxth	r1, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2256      	movs	r2, #86	@ 0x56
 8007bda:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2256      	movs	r2, #86	@ 0x56
 8007be0:	5a9b      	ldrh	r3, [r3, r2]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1c8      	bne.n	8007b7a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	0013      	movs	r3, r2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2140      	movs	r1, #64	@ 0x40
 8007bf6:	f000 ffcf 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8007bfa:	1e03      	subs	r3, r0, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2288      	movs	r2, #136	@ 0x88
 8007c02:	2120      	movs	r1, #32
 8007c04:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e006      	b.n	8007c18 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2288      	movs	r2, #136	@ 0x88
 8007c0e:	2120      	movs	r1, #32
 8007c10:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e000      	b.n	8007c18 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007c16:	2302      	movs	r3, #2
  }
}
 8007c18:	0018      	movs	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b008      	add	sp, #32
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	1dbb      	adds	r3, r7, #6
 8007c2c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	228c      	movs	r2, #140	@ 0x8c
 8007c32:	589b      	ldr	r3, [r3, r2]
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d14a      	bne.n	8007cce <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_UART_Receive_IT+0x26>
 8007c3e:	1dbb      	adds	r3, r7, #6
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e042      	b.n	8007cd0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	2380      	movs	r3, #128	@ 0x80
 8007c50:	015b      	lsls	r3, r3, #5
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d109      	bne.n	8007c6a <HAL_UART_Receive_IT+0x4a>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2201      	movs	r2, #1
 8007c62:	4013      	ands	r3, r2
 8007c64:	d001      	beq.n	8007c6a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e032      	b.n	8007cd0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a18      	ldr	r2, [pc, #96]	@ (8007cd8 <HAL_UART_Receive_IT+0xb8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d020      	beq.n	8007cbc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	2380      	movs	r3, #128	@ 0x80
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	4013      	ands	r3, r2
 8007c86:	d019      	beq.n	8007cbc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c88:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8c:	613b      	str	r3, [r7, #16]
  return(result);
 8007c8e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	2301      	movs	r3, #1
 8007c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f383 8810 	msr	PRIMASK, r3
}
 8007c9c:	46c0      	nop			@ (mov r8, r8)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2180      	movs	r1, #128	@ 0x80
 8007caa:	04c9      	lsls	r1, r1, #19
 8007cac:	430a      	orrs	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f383 8810 	msr	PRIMASK, r3
}
 8007cba:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cbc:	1dbb      	adds	r3, r7, #6
 8007cbe:	881a      	ldrh	r2, [r3, #0]
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f000 ffd7 	bl	8008c78 <UART_Start_Receive_IT>
 8007cca:	0003      	movs	r3, r0
 8007ccc:	e000      	b.n	8007cd0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007cce:	2302      	movs	r3, #2
  }
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b008      	add	sp, #32
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40008000 	.word	0x40008000

08007cdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cdc:	b5b0      	push	{r4, r5, r7, lr}
 8007cde:	b0aa      	sub	sp, #168	@ 0xa8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	22a4      	movs	r2, #164	@ 0xa4
 8007cec:	18b9      	adds	r1, r7, r2
 8007cee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	20a0      	movs	r0, #160	@ 0xa0
 8007cf8:	1839      	adds	r1, r7, r0
 8007cfa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	249c      	movs	r4, #156	@ 0x9c
 8007d04:	1939      	adds	r1, r7, r4
 8007d06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d08:	0011      	movs	r1, r2
 8007d0a:	18bb      	adds	r3, r7, r2
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4aa2      	ldr	r2, [pc, #648]	@ (8007f98 <HAL_UART_IRQHandler+0x2bc>)
 8007d10:	4013      	ands	r3, r2
 8007d12:	2298      	movs	r2, #152	@ 0x98
 8007d14:	18bd      	adds	r5, r7, r2
 8007d16:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007d18:	18bb      	adds	r3, r7, r2
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d11a      	bne.n	8007d56 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d20:	187b      	adds	r3, r7, r1
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2220      	movs	r2, #32
 8007d26:	4013      	ands	r3, r2
 8007d28:	d015      	beq.n	8007d56 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d2a:	183b      	adds	r3, r7, r0
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	4013      	ands	r3, r2
 8007d32:	d105      	bne.n	8007d40 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d34:	193b      	adds	r3, r7, r4
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	2380      	movs	r3, #128	@ 0x80
 8007d3a:	055b      	lsls	r3, r3, #21
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d00a      	beq.n	8007d56 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d100      	bne.n	8007d4a <HAL_UART_IRQHandler+0x6e>
 8007d48:	e2dc      	b.n	8008304 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	0010      	movs	r0, r2
 8007d52:	4798      	blx	r3
      }
      return;
 8007d54:	e2d6      	b.n	8008304 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d56:	2398      	movs	r3, #152	@ 0x98
 8007d58:	18fb      	adds	r3, r7, r3
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d100      	bne.n	8007d62 <HAL_UART_IRQHandler+0x86>
 8007d60:	e122      	b.n	8007fa8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d62:	239c      	movs	r3, #156	@ 0x9c
 8007d64:	18fb      	adds	r3, r7, r3
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a8c      	ldr	r2, [pc, #560]	@ (8007f9c <HAL_UART_IRQHandler+0x2c0>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	d106      	bne.n	8007d7c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d6e:	23a0      	movs	r3, #160	@ 0xa0
 8007d70:	18fb      	adds	r3, r7, r3
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a8a      	ldr	r2, [pc, #552]	@ (8007fa0 <HAL_UART_IRQHandler+0x2c4>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	d100      	bne.n	8007d7c <HAL_UART_IRQHandler+0xa0>
 8007d7a:	e115      	b.n	8007fa8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d7c:	23a4      	movs	r3, #164	@ 0xa4
 8007d7e:	18fb      	adds	r3, r7, r3
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	4013      	ands	r3, r2
 8007d86:	d012      	beq.n	8007dae <HAL_UART_IRQHandler+0xd2>
 8007d88:	23a0      	movs	r3, #160	@ 0xa0
 8007d8a:	18fb      	adds	r3, r7, r3
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	2380      	movs	r3, #128	@ 0x80
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4013      	ands	r3, r2
 8007d94:	d00b      	beq.n	8007dae <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2290      	movs	r2, #144	@ 0x90
 8007da2:	589b      	ldr	r3, [r3, r2]
 8007da4:	2201      	movs	r2, #1
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2190      	movs	r1, #144	@ 0x90
 8007dac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dae:	23a4      	movs	r3, #164	@ 0xa4
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2202      	movs	r2, #2
 8007db6:	4013      	ands	r3, r2
 8007db8:	d011      	beq.n	8007dde <HAL_UART_IRQHandler+0x102>
 8007dba:	239c      	movs	r3, #156	@ 0x9c
 8007dbc:	18fb      	adds	r3, r7, r3
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	d00b      	beq.n	8007dde <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2290      	movs	r2, #144	@ 0x90
 8007dd2:	589b      	ldr	r3, [r3, r2]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2190      	movs	r1, #144	@ 0x90
 8007ddc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dde:	23a4      	movs	r3, #164	@ 0xa4
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2204      	movs	r2, #4
 8007de6:	4013      	ands	r3, r2
 8007de8:	d011      	beq.n	8007e0e <HAL_UART_IRQHandler+0x132>
 8007dea:	239c      	movs	r3, #156	@ 0x9c
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2201      	movs	r2, #1
 8007df2:	4013      	ands	r3, r2
 8007df4:	d00b      	beq.n	8007e0e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2290      	movs	r2, #144	@ 0x90
 8007e02:	589b      	ldr	r3, [r3, r2]
 8007e04:	2202      	movs	r2, #2
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2190      	movs	r1, #144	@ 0x90
 8007e0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e0e:	23a4      	movs	r3, #164	@ 0xa4
 8007e10:	18fb      	adds	r3, r7, r3
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2208      	movs	r2, #8
 8007e16:	4013      	ands	r3, r2
 8007e18:	d017      	beq.n	8007e4a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e1a:	23a0      	movs	r3, #160	@ 0xa0
 8007e1c:	18fb      	adds	r3, r7, r3
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2220      	movs	r2, #32
 8007e22:	4013      	ands	r3, r2
 8007e24:	d105      	bne.n	8007e32 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e26:	239c      	movs	r3, #156	@ 0x9c
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a5b      	ldr	r2, [pc, #364]	@ (8007f9c <HAL_UART_IRQHandler+0x2c0>)
 8007e2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e30:	d00b      	beq.n	8007e4a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2208      	movs	r2, #8
 8007e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2290      	movs	r2, #144	@ 0x90
 8007e3e:	589b      	ldr	r3, [r3, r2]
 8007e40:	2208      	movs	r2, #8
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2190      	movs	r1, #144	@ 0x90
 8007e48:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e4a:	23a4      	movs	r3, #164	@ 0xa4
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	2380      	movs	r3, #128	@ 0x80
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	4013      	ands	r3, r2
 8007e56:	d013      	beq.n	8007e80 <HAL_UART_IRQHandler+0x1a4>
 8007e58:	23a0      	movs	r3, #160	@ 0xa0
 8007e5a:	18fb      	adds	r3, r7, r3
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	2380      	movs	r3, #128	@ 0x80
 8007e60:	04db      	lsls	r3, r3, #19
 8007e62:	4013      	ands	r3, r2
 8007e64:	d00c      	beq.n	8007e80 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2280      	movs	r2, #128	@ 0x80
 8007e6c:	0112      	lsls	r2, r2, #4
 8007e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2290      	movs	r2, #144	@ 0x90
 8007e74:	589b      	ldr	r3, [r3, r2]
 8007e76:	2220      	movs	r2, #32
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2190      	movs	r1, #144	@ 0x90
 8007e7e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2290      	movs	r2, #144	@ 0x90
 8007e84:	589b      	ldr	r3, [r3, r2]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d100      	bne.n	8007e8c <HAL_UART_IRQHandler+0x1b0>
 8007e8a:	e23d      	b.n	8008308 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e8c:	23a4      	movs	r3, #164	@ 0xa4
 8007e8e:	18fb      	adds	r3, r7, r3
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2220      	movs	r2, #32
 8007e94:	4013      	ands	r3, r2
 8007e96:	d015      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e98:	23a0      	movs	r3, #160	@ 0xa0
 8007e9a:	18fb      	adds	r3, r7, r3
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	d106      	bne.n	8007eb2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ea4:	239c      	movs	r3, #156	@ 0x9c
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	2380      	movs	r3, #128	@ 0x80
 8007eac:	055b      	lsls	r3, r3, #21
 8007eae:	4013      	ands	r3, r2
 8007eb0:	d008      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	0010      	movs	r0, r2
 8007ec2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2290      	movs	r2, #144	@ 0x90
 8007ec8:	589b      	ldr	r3, [r3, r2]
 8007eca:	2194      	movs	r1, #148	@ 0x94
 8007ecc:	187a      	adds	r2, r7, r1
 8007ece:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2240      	movs	r2, #64	@ 0x40
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b40      	cmp	r3, #64	@ 0x40
 8007edc:	d004      	beq.n	8007ee8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ede:	187b      	adds	r3, r7, r1
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2228      	movs	r2, #40	@ 0x28
 8007ee4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ee6:	d04c      	beq.n	8007f82 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	0018      	movs	r0, r3
 8007eec:	f000 ffe8 	bl	8008ec0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2240      	movs	r2, #64	@ 0x40
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b40      	cmp	r3, #64	@ 0x40
 8007efc:	d13c      	bne.n	8007f78 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007efe:	f3ef 8310 	mrs	r3, PRIMASK
 8007f02:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8007f04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f06:	2090      	movs	r0, #144	@ 0x90
 8007f08:	183a      	adds	r2, r7, r0
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f12:	f383 8810 	msr	PRIMASK, r3
}
 8007f16:	46c0      	nop			@ (mov r8, r8)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2140      	movs	r1, #64	@ 0x40
 8007f24:	438a      	bics	r2, r1
 8007f26:	609a      	str	r2, [r3, #8]
 8007f28:	183b      	adds	r3, r7, r0
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f30:	f383 8810 	msr	PRIMASK, r3
}
 8007f34:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2280      	movs	r2, #128	@ 0x80
 8007f3a:	589b      	ldr	r3, [r3, r2]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d016      	beq.n	8007f6e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2280      	movs	r2, #128	@ 0x80
 8007f44:	589b      	ldr	r3, [r3, r2]
 8007f46:	4a17      	ldr	r2, [pc, #92]	@ (8007fa4 <HAL_UART_IRQHandler+0x2c8>)
 8007f48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2280      	movs	r2, #128	@ 0x80
 8007f4e:	589b      	ldr	r3, [r3, r2]
 8007f50:	0018      	movs	r0, r3
 8007f52:	f7fd f8ef 	bl	8005134 <HAL_DMA_Abort_IT>
 8007f56:	1e03      	subs	r3, r0, #0
 8007f58:	d01c      	beq.n	8007f94 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2280      	movs	r2, #128	@ 0x80
 8007f5e:	589b      	ldr	r3, [r3, r2]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	2180      	movs	r1, #128	@ 0x80
 8007f66:	5852      	ldr	r2, [r2, r1]
 8007f68:	0010      	movs	r0, r2
 8007f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	e012      	b.n	8007f94 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	0018      	movs	r0, r3
 8007f72:	f000 f9e1 	bl	8008338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f76:	e00d      	b.n	8007f94 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f000 f9dc 	bl	8008338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f80:	e008      	b.n	8007f94 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	0018      	movs	r0, r3
 8007f86:	f000 f9d7 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2290      	movs	r2, #144	@ 0x90
 8007f8e:	2100      	movs	r1, #0
 8007f90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007f92:	e1b9      	b.n	8008308 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f94:	46c0      	nop			@ (mov r8, r8)
    return;
 8007f96:	e1b7      	b.n	8008308 <HAL_UART_IRQHandler+0x62c>
 8007f98:	0000080f 	.word	0x0000080f
 8007f9c:	10000001 	.word	0x10000001
 8007fa0:	04000120 	.word	0x04000120
 8007fa4:	08008f8d 	.word	0x08008f8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d000      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x2d6>
 8007fb0:	e13e      	b.n	8008230 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fb2:	23a4      	movs	r3, #164	@ 0xa4
 8007fb4:	18fb      	adds	r3, r7, r3
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2210      	movs	r2, #16
 8007fba:	4013      	ands	r3, r2
 8007fbc:	d100      	bne.n	8007fc0 <HAL_UART_IRQHandler+0x2e4>
 8007fbe:	e137      	b.n	8008230 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fc0:	23a0      	movs	r3, #160	@ 0xa0
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	4013      	ands	r3, r2
 8007fca:	d100      	bne.n	8007fce <HAL_UART_IRQHandler+0x2f2>
 8007fcc:	e130      	b.n	8008230 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2210      	movs	r2, #16
 8007fd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2240      	movs	r2, #64	@ 0x40
 8007fde:	4013      	ands	r3, r2
 8007fe0:	2b40      	cmp	r3, #64	@ 0x40
 8007fe2:	d000      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x30a>
 8007fe4:	e0a4      	b.n	8008130 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2280      	movs	r2, #128	@ 0x80
 8007fea:	589b      	ldr	r3, [r3, r2]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	217e      	movs	r1, #126	@ 0x7e
 8007ff2:	187b      	adds	r3, r7, r1
 8007ff4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007ff6:	187b      	adds	r3, r7, r1
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d100      	bne.n	8008000 <HAL_UART_IRQHandler+0x324>
 8007ffe:	e185      	b.n	800830c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	225c      	movs	r2, #92	@ 0x5c
 8008004:	5a9b      	ldrh	r3, [r3, r2]
 8008006:	187a      	adds	r2, r7, r1
 8008008:	8812      	ldrh	r2, [r2, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d300      	bcc.n	8008010 <HAL_UART_IRQHandler+0x334>
 800800e:	e17d      	b.n	800830c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	187a      	adds	r2, r7, r1
 8008014:	215e      	movs	r1, #94	@ 0x5e
 8008016:	8812      	ldrh	r2, [r2, #0]
 8008018:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2280      	movs	r2, #128	@ 0x80
 800801e:	589b      	ldr	r3, [r3, r2]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2220      	movs	r2, #32
 8008026:	4013      	ands	r3, r2
 8008028:	d170      	bne.n	800810c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800802a:	f3ef 8310 	mrs	r3, PRIMASK
 800802e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008032:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008034:	2301      	movs	r3, #1
 8008036:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803a:	f383 8810 	msr	PRIMASK, r3
}
 800803e:	46c0      	nop			@ (mov r8, r8)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	49b4      	ldr	r1, [pc, #720]	@ (800831c <HAL_UART_IRQHandler+0x640>)
 800804c:	400a      	ands	r2, r1
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008052:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	f383 8810 	msr	PRIMASK, r3
}
 800805a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800805c:	f3ef 8310 	mrs	r3, PRIMASK
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008064:	677b      	str	r3, [r7, #116]	@ 0x74
 8008066:	2301      	movs	r3, #1
 8008068:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800806a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800806c:	f383 8810 	msr	PRIMASK, r3
}
 8008070:	46c0      	nop			@ (mov r8, r8)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2101      	movs	r1, #1
 800807e:	438a      	bics	r2, r1
 8008080:	609a      	str	r2, [r3, #8]
 8008082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008084:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008088:	f383 8810 	msr	PRIMASK, r3
}
 800808c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800808e:	f3ef 8310 	mrs	r3, PRIMASK
 8008092:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008096:	673b      	str	r3, [r7, #112]	@ 0x70
 8008098:	2301      	movs	r3, #1
 800809a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800809e:	f383 8810 	msr	PRIMASK, r3
}
 80080a2:	46c0      	nop			@ (mov r8, r8)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2140      	movs	r1, #64	@ 0x40
 80080b0:	438a      	bics	r2, r1
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080b6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080ba:	f383 8810 	msr	PRIMASK, r3
}
 80080be:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	228c      	movs	r2, #140	@ 0x8c
 80080c4:	2120      	movs	r1, #32
 80080c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ce:	f3ef 8310 	mrs	r3, PRIMASK
 80080d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80080d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080d8:	2301      	movs	r3, #1
 80080da:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080de:	f383 8810 	msr	PRIMASK, r3
}
 80080e2:	46c0      	nop			@ (mov r8, r8)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2110      	movs	r1, #16
 80080f0:	438a      	bics	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080fa:	f383 8810 	msr	PRIMASK, r3
}
 80080fe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2280      	movs	r2, #128	@ 0x80
 8008104:	589b      	ldr	r3, [r3, r2]
 8008106:	0018      	movs	r0, r3
 8008108:	f7fc ffb2 	bl	8005070 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	225c      	movs	r2, #92	@ 0x5c
 8008116:	5a9a      	ldrh	r2, [r3, r2]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	215e      	movs	r1, #94	@ 0x5e
 800811c:	5a5b      	ldrh	r3, [r3, r1]
 800811e:	b29b      	uxth	r3, r3
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	b29a      	uxth	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	0011      	movs	r1, r2
 8008128:	0018      	movs	r0, r3
 800812a:	f000 f90d 	bl	8008348 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800812e:	e0ed      	b.n	800830c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	225c      	movs	r2, #92	@ 0x5c
 8008134:	5a99      	ldrh	r1, [r3, r2]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	225e      	movs	r2, #94	@ 0x5e
 800813a:	5a9b      	ldrh	r3, [r3, r2]
 800813c:	b29a      	uxth	r2, r3
 800813e:	208e      	movs	r0, #142	@ 0x8e
 8008140:	183b      	adds	r3, r7, r0
 8008142:	1a8a      	subs	r2, r1, r2
 8008144:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	225e      	movs	r2, #94	@ 0x5e
 800814a:	5a9b      	ldrh	r3, [r3, r2]
 800814c:	b29b      	uxth	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d100      	bne.n	8008154 <HAL_UART_IRQHandler+0x478>
 8008152:	e0dd      	b.n	8008310 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8008154:	183b      	adds	r3, r7, r0
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d100      	bne.n	800815e <HAL_UART_IRQHandler+0x482>
 800815c:	e0d8      	b.n	8008310 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800815e:	f3ef 8310 	mrs	r3, PRIMASK
 8008162:	60fb      	str	r3, [r7, #12]
  return(result);
 8008164:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008166:	2488      	movs	r4, #136	@ 0x88
 8008168:	193a      	adds	r2, r7, r4
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	2301      	movs	r3, #1
 800816e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f383 8810 	msr	PRIMASK, r3
}
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4967      	ldr	r1, [pc, #412]	@ (8008320 <HAL_UART_IRQHandler+0x644>)
 8008184:	400a      	ands	r2, r1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	193b      	adds	r3, r7, r4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f383 8810 	msr	PRIMASK, r3
}
 8008194:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008196:	f3ef 8310 	mrs	r3, PRIMASK
 800819a:	61bb      	str	r3, [r7, #24]
  return(result);
 800819c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800819e:	2484      	movs	r4, #132	@ 0x84
 80081a0:	193a      	adds	r2, r7, r4
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	2301      	movs	r3, #1
 80081a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f383 8810 	msr	PRIMASK, r3
}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	495a      	ldr	r1, [pc, #360]	@ (8008324 <HAL_UART_IRQHandler+0x648>)
 80081bc:	400a      	ands	r2, r1
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	193b      	adds	r3, r7, r4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	f383 8810 	msr	PRIMASK, r3
}
 80081cc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	228c      	movs	r2, #140	@ 0x8c
 80081d2:	2120      	movs	r1, #32
 80081d4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081e2:	f3ef 8310 	mrs	r3, PRIMASK
 80081e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ea:	2480      	movs	r4, #128	@ 0x80
 80081ec:	193a      	adds	r2, r7, r4
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	2301      	movs	r3, #1
 80081f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f6:	f383 8810 	msr	PRIMASK, r3
}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2110      	movs	r1, #16
 8008208:	438a      	bics	r2, r1
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	193b      	adds	r3, r7, r4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	f383 8810 	msr	PRIMASK, r3
}
 8008218:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2202      	movs	r2, #2
 800821e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008220:	183b      	adds	r3, r7, r0
 8008222:	881a      	ldrh	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	0011      	movs	r1, r2
 8008228:	0018      	movs	r0, r3
 800822a:	f000 f88d 	bl	8008348 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800822e:	e06f      	b.n	8008310 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008230:	23a4      	movs	r3, #164	@ 0xa4
 8008232:	18fb      	adds	r3, r7, r3
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	2380      	movs	r3, #128	@ 0x80
 8008238:	035b      	lsls	r3, r3, #13
 800823a:	4013      	ands	r3, r2
 800823c:	d010      	beq.n	8008260 <HAL_UART_IRQHandler+0x584>
 800823e:	239c      	movs	r3, #156	@ 0x9c
 8008240:	18fb      	adds	r3, r7, r3
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	2380      	movs	r3, #128	@ 0x80
 8008246:	03db      	lsls	r3, r3, #15
 8008248:	4013      	ands	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2280      	movs	r2, #128	@ 0x80
 8008252:	0352      	lsls	r2, r2, #13
 8008254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	0018      	movs	r0, r3
 800825a:	f001 fbeb 	bl	8009a34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800825e:	e05a      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008260:	23a4      	movs	r3, #164	@ 0xa4
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2280      	movs	r2, #128	@ 0x80
 8008268:	4013      	ands	r3, r2
 800826a:	d016      	beq.n	800829a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800826c:	23a0      	movs	r3, #160	@ 0xa0
 800826e:	18fb      	adds	r3, r7, r3
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2280      	movs	r2, #128	@ 0x80
 8008274:	4013      	ands	r3, r2
 8008276:	d106      	bne.n	8008286 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008278:	239c      	movs	r3, #156	@ 0x9c
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	2380      	movs	r3, #128	@ 0x80
 8008280:	041b      	lsls	r3, r3, #16
 8008282:	4013      	ands	r3, r2
 8008284:	d009      	beq.n	800829a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800828a:	2b00      	cmp	r3, #0
 800828c:	d042      	beq.n	8008314 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	0010      	movs	r0, r2
 8008296:	4798      	blx	r3
    }
    return;
 8008298:	e03c      	b.n	8008314 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800829a:	23a4      	movs	r3, #164	@ 0xa4
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2240      	movs	r2, #64	@ 0x40
 80082a2:	4013      	ands	r3, r2
 80082a4:	d00a      	beq.n	80082bc <HAL_UART_IRQHandler+0x5e0>
 80082a6:	23a0      	movs	r3, #160	@ 0xa0
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2240      	movs	r2, #64	@ 0x40
 80082ae:	4013      	ands	r3, r2
 80082b0:	d004      	beq.n	80082bc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	0018      	movs	r0, r3
 80082b6:	f000 fe80 	bl	8008fba <UART_EndTransmit_IT>
    return;
 80082ba:	e02c      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80082bc:	23a4      	movs	r3, #164	@ 0xa4
 80082be:	18fb      	adds	r3, r7, r3
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	2380      	movs	r3, #128	@ 0x80
 80082c4:	041b      	lsls	r3, r3, #16
 80082c6:	4013      	ands	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <HAL_UART_IRQHandler+0x606>
 80082ca:	23a0      	movs	r3, #160	@ 0xa0
 80082cc:	18fb      	adds	r3, r7, r3
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	05db      	lsls	r3, r3, #23
 80082d4:	4013      	ands	r3, r2
 80082d6:	d004      	beq.n	80082e2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	0018      	movs	r0, r3
 80082dc:	f001 fbba 	bl	8009a54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082e0:	e019      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80082e2:	23a4      	movs	r3, #164	@ 0xa4
 80082e4:	18fb      	adds	r3, r7, r3
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	2380      	movs	r3, #128	@ 0x80
 80082ea:	045b      	lsls	r3, r3, #17
 80082ec:	4013      	ands	r3, r2
 80082ee:	d012      	beq.n	8008316 <HAL_UART_IRQHandler+0x63a>
 80082f0:	23a0      	movs	r3, #160	@ 0xa0
 80082f2:	18fb      	adds	r3, r7, r3
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da0d      	bge.n	8008316 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f001 fba1 	bl	8009a44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008302:	e008      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
      return;
 8008304:	46c0      	nop			@ (mov r8, r8)
 8008306:	e006      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
    return;
 8008308:	46c0      	nop			@ (mov r8, r8)
 800830a:	e004      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
      return;
 800830c:	46c0      	nop			@ (mov r8, r8)
 800830e:	e002      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
      return;
 8008310:	46c0      	nop			@ (mov r8, r8)
 8008312:	e000      	b.n	8008316 <HAL_UART_IRQHandler+0x63a>
    return;
 8008314:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008316:	46bd      	mov	sp, r7
 8008318:	b02a      	add	sp, #168	@ 0xa8
 800831a:	bdb0      	pop	{r4, r5, r7, pc}
 800831c:	fffffeff 	.word	0xfffffeff
 8008320:	fffffedf 	.word	0xfffffedf
 8008324:	effffffe 	.word	0xeffffffe

08008328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008330:	46c0      	nop			@ (mov r8, r8)
 8008332:	46bd      	mov	sp, r7
 8008334:	b002      	add	sp, #8
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008340:	46c0      	nop			@ (mov r8, r8)
 8008342:	46bd      	mov	sp, r7
 8008344:	b002      	add	sp, #8
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	000a      	movs	r2, r1
 8008352:	1cbb      	adds	r3, r7, #2
 8008354:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008356:	46c0      	nop			@ (mov r8, r8)
 8008358:	46bd      	mov	sp, r7
 800835a:	b002      	add	sp, #8
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008360:	b5b0      	push	{r4, r5, r7, lr}
 8008362:	b090      	sub	sp, #64	@ 0x40
 8008364:	af00      	add	r7, sp, #0
 8008366:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008368:	231a      	movs	r3, #26
 800836a:	2220      	movs	r2, #32
 800836c:	189b      	adds	r3, r3, r2
 800836e:	19db      	adds	r3, r3, r7
 8008370:	2200      	movs	r2, #0
 8008372:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	431a      	orrs	r2, r3
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	431a      	orrs	r2, r3
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	4313      	orrs	r3, r2
 800838a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4aaf      	ldr	r2, [pc, #700]	@ (8008650 <UART_SetConfig+0x2f0>)
 8008394:	4013      	ands	r3, r2
 8008396:	0019      	movs	r1, r3
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839e:	430b      	orrs	r3, r1
 80083a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4aaa      	ldr	r2, [pc, #680]	@ (8008654 <UART_SetConfig+0x2f4>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	0018      	movs	r0, r3
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	68d9      	ldr	r1, [r3, #12]
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	0003      	movs	r3, r0
 80083b8:	430b      	orrs	r3, r1
 80083ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4aa4      	ldr	r2, [pc, #656]	@ (8008658 <UART_SetConfig+0x2f8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80083d2:	4313      	orrs	r3, r2
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	4a9f      	ldr	r2, [pc, #636]	@ (800865c <UART_SetConfig+0x2fc>)
 80083de:	4013      	ands	r3, r2
 80083e0:	0019      	movs	r1, r3
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083e8:	430b      	orrs	r3, r1
 80083ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	220f      	movs	r2, #15
 80083f4:	4393      	bics	r3, r2
 80083f6:	0018      	movs	r0, r3
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	0003      	movs	r3, r0
 8008402:	430b      	orrs	r3, r1
 8008404:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a95      	ldr	r2, [pc, #596]	@ (8008660 <UART_SetConfig+0x300>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d131      	bne.n	8008474 <UART_SetConfig+0x114>
 8008410:	4b94      	ldr	r3, [pc, #592]	@ (8008664 <UART_SetConfig+0x304>)
 8008412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008414:	2203      	movs	r2, #3
 8008416:	4013      	ands	r3, r2
 8008418:	2b03      	cmp	r3, #3
 800841a:	d01d      	beq.n	8008458 <UART_SetConfig+0xf8>
 800841c:	d823      	bhi.n	8008466 <UART_SetConfig+0x106>
 800841e:	2b02      	cmp	r3, #2
 8008420:	d00c      	beq.n	800843c <UART_SetConfig+0xdc>
 8008422:	d820      	bhi.n	8008466 <UART_SetConfig+0x106>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <UART_SetConfig+0xce>
 8008428:	2b01      	cmp	r3, #1
 800842a:	d00e      	beq.n	800844a <UART_SetConfig+0xea>
 800842c:	e01b      	b.n	8008466 <UART_SetConfig+0x106>
 800842e:	231b      	movs	r3, #27
 8008430:	2220      	movs	r2, #32
 8008432:	189b      	adds	r3, r3, r2
 8008434:	19db      	adds	r3, r3, r7
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	e0b4      	b.n	80085a6 <UART_SetConfig+0x246>
 800843c:	231b      	movs	r3, #27
 800843e:	2220      	movs	r2, #32
 8008440:	189b      	adds	r3, r3, r2
 8008442:	19db      	adds	r3, r3, r7
 8008444:	2202      	movs	r2, #2
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e0ad      	b.n	80085a6 <UART_SetConfig+0x246>
 800844a:	231b      	movs	r3, #27
 800844c:	2220      	movs	r2, #32
 800844e:	189b      	adds	r3, r3, r2
 8008450:	19db      	adds	r3, r3, r7
 8008452:	2204      	movs	r2, #4
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	e0a6      	b.n	80085a6 <UART_SetConfig+0x246>
 8008458:	231b      	movs	r3, #27
 800845a:	2220      	movs	r2, #32
 800845c:	189b      	adds	r3, r3, r2
 800845e:	19db      	adds	r3, r3, r7
 8008460:	2208      	movs	r2, #8
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e09f      	b.n	80085a6 <UART_SetConfig+0x246>
 8008466:	231b      	movs	r3, #27
 8008468:	2220      	movs	r2, #32
 800846a:	189b      	adds	r3, r3, r2
 800846c:	19db      	adds	r3, r3, r7
 800846e:	2210      	movs	r2, #16
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e098      	b.n	80085a6 <UART_SetConfig+0x246>
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a7b      	ldr	r2, [pc, #492]	@ (8008668 <UART_SetConfig+0x308>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d131      	bne.n	80084e2 <UART_SetConfig+0x182>
 800847e:	4b79      	ldr	r3, [pc, #484]	@ (8008664 <UART_SetConfig+0x304>)
 8008480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008482:	220c      	movs	r2, #12
 8008484:	4013      	ands	r3, r2
 8008486:	2b0c      	cmp	r3, #12
 8008488:	d01d      	beq.n	80084c6 <UART_SetConfig+0x166>
 800848a:	d823      	bhi.n	80084d4 <UART_SetConfig+0x174>
 800848c:	2b08      	cmp	r3, #8
 800848e:	d00c      	beq.n	80084aa <UART_SetConfig+0x14a>
 8008490:	d820      	bhi.n	80084d4 <UART_SetConfig+0x174>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <UART_SetConfig+0x13c>
 8008496:	2b04      	cmp	r3, #4
 8008498:	d00e      	beq.n	80084b8 <UART_SetConfig+0x158>
 800849a:	e01b      	b.n	80084d4 <UART_SetConfig+0x174>
 800849c:	231b      	movs	r3, #27
 800849e:	2220      	movs	r2, #32
 80084a0:	189b      	adds	r3, r3, r2
 80084a2:	19db      	adds	r3, r3, r7
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	e07d      	b.n	80085a6 <UART_SetConfig+0x246>
 80084aa:	231b      	movs	r3, #27
 80084ac:	2220      	movs	r2, #32
 80084ae:	189b      	adds	r3, r3, r2
 80084b0:	19db      	adds	r3, r3, r7
 80084b2:	2202      	movs	r2, #2
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	e076      	b.n	80085a6 <UART_SetConfig+0x246>
 80084b8:	231b      	movs	r3, #27
 80084ba:	2220      	movs	r2, #32
 80084bc:	189b      	adds	r3, r3, r2
 80084be:	19db      	adds	r3, r3, r7
 80084c0:	2204      	movs	r2, #4
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e06f      	b.n	80085a6 <UART_SetConfig+0x246>
 80084c6:	231b      	movs	r3, #27
 80084c8:	2220      	movs	r2, #32
 80084ca:	189b      	adds	r3, r3, r2
 80084cc:	19db      	adds	r3, r3, r7
 80084ce:	2208      	movs	r2, #8
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	e068      	b.n	80085a6 <UART_SetConfig+0x246>
 80084d4:	231b      	movs	r3, #27
 80084d6:	2220      	movs	r2, #32
 80084d8:	189b      	adds	r3, r3, r2
 80084da:	19db      	adds	r3, r3, r7
 80084dc:	2210      	movs	r2, #16
 80084de:	701a      	strb	r2, [r3, #0]
 80084e0:	e061      	b.n	80085a6 <UART_SetConfig+0x246>
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a61      	ldr	r2, [pc, #388]	@ (800866c <UART_SetConfig+0x30c>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d106      	bne.n	80084fa <UART_SetConfig+0x19a>
 80084ec:	231b      	movs	r3, #27
 80084ee:	2220      	movs	r2, #32
 80084f0:	189b      	adds	r3, r3, r2
 80084f2:	19db      	adds	r3, r3, r7
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	e055      	b.n	80085a6 <UART_SetConfig+0x246>
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a5c      	ldr	r2, [pc, #368]	@ (8008670 <UART_SetConfig+0x310>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d106      	bne.n	8008512 <UART_SetConfig+0x1b2>
 8008504:	231b      	movs	r3, #27
 8008506:	2220      	movs	r2, #32
 8008508:	189b      	adds	r3, r3, r2
 800850a:	19db      	adds	r3, r3, r7
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
 8008510:	e049      	b.n	80085a6 <UART_SetConfig+0x246>
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a50      	ldr	r2, [pc, #320]	@ (8008658 <UART_SetConfig+0x2f8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d13e      	bne.n	800859a <UART_SetConfig+0x23a>
 800851c:	4b51      	ldr	r3, [pc, #324]	@ (8008664 <UART_SetConfig+0x304>)
 800851e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008520:	23c0      	movs	r3, #192	@ 0xc0
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	4013      	ands	r3, r2
 8008526:	22c0      	movs	r2, #192	@ 0xc0
 8008528:	0112      	lsls	r2, r2, #4
 800852a:	4293      	cmp	r3, r2
 800852c:	d027      	beq.n	800857e <UART_SetConfig+0x21e>
 800852e:	22c0      	movs	r2, #192	@ 0xc0
 8008530:	0112      	lsls	r2, r2, #4
 8008532:	4293      	cmp	r3, r2
 8008534:	d82a      	bhi.n	800858c <UART_SetConfig+0x22c>
 8008536:	2280      	movs	r2, #128	@ 0x80
 8008538:	0112      	lsls	r2, r2, #4
 800853a:	4293      	cmp	r3, r2
 800853c:	d011      	beq.n	8008562 <UART_SetConfig+0x202>
 800853e:	2280      	movs	r2, #128	@ 0x80
 8008540:	0112      	lsls	r2, r2, #4
 8008542:	4293      	cmp	r3, r2
 8008544:	d822      	bhi.n	800858c <UART_SetConfig+0x22c>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <UART_SetConfig+0x1f4>
 800854a:	2280      	movs	r2, #128	@ 0x80
 800854c:	00d2      	lsls	r2, r2, #3
 800854e:	4293      	cmp	r3, r2
 8008550:	d00e      	beq.n	8008570 <UART_SetConfig+0x210>
 8008552:	e01b      	b.n	800858c <UART_SetConfig+0x22c>
 8008554:	231b      	movs	r3, #27
 8008556:	2220      	movs	r2, #32
 8008558:	189b      	adds	r3, r3, r2
 800855a:	19db      	adds	r3, r3, r7
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
 8008560:	e021      	b.n	80085a6 <UART_SetConfig+0x246>
 8008562:	231b      	movs	r3, #27
 8008564:	2220      	movs	r2, #32
 8008566:	189b      	adds	r3, r3, r2
 8008568:	19db      	adds	r3, r3, r7
 800856a:	2202      	movs	r2, #2
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	e01a      	b.n	80085a6 <UART_SetConfig+0x246>
 8008570:	231b      	movs	r3, #27
 8008572:	2220      	movs	r2, #32
 8008574:	189b      	adds	r3, r3, r2
 8008576:	19db      	adds	r3, r3, r7
 8008578:	2204      	movs	r2, #4
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e013      	b.n	80085a6 <UART_SetConfig+0x246>
 800857e:	231b      	movs	r3, #27
 8008580:	2220      	movs	r2, #32
 8008582:	189b      	adds	r3, r3, r2
 8008584:	19db      	adds	r3, r3, r7
 8008586:	2208      	movs	r2, #8
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e00c      	b.n	80085a6 <UART_SetConfig+0x246>
 800858c:	231b      	movs	r3, #27
 800858e:	2220      	movs	r2, #32
 8008590:	189b      	adds	r3, r3, r2
 8008592:	19db      	adds	r3, r3, r7
 8008594:	2210      	movs	r2, #16
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	e005      	b.n	80085a6 <UART_SetConfig+0x246>
 800859a:	231b      	movs	r3, #27
 800859c:	2220      	movs	r2, #32
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	19db      	adds	r3, r3, r7
 80085a2:	2210      	movs	r2, #16
 80085a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a2b      	ldr	r2, [pc, #172]	@ (8008658 <UART_SetConfig+0x2f8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d000      	beq.n	80085b2 <UART_SetConfig+0x252>
 80085b0:	e0a9      	b.n	8008706 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085b2:	231b      	movs	r3, #27
 80085b4:	2220      	movs	r2, #32
 80085b6:	189b      	adds	r3, r3, r2
 80085b8:	19db      	adds	r3, r3, r7
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b08      	cmp	r3, #8
 80085be:	d015      	beq.n	80085ec <UART_SetConfig+0x28c>
 80085c0:	dc18      	bgt.n	80085f4 <UART_SetConfig+0x294>
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d00d      	beq.n	80085e2 <UART_SetConfig+0x282>
 80085c6:	dc15      	bgt.n	80085f4 <UART_SetConfig+0x294>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <UART_SetConfig+0x272>
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d005      	beq.n	80085dc <UART_SetConfig+0x27c>
 80085d0:	e010      	b.n	80085f4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d2:	f7fd fce5 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 80085d6:	0003      	movs	r3, r0
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085da:	e014      	b.n	8008606 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085dc:	4b25      	ldr	r3, [pc, #148]	@ (8008674 <UART_SetConfig+0x314>)
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085e0:	e011      	b.n	8008606 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085e2:	f7fd fc51 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 80085e6:	0003      	movs	r3, r0
 80085e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085ea:	e00c      	b.n	8008606 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ec:	2380      	movs	r3, #128	@ 0x80
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085f2:	e008      	b.n	8008606 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80085f8:	231a      	movs	r3, #26
 80085fa:	2220      	movs	r2, #32
 80085fc:	189b      	adds	r3, r3, r2
 80085fe:	19db      	adds	r3, r3, r7
 8008600:	2201      	movs	r2, #1
 8008602:	701a      	strb	r2, [r3, #0]
        break;
 8008604:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	2b00      	cmp	r3, #0
 800860a:	d100      	bne.n	800860e <UART_SetConfig+0x2ae>
 800860c:	e14b      	b.n	80088a6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008612:	4b19      	ldr	r3, [pc, #100]	@ (8008678 <UART_SetConfig+0x318>)
 8008614:	0052      	lsls	r2, r2, #1
 8008616:	5ad3      	ldrh	r3, [r2, r3]
 8008618:	0019      	movs	r1, r3
 800861a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800861c:	f7f7 fd8e 	bl	800013c <__udivsi3>
 8008620:	0003      	movs	r3, r0
 8008622:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	0013      	movs	r3, r2
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	189b      	adds	r3, r3, r2
 800862e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008630:	429a      	cmp	r2, r3
 8008632:	d305      	bcc.n	8008640 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800863a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800863c:	429a      	cmp	r2, r3
 800863e:	d91d      	bls.n	800867c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008640:	231a      	movs	r3, #26
 8008642:	2220      	movs	r2, #32
 8008644:	189b      	adds	r3, r3, r2
 8008646:	19db      	adds	r3, r3, r7
 8008648:	2201      	movs	r2, #1
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	e12b      	b.n	80088a6 <UART_SetConfig+0x546>
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	cfff69f3 	.word	0xcfff69f3
 8008654:	ffffcfff 	.word	0xffffcfff
 8008658:	40008000 	.word	0x40008000
 800865c:	11fff4ff 	.word	0x11fff4ff
 8008660:	40013800 	.word	0x40013800
 8008664:	40021000 	.word	0x40021000
 8008668:	40004400 	.word	0x40004400
 800866c:	40004800 	.word	0x40004800
 8008670:	40004c00 	.word	0x40004c00
 8008674:	00f42400 	.word	0x00f42400
 8008678:	0800a894 	.word	0x0800a894
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800867c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867e:	61bb      	str	r3, [r7, #24]
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008688:	4b92      	ldr	r3, [pc, #584]	@ (80088d4 <UART_SetConfig+0x574>)
 800868a:	0052      	lsls	r2, r2, #1
 800868c:	5ad3      	ldrh	r3, [r2, r3]
 800868e:	613b      	str	r3, [r7, #16]
 8008690:	2300      	movs	r3, #0
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	69b8      	ldr	r0, [r7, #24]
 800869a:	69f9      	ldr	r1, [r7, #28]
 800869c:	f7f7 fec4 	bl	8000428 <__aeabi_uldivmod>
 80086a0:	0002      	movs	r2, r0
 80086a2:	000b      	movs	r3, r1
 80086a4:	0e11      	lsrs	r1, r2, #24
 80086a6:	021d      	lsls	r5, r3, #8
 80086a8:	430d      	orrs	r5, r1
 80086aa:	0214      	lsls	r4, r2, #8
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	085b      	lsrs	r3, r3, #1
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	68b8      	ldr	r0, [r7, #8]
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	1900      	adds	r0, r0, r4
 80086be:	4169      	adcs	r1, r5
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	603b      	str	r3, [r7, #0]
 80086c6:	2300      	movs	r3, #0
 80086c8:	607b      	str	r3, [r7, #4]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f7f7 feab 	bl	8000428 <__aeabi_uldivmod>
 80086d2:	0002      	movs	r2, r0
 80086d4:	000b      	movs	r3, r1
 80086d6:	0013      	movs	r3, r2
 80086d8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086dc:	23c0      	movs	r3, #192	@ 0xc0
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d309      	bcc.n	80086f8 <UART_SetConfig+0x398>
 80086e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e6:	2380      	movs	r3, #128	@ 0x80
 80086e8:	035b      	lsls	r3, r3, #13
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d204      	bcs.n	80086f8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f4:	60da      	str	r2, [r3, #12]
 80086f6:	e0d6      	b.n	80088a6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80086f8:	231a      	movs	r3, #26
 80086fa:	2220      	movs	r2, #32
 80086fc:	189b      	adds	r3, r3, r2
 80086fe:	19db      	adds	r3, r3, r7
 8008700:	2201      	movs	r2, #1
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e0cf      	b.n	80088a6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	69da      	ldr	r2, [r3, #28]
 800870a:	2380      	movs	r3, #128	@ 0x80
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	429a      	cmp	r2, r3
 8008710:	d000      	beq.n	8008714 <UART_SetConfig+0x3b4>
 8008712:	e070      	b.n	80087f6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8008714:	231b      	movs	r3, #27
 8008716:	2220      	movs	r2, #32
 8008718:	189b      	adds	r3, r3, r2
 800871a:	19db      	adds	r3, r3, r7
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d015      	beq.n	800874e <UART_SetConfig+0x3ee>
 8008722:	dc18      	bgt.n	8008756 <UART_SetConfig+0x3f6>
 8008724:	2b04      	cmp	r3, #4
 8008726:	d00d      	beq.n	8008744 <UART_SetConfig+0x3e4>
 8008728:	dc15      	bgt.n	8008756 <UART_SetConfig+0x3f6>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <UART_SetConfig+0x3d4>
 800872e:	2b02      	cmp	r3, #2
 8008730:	d005      	beq.n	800873e <UART_SetConfig+0x3de>
 8008732:	e010      	b.n	8008756 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008734:	f7fd fc34 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8008738:	0003      	movs	r3, r0
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800873c:	e014      	b.n	8008768 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800873e:	4b66      	ldr	r3, [pc, #408]	@ (80088d8 <UART_SetConfig+0x578>)
 8008740:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008742:	e011      	b.n	8008768 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008744:	f7fd fba0 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8008748:	0003      	movs	r3, r0
 800874a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800874c:	e00c      	b.n	8008768 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800874e:	2380      	movs	r3, #128	@ 0x80
 8008750:	021b      	lsls	r3, r3, #8
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008754:	e008      	b.n	8008768 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800875a:	231a      	movs	r3, #26
 800875c:	2220      	movs	r2, #32
 800875e:	189b      	adds	r3, r3, r2
 8008760:	19db      	adds	r3, r3, r7
 8008762:	2201      	movs	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
        break;
 8008766:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876a:	2b00      	cmp	r3, #0
 800876c:	d100      	bne.n	8008770 <UART_SetConfig+0x410>
 800876e:	e09a      	b.n	80088a6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008774:	4b57      	ldr	r3, [pc, #348]	@ (80088d4 <UART_SetConfig+0x574>)
 8008776:	0052      	lsls	r2, r2, #1
 8008778:	5ad3      	ldrh	r3, [r2, r3]
 800877a:	0019      	movs	r1, r3
 800877c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800877e:	f7f7 fcdd 	bl	800013c <__udivsi3>
 8008782:	0003      	movs	r3, r0
 8008784:	005a      	lsls	r2, r3, #1
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	18d2      	adds	r2, r2, r3
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	0019      	movs	r1, r3
 8008794:	0010      	movs	r0, r2
 8008796:	f7f7 fcd1 	bl	800013c <__udivsi3>
 800879a:	0003      	movs	r3, r0
 800879c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	2b0f      	cmp	r3, #15
 80087a2:	d921      	bls.n	80087e8 <UART_SetConfig+0x488>
 80087a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a6:	2380      	movs	r3, #128	@ 0x80
 80087a8:	025b      	lsls	r3, r3, #9
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d21c      	bcs.n	80087e8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	200e      	movs	r0, #14
 80087b4:	2420      	movs	r4, #32
 80087b6:	1903      	adds	r3, r0, r4
 80087b8:	19db      	adds	r3, r3, r7
 80087ba:	210f      	movs	r1, #15
 80087bc:	438a      	bics	r2, r1
 80087be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2207      	movs	r2, #7
 80087c8:	4013      	ands	r3, r2
 80087ca:	b299      	uxth	r1, r3
 80087cc:	1903      	adds	r3, r0, r4
 80087ce:	19db      	adds	r3, r3, r7
 80087d0:	1902      	adds	r2, r0, r4
 80087d2:	19d2      	adds	r2, r2, r7
 80087d4:	8812      	ldrh	r2, [r2, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	1902      	adds	r2, r0, r4
 80087e0:	19d2      	adds	r2, r2, r7
 80087e2:	8812      	ldrh	r2, [r2, #0]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	e05e      	b.n	80088a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80087e8:	231a      	movs	r3, #26
 80087ea:	2220      	movs	r2, #32
 80087ec:	189b      	adds	r3, r3, r2
 80087ee:	19db      	adds	r3, r3, r7
 80087f0:	2201      	movs	r2, #1
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	e057      	b.n	80088a6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087f6:	231b      	movs	r3, #27
 80087f8:	2220      	movs	r2, #32
 80087fa:	189b      	adds	r3, r3, r2
 80087fc:	19db      	adds	r3, r3, r7
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b08      	cmp	r3, #8
 8008802:	d015      	beq.n	8008830 <UART_SetConfig+0x4d0>
 8008804:	dc18      	bgt.n	8008838 <UART_SetConfig+0x4d8>
 8008806:	2b04      	cmp	r3, #4
 8008808:	d00d      	beq.n	8008826 <UART_SetConfig+0x4c6>
 800880a:	dc15      	bgt.n	8008838 <UART_SetConfig+0x4d8>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <UART_SetConfig+0x4b6>
 8008810:	2b02      	cmp	r3, #2
 8008812:	d005      	beq.n	8008820 <UART_SetConfig+0x4c0>
 8008814:	e010      	b.n	8008838 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008816:	f7fd fbc3 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 800881a:	0003      	movs	r3, r0
 800881c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800881e:	e014      	b.n	800884a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008820:	4b2d      	ldr	r3, [pc, #180]	@ (80088d8 <UART_SetConfig+0x578>)
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008824:	e011      	b.n	800884a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008826:	f7fd fb2f 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 800882a:	0003      	movs	r3, r0
 800882c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882e:	e00c      	b.n	800884a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008830:	2380      	movs	r3, #128	@ 0x80
 8008832:	021b      	lsls	r3, r3, #8
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008836:	e008      	b.n	800884a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800883c:	231a      	movs	r3, #26
 800883e:	2220      	movs	r2, #32
 8008840:	189b      	adds	r3, r3, r2
 8008842:	19db      	adds	r3, r3, r7
 8008844:	2201      	movs	r2, #1
 8008846:	701a      	strb	r2, [r3, #0]
        break;
 8008848:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800884a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884c:	2b00      	cmp	r3, #0
 800884e:	d02a      	beq.n	80088a6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008854:	4b1f      	ldr	r3, [pc, #124]	@ (80088d4 <UART_SetConfig+0x574>)
 8008856:	0052      	lsls	r2, r2, #1
 8008858:	5ad3      	ldrh	r3, [r2, r3]
 800885a:	0019      	movs	r1, r3
 800885c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800885e:	f7f7 fc6d 	bl	800013c <__udivsi3>
 8008862:	0003      	movs	r3, r0
 8008864:	001a      	movs	r2, r3
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	18d2      	adds	r2, r2, r3
 800886e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	0019      	movs	r1, r3
 8008874:	0010      	movs	r0, r2
 8008876:	f7f7 fc61 	bl	800013c <__udivsi3>
 800887a:	0003      	movs	r3, r0
 800887c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d90a      	bls.n	800889a <UART_SetConfig+0x53a>
 8008884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008886:	2380      	movs	r3, #128	@ 0x80
 8008888:	025b      	lsls	r3, r3, #9
 800888a:	429a      	cmp	r2, r3
 800888c:	d205      	bcs.n	800889a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	b29a      	uxth	r2, r3
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60da      	str	r2, [r3, #12]
 8008898:	e005      	b.n	80088a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800889a:	231a      	movs	r3, #26
 800889c:	2220      	movs	r2, #32
 800889e:	189b      	adds	r3, r3, r2
 80088a0:	19db      	adds	r3, r3, r7
 80088a2:	2201      	movs	r2, #1
 80088a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	226a      	movs	r2, #106	@ 0x6a
 80088aa:	2101      	movs	r1, #1
 80088ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80088ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b0:	2268      	movs	r2, #104	@ 0x68
 80088b2:	2101      	movs	r1, #1
 80088b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	2200      	movs	r2, #0
 80088ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088be:	2200      	movs	r2, #0
 80088c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088c2:	231a      	movs	r3, #26
 80088c4:	2220      	movs	r2, #32
 80088c6:	189b      	adds	r3, r3, r2
 80088c8:	19db      	adds	r3, r3, r7
 80088ca:	781b      	ldrb	r3, [r3, #0]
}
 80088cc:	0018      	movs	r0, r3
 80088ce:	46bd      	mov	sp, r7
 80088d0:	b010      	add	sp, #64	@ 0x40
 80088d2:	bdb0      	pop	{r4, r5, r7, pc}
 80088d4:	0800a894 	.word	0x0800a894
 80088d8:	00f42400 	.word	0x00f42400

080088dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e8:	2208      	movs	r2, #8
 80088ea:	4013      	ands	r3, r2
 80088ec:	d00b      	beq.n	8008906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	4a4a      	ldr	r2, [pc, #296]	@ (8008a20 <UART_AdvFeatureConfig+0x144>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	0019      	movs	r1, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890a:	2201      	movs	r2, #1
 800890c:	4013      	ands	r3, r2
 800890e:	d00b      	beq.n	8008928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	4a43      	ldr	r2, [pc, #268]	@ (8008a24 <UART_AdvFeatureConfig+0x148>)
 8008918:	4013      	ands	r3, r2
 800891a:	0019      	movs	r1, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892c:	2202      	movs	r2, #2
 800892e:	4013      	ands	r3, r2
 8008930:	d00b      	beq.n	800894a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4a3b      	ldr	r2, [pc, #236]	@ (8008a28 <UART_AdvFeatureConfig+0x14c>)
 800893a:	4013      	ands	r3, r2
 800893c:	0019      	movs	r1, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894e:	2204      	movs	r2, #4
 8008950:	4013      	ands	r3, r2
 8008952:	d00b      	beq.n	800896c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	4a34      	ldr	r2, [pc, #208]	@ (8008a2c <UART_AdvFeatureConfig+0x150>)
 800895c:	4013      	ands	r3, r2
 800895e:	0019      	movs	r1, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	2210      	movs	r2, #16
 8008972:	4013      	ands	r3, r2
 8008974:	d00b      	beq.n	800898e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	4a2c      	ldr	r2, [pc, #176]	@ (8008a30 <UART_AdvFeatureConfig+0x154>)
 800897e:	4013      	ands	r3, r2
 8008980:	0019      	movs	r1, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008992:	2220      	movs	r2, #32
 8008994:	4013      	ands	r3, r2
 8008996:	d00b      	beq.n	80089b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	4a25      	ldr	r2, [pc, #148]	@ (8008a34 <UART_AdvFeatureConfig+0x158>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	0019      	movs	r1, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b4:	2240      	movs	r2, #64	@ 0x40
 80089b6:	4013      	ands	r3, r2
 80089b8:	d01d      	beq.n	80089f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a38 <UART_AdvFeatureConfig+0x15c>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	0019      	movs	r1, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089d6:	2380      	movs	r3, #128	@ 0x80
 80089d8:	035b      	lsls	r3, r3, #13
 80089da:	429a      	cmp	r2, r3
 80089dc:	d10b      	bne.n	80089f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	4a15      	ldr	r2, [pc, #84]	@ (8008a3c <UART_AdvFeatureConfig+0x160>)
 80089e6:	4013      	ands	r3, r2
 80089e8:	0019      	movs	r1, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	2280      	movs	r2, #128	@ 0x80
 80089fc:	4013      	ands	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4a0e      	ldr	r2, [pc, #56]	@ (8008a40 <UART_AdvFeatureConfig+0x164>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	0019      	movs	r1, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	605a      	str	r2, [r3, #4]
  }
}
 8008a18:	46c0      	nop			@ (mov r8, r8)
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	b002      	add	sp, #8
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	ffff7fff 	.word	0xffff7fff
 8008a24:	fffdffff 	.word	0xfffdffff
 8008a28:	fffeffff 	.word	0xfffeffff
 8008a2c:	fffbffff 	.word	0xfffbffff
 8008a30:	ffffefff 	.word	0xffffefff
 8008a34:	ffffdfff 	.word	0xffffdfff
 8008a38:	ffefffff 	.word	0xffefffff
 8008a3c:	ff9fffff 	.word	0xff9fffff
 8008a40:	fff7ffff 	.word	0xfff7ffff

08008a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b092      	sub	sp, #72	@ 0x48
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2290      	movs	r2, #144	@ 0x90
 8008a50:	2100      	movs	r1, #0
 8008a52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a54:	f7fb f8e4 	bl	8003c20 <HAL_GetTick>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2208      	movs	r2, #8
 8008a64:	4013      	ands	r3, r2
 8008a66:	2b08      	cmp	r3, #8
 8008a68:	d12d      	bne.n	8008ac6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6c:	2280      	movs	r2, #128	@ 0x80
 8008a6e:	0391      	lsls	r1, r2, #14
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	4a47      	ldr	r2, [pc, #284]	@ (8008b90 <UART_CheckIdleState+0x14c>)
 8008a74:	9200      	str	r2, [sp, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f000 f88e 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8008a7c:	1e03      	subs	r3, r0, #0
 8008a7e:	d022      	beq.n	8008ac6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a80:	f3ef 8310 	mrs	r3, PRIMASK
 8008a84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	f383 8810 	msr	PRIMASK, r3
}
 8008a94:	46c0      	nop			@ (mov r8, r8)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2180      	movs	r1, #128	@ 0x80
 8008aa2:	438a      	bics	r2, r1
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	f383 8810 	msr	PRIMASK, r3
}
 8008ab0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2288      	movs	r2, #136	@ 0x88
 8008ab6:	2120      	movs	r1, #32
 8008ab8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2284      	movs	r2, #132	@ 0x84
 8008abe:	2100      	movs	r1, #0
 8008ac0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e060      	b.n	8008b88 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2204      	movs	r2, #4
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d146      	bne.n	8008b62 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad6:	2280      	movs	r2, #128	@ 0x80
 8008ad8:	03d1      	lsls	r1, r2, #15
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4a2c      	ldr	r2, [pc, #176]	@ (8008b90 <UART_CheckIdleState+0x14c>)
 8008ade:	9200      	str	r2, [sp, #0]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f000 f859 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 8008ae6:	1e03      	subs	r3, r0, #0
 8008ae8:	d03b      	beq.n	8008b62 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aea:	f3ef 8310 	mrs	r3, PRIMASK
 8008aee:	60fb      	str	r3, [r7, #12]
  return(result);
 8008af0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af4:	2301      	movs	r3, #1
 8008af6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f383 8810 	msr	PRIMASK, r3
}
 8008afe:	46c0      	nop			@ (mov r8, r8)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4922      	ldr	r1, [pc, #136]	@ (8008b94 <UART_CheckIdleState+0x150>)
 8008b0c:	400a      	ands	r2, r1
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f383 8810 	msr	PRIMASK, r3
}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b20:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b22:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b26:	2301      	movs	r3, #1
 8008b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	f383 8810 	msr	PRIMASK, r3
}
 8008b30:	46c0      	nop			@ (mov r8, r8)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	438a      	bics	r2, r1
 8008b40:	609a      	str	r2, [r3, #8]
 8008b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	f383 8810 	msr	PRIMASK, r3
}
 8008b4c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	228c      	movs	r2, #140	@ 0x8c
 8008b52:	2120      	movs	r1, #32
 8008b54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2284      	movs	r2, #132	@ 0x84
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e012      	b.n	8008b88 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2288      	movs	r2, #136	@ 0x88
 8008b66:	2120      	movs	r1, #32
 8008b68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	228c      	movs	r2, #140	@ 0x8c
 8008b6e:	2120      	movs	r1, #32
 8008b70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2284      	movs	r2, #132	@ 0x84
 8008b82:	2100      	movs	r1, #0
 8008b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	0018      	movs	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	b010      	add	sp, #64	@ 0x40
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	01ffffff 	.word	0x01ffffff
 8008b94:	fffffedf 	.word	0xfffffedf

08008b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	1dfb      	adds	r3, r7, #7
 8008ba6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba8:	e051      	b.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	3301      	adds	r3, #1
 8008bae:	d04e      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb0:	f7fb f836 	bl	8003c20 <HAL_GetTick>
 8008bb4:	0002      	movs	r2, r0
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d302      	bcc.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e051      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	d03b      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b80      	cmp	r3, #128	@ 0x80
 8008bda:	d038      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	d035      	beq.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	2208      	movs	r2, #8
 8008bea:	4013      	ands	r3, r2
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d111      	bne.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 f960 	bl	8008ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2290      	movs	r2, #144	@ 0x90
 8008c04:	2108      	movs	r1, #8
 8008c06:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2284      	movs	r2, #132	@ 0x84
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e02c      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69da      	ldr	r2, [r3, #28]
 8008c1a:	2380      	movs	r3, #128	@ 0x80
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	401a      	ands	r2, r3
 8008c20:	2380      	movs	r3, #128	@ 0x80
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d112      	bne.n	8008c4e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2280      	movs	r2, #128	@ 0x80
 8008c2e:	0112      	lsls	r2, r2, #4
 8008c30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	0018      	movs	r0, r3
 8008c36:	f000 f943 	bl	8008ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2290      	movs	r2, #144	@ 0x90
 8008c3e:	2120      	movs	r1, #32
 8008c40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2284      	movs	r2, #132	@ 0x84
 8008c46:	2100      	movs	r1, #0
 8008c48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e00f      	b.n	8008c6e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	4013      	ands	r3, r2
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	425a      	negs	r2, r3
 8008c5e:	4153      	adcs	r3, r2
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	001a      	movs	r2, r3
 8008c64:	1dfb      	adds	r3, r7, #7
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d09e      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	0018      	movs	r0, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b004      	add	sp, #16
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b098      	sub	sp, #96	@ 0x60
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	1dbb      	adds	r3, r7, #6
 8008c84:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	1dba      	adds	r2, r7, #6
 8008c90:	215c      	movs	r1, #92	@ 0x5c
 8008c92:	8812      	ldrh	r2, [r2, #0]
 8008c94:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1dba      	adds	r2, r7, #6
 8008c9a:	215e      	movs	r1, #94	@ 0x5e
 8008c9c:	8812      	ldrh	r2, [r2, #0]
 8008c9e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	2380      	movs	r3, #128	@ 0x80
 8008cac:	015b      	lsls	r3, r3, #5
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d10d      	bne.n	8008cce <UART_Start_Receive_IT+0x56>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <UART_Start_Receive_IT+0x4c>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2260      	movs	r2, #96	@ 0x60
 8008cbe:	497b      	ldr	r1, [pc, #492]	@ (8008eac <UART_Start_Receive_IT+0x234>)
 8008cc0:	5299      	strh	r1, [r3, r2]
 8008cc2:	e02e      	b.n	8008d22 <UART_Start_Receive_IT+0xaa>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2260      	movs	r2, #96	@ 0x60
 8008cc8:	21ff      	movs	r1, #255	@ 0xff
 8008cca:	5299      	strh	r1, [r3, r2]
 8008ccc:	e029      	b.n	8008d22 <UART_Start_Receive_IT+0xaa>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <UART_Start_Receive_IT+0x7a>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <UART_Start_Receive_IT+0x70>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2260      	movs	r2, #96	@ 0x60
 8008ce2:	21ff      	movs	r1, #255	@ 0xff
 8008ce4:	5299      	strh	r1, [r3, r2]
 8008ce6:	e01c      	b.n	8008d22 <UART_Start_Receive_IT+0xaa>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2260      	movs	r2, #96	@ 0x60
 8008cec:	217f      	movs	r1, #127	@ 0x7f
 8008cee:	5299      	strh	r1, [r3, r2]
 8008cf0:	e017      	b.n	8008d22 <UART_Start_Receive_IT+0xaa>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	2380      	movs	r3, #128	@ 0x80
 8008cf8:	055b      	lsls	r3, r3, #21
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d10d      	bne.n	8008d1a <UART_Start_Receive_IT+0xa2>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <UART_Start_Receive_IT+0x98>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2260      	movs	r2, #96	@ 0x60
 8008d0a:	217f      	movs	r1, #127	@ 0x7f
 8008d0c:	5299      	strh	r1, [r3, r2]
 8008d0e:	e008      	b.n	8008d22 <UART_Start_Receive_IT+0xaa>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2260      	movs	r2, #96	@ 0x60
 8008d14:	213f      	movs	r1, #63	@ 0x3f
 8008d16:	5299      	strh	r1, [r3, r2]
 8008d18:	e003      	b.n	8008d22 <UART_Start_Receive_IT+0xaa>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2260      	movs	r2, #96	@ 0x60
 8008d1e:	2100      	movs	r1, #0
 8008d20:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2290      	movs	r2, #144	@ 0x90
 8008d26:	2100      	movs	r1, #0
 8008d28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	228c      	movs	r2, #140	@ 0x8c
 8008d2e:	2122      	movs	r1, #34	@ 0x22
 8008d30:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d32:	f3ef 8310 	mrs	r3, PRIMASK
 8008d36:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8008d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d42:	f383 8810 	msr	PRIMASK, r3
}
 8008d46:	46c0      	nop			@ (mov r8, r8)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2101      	movs	r1, #1
 8008d54:	430a      	orrs	r2, r1
 8008d56:	609a      	str	r2, [r3, #8]
 8008d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d5e:	f383 8810 	msr	PRIMASK, r3
}
 8008d62:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008d68:	2380      	movs	r3, #128	@ 0x80
 8008d6a:	059b      	lsls	r3, r3, #22
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d150      	bne.n	8008e12 <UART_Start_Receive_IT+0x19a>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2268      	movs	r2, #104	@ 0x68
 8008d74:	5a9b      	ldrh	r3, [r3, r2]
 8008d76:	1dba      	adds	r2, r7, #6
 8008d78:	8812      	ldrh	r2, [r2, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d349      	bcc.n	8008e12 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	2380      	movs	r3, #128	@ 0x80
 8008d84:	015b      	lsls	r3, r3, #5
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d107      	bne.n	8008d9a <UART_Start_Receive_IT+0x122>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d103      	bne.n	8008d9a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4a46      	ldr	r2, [pc, #280]	@ (8008eb0 <UART_Start_Receive_IT+0x238>)
 8008d96:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d98:	e002      	b.n	8008da0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4a45      	ldr	r2, [pc, #276]	@ (8008eb4 <UART_Start_Receive_IT+0x23c>)
 8008d9e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d019      	beq.n	8008ddc <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dac:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8008dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008db0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008db2:	2301      	movs	r3, #1
 8008db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	f383 8810 	msr	PRIMASK, r3
}
 8008dbc:	46c0      	nop			@ (mov r8, r8)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2180      	movs	r1, #128	@ 0x80
 8008dca:	0049      	lsls	r1, r1, #1
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd6:	f383 8810 	msr	PRIMASK, r3
}
 8008dda:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8008de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8008de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008de4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008de6:	2301      	movs	r3, #1
 8008de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	f383 8810 	msr	PRIMASK, r3
}
 8008df0:	46c0      	nop			@ (mov r8, r8)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2180      	movs	r1, #128	@ 0x80
 8008dfe:	0549      	lsls	r1, r1, #21
 8008e00:	430a      	orrs	r2, r1
 8008e02:	609a      	str	r2, [r3, #8]
 8008e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e06:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0a:	f383 8810 	msr	PRIMASK, r3
}
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	e047      	b.n	8008ea2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	2380      	movs	r3, #128	@ 0x80
 8008e18:	015b      	lsls	r3, r3, #5
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d107      	bne.n	8008e2e <UART_Start_Receive_IT+0x1b6>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d103      	bne.n	8008e2e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4a23      	ldr	r2, [pc, #140]	@ (8008eb8 <UART_Start_Receive_IT+0x240>)
 8008e2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e2c:	e002      	b.n	8008e34 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4a22      	ldr	r2, [pc, #136]	@ (8008ebc <UART_Start_Receive_IT+0x244>)
 8008e32:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d019      	beq.n	8008e70 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e40:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e42:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e46:	2301      	movs	r3, #1
 8008e48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	f383 8810 	msr	PRIMASK, r3
}
 8008e50:	46c0      	nop			@ (mov r8, r8)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2190      	movs	r1, #144	@ 0x90
 8008e5e:	0049      	lsls	r1, r1, #1
 8008e60:	430a      	orrs	r2, r1
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	f383 8810 	msr	PRIMASK, r3
}
 8008e6e:	e018      	b.n	8008ea2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e70:	f3ef 8310 	mrs	r3, PRIMASK
 8008e74:	613b      	str	r3, [r7, #16]
  return(result);
 8008e76:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e78:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f383 8810 	msr	PRIMASK, r3
}
 8008e84:	46c0      	nop			@ (mov r8, r8)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2120      	movs	r1, #32
 8008e92:	430a      	orrs	r2, r1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f383 8810 	msr	PRIMASK, r3
}
 8008ea0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	b018      	add	sp, #96	@ 0x60
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	000001ff 	.word	0x000001ff
 8008eb0:	080096dd 	.word	0x080096dd
 8008eb4:	0800939d 	.word	0x0800939d
 8008eb8:	080091d9 	.word	0x080091d9
 8008ebc:	08009015 	.word	0x08009015

08008ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08e      	sub	sp, #56	@ 0x38
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8008ece:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	f383 8810 	msr	PRIMASK, r3
}
 8008edc:	46c0      	nop			@ (mov r8, r8)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4926      	ldr	r1, [pc, #152]	@ (8008f84 <UART_EndRxTransfer+0xc4>)
 8008eea:	400a      	ands	r2, r1
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f383 8810 	msr	PRIMASK, r3
}
 8008ef8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efa:	f3ef 8310 	mrs	r3, PRIMASK
 8008efe:	623b      	str	r3, [r7, #32]
  return(result);
 8008f00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f04:	2301      	movs	r3, #1
 8008f06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	f383 8810 	msr	PRIMASK, r3
}
 8008f0e:	46c0      	nop			@ (mov r8, r8)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	491b      	ldr	r1, [pc, #108]	@ (8008f88 <UART_EndRxTransfer+0xc8>)
 8008f1c:	400a      	ands	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]
 8008f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f26:	f383 8810 	msr	PRIMASK, r3
}
 8008f2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d118      	bne.n	8008f66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f34:	f3ef 8310 	mrs	r3, PRIMASK
 8008f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f3e:	2301      	movs	r3, #1
 8008f40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f383 8810 	msr	PRIMASK, r3
}
 8008f48:	46c0      	nop			@ (mov r8, r8)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2110      	movs	r1, #16
 8008f56:	438a      	bics	r2, r1
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f383 8810 	msr	PRIMASK, r3
}
 8008f64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	228c      	movs	r2, #140	@ 0x8c
 8008f6a:	2120      	movs	r1, #32
 8008f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f7a:	46c0      	nop			@ (mov r8, r8)
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	b00e      	add	sp, #56	@ 0x38
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	46c0      	nop			@ (mov r8, r8)
 8008f84:	fffffedf 	.word	0xfffffedf
 8008f88:	effffffe 	.word	0xeffffffe

08008f8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	225e      	movs	r2, #94	@ 0x5e
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2256      	movs	r2, #86	@ 0x56
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	0018      	movs	r0, r3
 8008fae:	f7ff f9c3 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fb2:	46c0      	nop			@ (mov r8, r8)
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b004      	add	sp, #16
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	2301      	movs	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f383 8810 	msr	PRIMASK, r3
}
 8008fd6:	46c0      	nop			@ (mov r8, r8)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2140      	movs	r1, #64	@ 0x40
 8008fe4:	438a      	bics	r2, r1
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f383 8810 	msr	PRIMASK, r3
}
 8008ff2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2288      	movs	r2, #136	@ 0x88
 8008ff8:	2120      	movs	r1, #32
 8008ffa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	0018      	movs	r0, r3
 8009006:	f7ff f98f 	bl	8008328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800900a:	46c0      	nop			@ (mov r8, r8)
 800900c:	46bd      	mov	sp, r7
 800900e:	b006      	add	sp, #24
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b094      	sub	sp, #80	@ 0x50
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800901c:	204e      	movs	r0, #78	@ 0x4e
 800901e:	183b      	adds	r3, r7, r0
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	2160      	movs	r1, #96	@ 0x60
 8009024:	5a52      	ldrh	r2, [r2, r1]
 8009026:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	228c      	movs	r2, #140	@ 0x8c
 800902c:	589b      	ldr	r3, [r3, r2]
 800902e:	2b22      	cmp	r3, #34	@ 0x22
 8009030:	d000      	beq.n	8009034 <UART_RxISR_8BIT+0x20>
 8009032:	e0bf      	b.n	80091b4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800903a:	214c      	movs	r1, #76	@ 0x4c
 800903c:	187b      	adds	r3, r7, r1
 800903e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009040:	187b      	adds	r3, r7, r1
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b2da      	uxtb	r2, r3
 8009046:	183b      	adds	r3, r7, r0
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	b2d9      	uxtb	r1, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009050:	400a      	ands	r2, r1
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	225e      	movs	r2, #94	@ 0x5e
 8009064:	5a9b      	ldrh	r3, [r3, r2]
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b299      	uxth	r1, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	225e      	movs	r2, #94	@ 0x5e
 8009070:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	225e      	movs	r2, #94	@ 0x5e
 8009076:	5a9b      	ldrh	r3, [r3, r2]
 8009078:	b29b      	uxth	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d000      	beq.n	8009080 <UART_RxISR_8BIT+0x6c>
 800907e:	e0a1      	b.n	80091c4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009080:	f3ef 8310 	mrs	r3, PRIMASK
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800908a:	2301      	movs	r3, #1
 800908c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800908e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009090:	f383 8810 	msr	PRIMASK, r3
}
 8009094:	46c0      	nop			@ (mov r8, r8)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	494a      	ldr	r1, [pc, #296]	@ (80091cc <UART_RxISR_8BIT+0x1b8>)
 80090a2:	400a      	ands	r2, r1
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ac:	f383 8810 	msr	PRIMASK, r3
}
 80090b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b2:	f3ef 8310 	mrs	r3, PRIMASK
 80090b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80090bc:	2301      	movs	r3, #1
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c2:	f383 8810 	msr	PRIMASK, r3
}
 80090c6:	46c0      	nop			@ (mov r8, r8)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2101      	movs	r1, #1
 80090d4:	438a      	bics	r2, r1
 80090d6:	609a      	str	r2, [r3, #8]
 80090d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090da:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090de:	f383 8810 	msr	PRIMASK, r3
}
 80090e2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	228c      	movs	r2, #140	@ 0x8c
 80090e8:	2120      	movs	r1, #32
 80090ea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a34      	ldr	r2, [pc, #208]	@ (80091d0 <UART_RxISR_8BIT+0x1bc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d01f      	beq.n	8009142 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	2380      	movs	r3, #128	@ 0x80
 800910a:	041b      	lsls	r3, r3, #16
 800910c:	4013      	ands	r3, r2
 800910e:	d018      	beq.n	8009142 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009110:	f3ef 8310 	mrs	r3, PRIMASK
 8009114:	61bb      	str	r3, [r7, #24]
  return(result);
 8009116:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009118:	643b      	str	r3, [r7, #64]	@ 0x40
 800911a:	2301      	movs	r3, #1
 800911c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	f383 8810 	msr	PRIMASK, r3
}
 8009124:	46c0      	nop			@ (mov r8, r8)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4928      	ldr	r1, [pc, #160]	@ (80091d4 <UART_RxISR_8BIT+0x1c0>)
 8009132:	400a      	ands	r2, r1
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009138:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	f383 8810 	msr	PRIMASK, r3
}
 8009140:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009146:	2b01      	cmp	r3, #1
 8009148:	d12f      	bne.n	80091aa <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009150:	f3ef 8310 	mrs	r3, PRIMASK
 8009154:	60fb      	str	r3, [r7, #12]
  return(result);
 8009156:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800915a:	2301      	movs	r3, #1
 800915c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f383 8810 	msr	PRIMASK, r3
}
 8009164:	46c0      	nop			@ (mov r8, r8)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2110      	movs	r1, #16
 8009172:	438a      	bics	r2, r1
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f383 8810 	msr	PRIMASK, r3
}
 8009180:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	2210      	movs	r2, #16
 800918a:	4013      	ands	r3, r2
 800918c:	2b10      	cmp	r3, #16
 800918e:	d103      	bne.n	8009198 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2210      	movs	r2, #16
 8009196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	225c      	movs	r2, #92	@ 0x5c
 800919c:	5a9a      	ldrh	r2, [r3, r2]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	0011      	movs	r1, r2
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7ff f8d0 	bl	8008348 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091a8:	e00c      	b.n	80091c4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	0018      	movs	r0, r3
 80091ae:	f7f9 fefd 	bl	8002fac <HAL_UART_RxCpltCallback>
}
 80091b2:	e007      	b.n	80091c4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2108      	movs	r1, #8
 80091c0:	430a      	orrs	r2, r1
 80091c2:	619a      	str	r2, [r3, #24]
}
 80091c4:	46c0      	nop			@ (mov r8, r8)
 80091c6:	46bd      	mov	sp, r7
 80091c8:	b014      	add	sp, #80	@ 0x50
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	fffffedf 	.word	0xfffffedf
 80091d0:	40008000 	.word	0x40008000
 80091d4:	fbffffff 	.word	0xfbffffff

080091d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b094      	sub	sp, #80	@ 0x50
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80091e0:	204e      	movs	r0, #78	@ 0x4e
 80091e2:	183b      	adds	r3, r7, r0
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	2160      	movs	r1, #96	@ 0x60
 80091e8:	5a52      	ldrh	r2, [r2, r1]
 80091ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	228c      	movs	r2, #140	@ 0x8c
 80091f0:	589b      	ldr	r3, [r3, r2]
 80091f2:	2b22      	cmp	r3, #34	@ 0x22
 80091f4:	d000      	beq.n	80091f8 <UART_RxISR_16BIT+0x20>
 80091f6:	e0bf      	b.n	8009378 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091fe:	214c      	movs	r1, #76	@ 0x4c
 8009200:	187b      	adds	r3, r7, r1
 8009202:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009208:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800920a:	187b      	adds	r3, r7, r1
 800920c:	183a      	adds	r2, r7, r0
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	8812      	ldrh	r2, [r2, #0]
 8009212:	4013      	ands	r3, r2
 8009214:	b29a      	uxth	r2, r3
 8009216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009218:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800921e:	1c9a      	adds	r2, r3, #2
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	225e      	movs	r2, #94	@ 0x5e
 8009228:	5a9b      	ldrh	r3, [r3, r2]
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b299      	uxth	r1, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	225e      	movs	r2, #94	@ 0x5e
 8009234:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	225e      	movs	r2, #94	@ 0x5e
 800923a:	5a9b      	ldrh	r3, [r3, r2]
 800923c:	b29b      	uxth	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d000      	beq.n	8009244 <UART_RxISR_16BIT+0x6c>
 8009242:	e0a1      	b.n	8009388 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009244:	f3ef 8310 	mrs	r3, PRIMASK
 8009248:	623b      	str	r3, [r7, #32]
  return(result);
 800924a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800924c:	647b      	str	r3, [r7, #68]	@ 0x44
 800924e:	2301      	movs	r3, #1
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	f383 8810 	msr	PRIMASK, r3
}
 8009258:	46c0      	nop			@ (mov r8, r8)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	494a      	ldr	r1, [pc, #296]	@ (8009390 <UART_RxISR_16BIT+0x1b8>)
 8009266:	400a      	ands	r2, r1
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800926c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	f383 8810 	msr	PRIMASK, r3
}
 8009274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009276:	f3ef 8310 	mrs	r3, PRIMASK
 800927a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800927c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800927e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009280:	2301      	movs	r3, #1
 8009282:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	f383 8810 	msr	PRIMASK, r3
}
 800928a:	46c0      	nop			@ (mov r8, r8)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2101      	movs	r1, #1
 8009298:	438a      	bics	r2, r1
 800929a:	609a      	str	r2, [r3, #8]
 800929c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800929e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a2:	f383 8810 	msr	PRIMASK, r3
}
 80092a6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	228c      	movs	r2, #140	@ 0x8c
 80092ac:	2120      	movs	r1, #32
 80092ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a34      	ldr	r2, [pc, #208]	@ (8009394 <UART_RxISR_16BIT+0x1bc>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d01f      	beq.n	8009306 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	2380      	movs	r3, #128	@ 0x80
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	4013      	ands	r3, r2
 80092d2:	d018      	beq.n	8009306 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d4:	f3ef 8310 	mrs	r3, PRIMASK
 80092d8:	617b      	str	r3, [r7, #20]
  return(result);
 80092da:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092de:	2301      	movs	r3, #1
 80092e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	f383 8810 	msr	PRIMASK, r3
}
 80092e8:	46c0      	nop			@ (mov r8, r8)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4928      	ldr	r1, [pc, #160]	@ (8009398 <UART_RxISR_16BIT+0x1c0>)
 80092f6:	400a      	ands	r2, r1
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	f383 8810 	msr	PRIMASK, r3
}
 8009304:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800930a:	2b01      	cmp	r3, #1
 800930c:	d12f      	bne.n	800936e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009314:	f3ef 8310 	mrs	r3, PRIMASK
 8009318:	60bb      	str	r3, [r7, #8]
  return(result);
 800931a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800931e:	2301      	movs	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f383 8810 	msr	PRIMASK, r3
}
 8009328:	46c0      	nop			@ (mov r8, r8)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2110      	movs	r1, #16
 8009336:	438a      	bics	r2, r1
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f383 8810 	msr	PRIMASK, r3
}
 8009344:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	2210      	movs	r2, #16
 800934e:	4013      	ands	r3, r2
 8009350:	2b10      	cmp	r3, #16
 8009352:	d103      	bne.n	800935c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2210      	movs	r2, #16
 800935a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	225c      	movs	r2, #92	@ 0x5c
 8009360:	5a9a      	ldrh	r2, [r3, r2]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	0011      	movs	r1, r2
 8009366:	0018      	movs	r0, r3
 8009368:	f7fe ffee 	bl	8008348 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800936c:	e00c      	b.n	8009388 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	0018      	movs	r0, r3
 8009372:	f7f9 fe1b 	bl	8002fac <HAL_UART_RxCpltCallback>
}
 8009376:	e007      	b.n	8009388 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699a      	ldr	r2, [r3, #24]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2108      	movs	r1, #8
 8009384:	430a      	orrs	r2, r1
 8009386:	619a      	str	r2, [r3, #24]
}
 8009388:	46c0      	nop			@ (mov r8, r8)
 800938a:	46bd      	mov	sp, r7
 800938c:	b014      	add	sp, #80	@ 0x50
 800938e:	bd80      	pop	{r7, pc}
 8009390:	fffffedf 	.word	0xfffffedf
 8009394:	40008000 	.word	0x40008000
 8009398:	fbffffff 	.word	0xfbffffff

0800939c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b0a0      	sub	sp, #128	@ 0x80
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80093a4:	237a      	movs	r3, #122	@ 0x7a
 80093a6:	18fb      	adds	r3, r7, r3
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	2160      	movs	r1, #96	@ 0x60
 80093ac:	5a52      	ldrh	r2, [r2, r1]
 80093ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	228c      	movs	r2, #140	@ 0x8c
 80093cc:	589b      	ldr	r3, [r3, r2]
 80093ce:	2b22      	cmp	r3, #34	@ 0x22
 80093d0:	d000      	beq.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80093d2:	e16a      	b.n	80096aa <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093d4:	236e      	movs	r3, #110	@ 0x6e
 80093d6:	18fb      	adds	r3, r7, r3
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	2168      	movs	r1, #104	@ 0x68
 80093dc:	5a52      	ldrh	r2, [r2, r1]
 80093de:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093e0:	e111      	b.n	8009606 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093e8:	216c      	movs	r1, #108	@ 0x6c
 80093ea:	187b      	adds	r3, r7, r1
 80093ec:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093ee:	187b      	adds	r3, r7, r1
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	237a      	movs	r3, #122	@ 0x7a
 80093f6:	18fb      	adds	r3, r7, r3
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b2d9      	uxtb	r1, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009400:	400a      	ands	r2, r1
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	225e      	movs	r2, #94	@ 0x5e
 8009414:	5a9b      	ldrh	r3, [r3, r2]
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b299      	uxth	r1, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	225e      	movs	r2, #94	@ 0x5e
 8009420:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800942a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800942c:	2207      	movs	r2, #7
 800942e:	4013      	ands	r3, r2
 8009430:	d049      	beq.n	80094c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009432:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009434:	2201      	movs	r2, #1
 8009436:	4013      	ands	r3, r2
 8009438:	d010      	beq.n	800945c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800943a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800943c:	2380      	movs	r3, #128	@ 0x80
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	4013      	ands	r3, r2
 8009442:	d00b      	beq.n	800945c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2201      	movs	r2, #1
 800944a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2290      	movs	r2, #144	@ 0x90
 8009450:	589b      	ldr	r3, [r3, r2]
 8009452:	2201      	movs	r2, #1
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2190      	movs	r1, #144	@ 0x90
 800945a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800945c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800945e:	2202      	movs	r2, #2
 8009460:	4013      	ands	r3, r2
 8009462:	d00f      	beq.n	8009484 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8009464:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009466:	2201      	movs	r2, #1
 8009468:	4013      	ands	r3, r2
 800946a:	d00b      	beq.n	8009484 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2202      	movs	r2, #2
 8009472:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2290      	movs	r2, #144	@ 0x90
 8009478:	589b      	ldr	r3, [r3, r2]
 800947a:	2204      	movs	r2, #4
 800947c:	431a      	orrs	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2190      	movs	r1, #144	@ 0x90
 8009482:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009486:	2204      	movs	r2, #4
 8009488:	4013      	ands	r3, r2
 800948a:	d00f      	beq.n	80094ac <UART_RxISR_8BIT_FIFOEN+0x110>
 800948c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800948e:	2201      	movs	r2, #1
 8009490:	4013      	ands	r3, r2
 8009492:	d00b      	beq.n	80094ac <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2204      	movs	r2, #4
 800949a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2290      	movs	r2, #144	@ 0x90
 80094a0:	589b      	ldr	r3, [r3, r2]
 80094a2:	2202      	movs	r2, #2
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2190      	movs	r1, #144	@ 0x90
 80094aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2290      	movs	r2, #144	@ 0x90
 80094b0:	589b      	ldr	r3, [r3, r2]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7fe ff3d 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2290      	movs	r2, #144	@ 0x90
 80094c2:	2100      	movs	r1, #0
 80094c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	225e      	movs	r2, #94	@ 0x5e
 80094ca:	5a9b      	ldrh	r3, [r3, r2]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d000      	beq.n	80094d4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80094d2:	e098      	b.n	8009606 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d4:	f3ef 8310 	mrs	r3, PRIMASK
 80094d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80094da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094de:	2301      	movs	r3, #1
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e4:	f383 8810 	msr	PRIMASK, r3
}
 80094e8:	46c0      	nop			@ (mov r8, r8)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4973      	ldr	r1, [pc, #460]	@ (80096c4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80094f6:	400a      	ands	r2, r1
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094fc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009500:	f383 8810 	msr	PRIMASK, r3
}
 8009504:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009506:	f3ef 8310 	mrs	r3, PRIMASK
 800950a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800950c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800950e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009510:	2301      	movs	r3, #1
 8009512:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009516:	f383 8810 	msr	PRIMASK, r3
}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4968      	ldr	r1, [pc, #416]	@ (80096c8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8009528:	400a      	ands	r2, r1
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800952e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009532:	f383 8810 	msr	PRIMASK, r3
}
 8009536:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	228c      	movs	r2, #140	@ 0x8c
 800953c:	2120      	movs	r1, #32
 800953e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a5e      	ldr	r2, [pc, #376]	@ (80096cc <UART_RxISR_8BIT_FIFOEN+0x330>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d01f      	beq.n	8009596 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	2380      	movs	r3, #128	@ 0x80
 800955e:	041b      	lsls	r3, r3, #16
 8009560:	4013      	ands	r3, r2
 8009562:	d018      	beq.n	8009596 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009564:	f3ef 8310 	mrs	r3, PRIMASK
 8009568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800956c:	663b      	str	r3, [r7, #96]	@ 0x60
 800956e:	2301      	movs	r3, #1
 8009570:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	f383 8810 	msr	PRIMASK, r3
}
 8009578:	46c0      	nop			@ (mov r8, r8)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4952      	ldr	r1, [pc, #328]	@ (80096d0 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8009586:	400a      	ands	r2, r1
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800958e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009590:	f383 8810 	msr	PRIMASK, r3
}
 8009594:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800959a:	2b01      	cmp	r3, #1
 800959c:	d12f      	bne.n	80095fe <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a4:	f3ef 8310 	mrs	r3, PRIMASK
 80095a8:	623b      	str	r3, [r7, #32]
  return(result);
 80095aa:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095ae:	2301      	movs	r3, #1
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	f383 8810 	msr	PRIMASK, r3
}
 80095b8:	46c0      	nop			@ (mov r8, r8)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2110      	movs	r1, #16
 80095c6:	438a      	bics	r2, r1
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	f383 8810 	msr	PRIMASK, r3
}
 80095d4:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	2210      	movs	r2, #16
 80095de:	4013      	ands	r3, r2
 80095e0:	2b10      	cmp	r3, #16
 80095e2:	d103      	bne.n	80095ec <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2210      	movs	r2, #16
 80095ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	225c      	movs	r2, #92	@ 0x5c
 80095f0:	5a9a      	ldrh	r2, [r3, r2]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	0011      	movs	r1, r2
 80095f6:	0018      	movs	r0, r3
 80095f8:	f7fe fea6 	bl	8008348 <HAL_UARTEx_RxEventCallback>
 80095fc:	e003      	b.n	8009606 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	0018      	movs	r0, r3
 8009602:	f7f9 fcd3 	bl	8002fac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009606:	236e      	movs	r3, #110	@ 0x6e
 8009608:	18fb      	adds	r3, r7, r3
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8009610:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009612:	2220      	movs	r2, #32
 8009614:	4013      	ands	r3, r2
 8009616:	d000      	beq.n	800961a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8009618:	e6e3      	b.n	80093e2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800961a:	205a      	movs	r0, #90	@ 0x5a
 800961c:	183b      	adds	r3, r7, r0
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	215e      	movs	r1, #94	@ 0x5e
 8009622:	5a52      	ldrh	r2, [r2, r1]
 8009624:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009626:	0001      	movs	r1, r0
 8009628:	187b      	adds	r3, r7, r1
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d044      	beq.n	80096ba <UART_RxISR_8BIT_FIFOEN+0x31e>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2268      	movs	r2, #104	@ 0x68
 8009634:	5a9b      	ldrh	r3, [r3, r2]
 8009636:	187a      	adds	r2, r7, r1
 8009638:	8812      	ldrh	r2, [r2, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d23d      	bcs.n	80096ba <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800963e:	f3ef 8310 	mrs	r3, PRIMASK
 8009642:	60bb      	str	r3, [r7, #8]
  return(result);
 8009644:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009646:	657b      	str	r3, [r7, #84]	@ 0x54
 8009648:	2301      	movs	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f383 8810 	msr	PRIMASK, r3
}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	491d      	ldr	r1, [pc, #116]	@ (80096d4 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8009660:	400a      	ands	r2, r1
 8009662:	609a      	str	r2, [r3, #8]
 8009664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f383 8810 	msr	PRIMASK, r3
}
 800966e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a19      	ldr	r2, [pc, #100]	@ (80096d8 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8009674:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009676:	f3ef 8310 	mrs	r3, PRIMASK
 800967a:	617b      	str	r3, [r7, #20]
  return(result);
 800967c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800967e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009680:	2301      	movs	r3, #1
 8009682:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	f383 8810 	msr	PRIMASK, r3
}
 800968a:	46c0      	nop			@ (mov r8, r8)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2120      	movs	r1, #32
 8009698:	430a      	orrs	r2, r1
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800969e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f383 8810 	msr	PRIMASK, r3
}
 80096a6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096a8:	e007      	b.n	80096ba <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	699a      	ldr	r2, [r3, #24]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2108      	movs	r1, #8
 80096b6:	430a      	orrs	r2, r1
 80096b8:	619a      	str	r2, [r3, #24]
}
 80096ba:	46c0      	nop			@ (mov r8, r8)
 80096bc:	46bd      	mov	sp, r7
 80096be:	b020      	add	sp, #128	@ 0x80
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	46c0      	nop			@ (mov r8, r8)
 80096c4:	fffffeff 	.word	0xfffffeff
 80096c8:	effffffe 	.word	0xeffffffe
 80096cc:	40008000 	.word	0x40008000
 80096d0:	fbffffff 	.word	0xfbffffff
 80096d4:	efffffff 	.word	0xefffffff
 80096d8:	08009015 	.word	0x08009015

080096dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b0a2      	sub	sp, #136	@ 0x88
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80096e4:	2382      	movs	r3, #130	@ 0x82
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	2160      	movs	r1, #96	@ 0x60
 80096ec:	5a52      	ldrh	r2, [r2, r1]
 80096ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	2284      	movs	r2, #132	@ 0x84
 80096f8:	18ba      	adds	r2, r7, r2
 80096fa:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	228c      	movs	r2, #140	@ 0x8c
 8009710:	589b      	ldr	r3, [r3, r2]
 8009712:	2b22      	cmp	r3, #34	@ 0x22
 8009714:	d000      	beq.n	8009718 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8009716:	e174      	b.n	8009a02 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009718:	2376      	movs	r3, #118	@ 0x76
 800971a:	18fb      	adds	r3, r7, r3
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	2168      	movs	r1, #104	@ 0x68
 8009720:	5a52      	ldrh	r2, [r2, r1]
 8009722:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009724:	e119      	b.n	800995a <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800972c:	2174      	movs	r1, #116	@ 0x74
 800972e:	187b      	adds	r3, r7, r1
 8009730:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009736:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8009738:	187b      	adds	r3, r7, r1
 800973a:	2282      	movs	r2, #130	@ 0x82
 800973c:	18ba      	adds	r2, r7, r2
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	8812      	ldrh	r2, [r2, #0]
 8009742:	4013      	ands	r3, r2
 8009744:	b29a      	uxth	r2, r3
 8009746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009748:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800974e:	1c9a      	adds	r2, r3, #2
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	225e      	movs	r2, #94	@ 0x5e
 8009758:	5a9b      	ldrh	r3, [r3, r2]
 800975a:	b29b      	uxth	r3, r3
 800975c:	3b01      	subs	r3, #1
 800975e:	b299      	uxth	r1, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	225e      	movs	r2, #94	@ 0x5e
 8009764:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69db      	ldr	r3, [r3, #28]
 800976c:	2184      	movs	r1, #132	@ 0x84
 800976e:	187a      	adds	r2, r7, r1
 8009770:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009772:	187b      	adds	r3, r7, r1
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2207      	movs	r2, #7
 8009778:	4013      	ands	r3, r2
 800977a:	d04e      	beq.n	800981a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800977c:	187b      	adds	r3, r7, r1
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2201      	movs	r2, #1
 8009782:	4013      	ands	r3, r2
 8009784:	d010      	beq.n	80097a8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8009786:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009788:	2380      	movs	r3, #128	@ 0x80
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	4013      	ands	r3, r2
 800978e:	d00b      	beq.n	80097a8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2201      	movs	r2, #1
 8009796:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2290      	movs	r2, #144	@ 0x90
 800979c:	589b      	ldr	r3, [r3, r2]
 800979e:	2201      	movs	r2, #1
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2190      	movs	r1, #144	@ 0x90
 80097a6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a8:	2384      	movs	r3, #132	@ 0x84
 80097aa:	18fb      	adds	r3, r7, r3
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2202      	movs	r2, #2
 80097b0:	4013      	ands	r3, r2
 80097b2:	d00f      	beq.n	80097d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80097b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097b6:	2201      	movs	r2, #1
 80097b8:	4013      	ands	r3, r2
 80097ba:	d00b      	beq.n	80097d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2202      	movs	r2, #2
 80097c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2290      	movs	r2, #144	@ 0x90
 80097c8:	589b      	ldr	r3, [r3, r2]
 80097ca:	2204      	movs	r2, #4
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2190      	movs	r1, #144	@ 0x90
 80097d2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097d4:	2384      	movs	r3, #132	@ 0x84
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2204      	movs	r2, #4
 80097dc:	4013      	ands	r3, r2
 80097de:	d00f      	beq.n	8009800 <UART_RxISR_16BIT_FIFOEN+0x124>
 80097e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097e2:	2201      	movs	r2, #1
 80097e4:	4013      	ands	r3, r2
 80097e6:	d00b      	beq.n	8009800 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2204      	movs	r2, #4
 80097ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2290      	movs	r2, #144	@ 0x90
 80097f4:	589b      	ldr	r3, [r3, r2]
 80097f6:	2202      	movs	r2, #2
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2190      	movs	r1, #144	@ 0x90
 80097fe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2290      	movs	r2, #144	@ 0x90
 8009804:	589b      	ldr	r3, [r3, r2]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d007      	beq.n	800981a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	0018      	movs	r0, r3
 800980e:	f7fe fd93 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2290      	movs	r2, #144	@ 0x90
 8009816:	2100      	movs	r1, #0
 8009818:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	225e      	movs	r2, #94	@ 0x5e
 800981e:	5a9b      	ldrh	r3, [r3, r2]
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d000      	beq.n	8009828 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8009826:	e098      	b.n	800995a <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009828:	f3ef 8310 	mrs	r3, PRIMASK
 800982c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800982e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009830:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009832:	2301      	movs	r3, #1
 8009834:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009838:	f383 8810 	msr	PRIMASK, r3
}
 800983c:	46c0      	nop			@ (mov r8, r8)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4974      	ldr	r1, [pc, #464]	@ (8009a1c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800984a:	400a      	ands	r2, r1
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009850:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009854:	f383 8810 	msr	PRIMASK, r3
}
 8009858:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800985a:	f3ef 8310 	mrs	r3, PRIMASK
 800985e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009862:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009864:	2301      	movs	r3, #1
 8009866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800986a:	f383 8810 	msr	PRIMASK, r3
}
 800986e:	46c0      	nop			@ (mov r8, r8)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4969      	ldr	r1, [pc, #420]	@ (8009a20 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800987c:	400a      	ands	r2, r1
 800987e:	609a      	str	r2, [r3, #8]
 8009880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009882:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009886:	f383 8810 	msr	PRIMASK, r3
}
 800988a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	228c      	movs	r2, #140	@ 0x8c
 8009890:	2120      	movs	r1, #32
 8009892:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a5f      	ldr	r2, [pc, #380]	@ (8009a24 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d01f      	beq.n	80098ea <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	2380      	movs	r3, #128	@ 0x80
 80098b2:	041b      	lsls	r3, r3, #16
 80098b4:	4013      	ands	r3, r2
 80098b6:	d018      	beq.n	80098ea <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098b8:	f3ef 8310 	mrs	r3, PRIMASK
 80098bc:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80098c2:	2301      	movs	r3, #1
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c8:	f383 8810 	msr	PRIMASK, r3
}
 80098cc:	46c0      	nop			@ (mov r8, r8)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4953      	ldr	r1, [pc, #332]	@ (8009a28 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80098da:	400a      	ands	r2, r1
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e4:	f383 8810 	msr	PRIMASK, r3
}
 80098e8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d12f      	bne.n	8009952 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f8:	f3ef 8310 	mrs	r3, PRIMASK
 80098fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80098fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009900:	663b      	str	r3, [r7, #96]	@ 0x60
 8009902:	2301      	movs	r3, #1
 8009904:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	f383 8810 	msr	PRIMASK, r3
}
 800990c:	46c0      	nop			@ (mov r8, r8)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2110      	movs	r1, #16
 800991a:	438a      	bics	r2, r1
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009924:	f383 8810 	msr	PRIMASK, r3
}
 8009928:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	2210      	movs	r2, #16
 8009932:	4013      	ands	r3, r2
 8009934:	2b10      	cmp	r3, #16
 8009936:	d103      	bne.n	8009940 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2210      	movs	r2, #16
 800993e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	225c      	movs	r2, #92	@ 0x5c
 8009944:	5a9a      	ldrh	r2, [r3, r2]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	0011      	movs	r1, r2
 800994a:	0018      	movs	r0, r3
 800994c:	f7fe fcfc 	bl	8008348 <HAL_UARTEx_RxEventCallback>
 8009950:	e003      	b.n	800995a <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	0018      	movs	r0, r3
 8009956:	f7f9 fb29 	bl	8002fac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800995a:	2376      	movs	r3, #118	@ 0x76
 800995c:	18fb      	adds	r3, r7, r3
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <UART_RxISR_16BIT_FIFOEN+0x296>
 8009964:	2384      	movs	r3, #132	@ 0x84
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2220      	movs	r2, #32
 800996c:	4013      	ands	r3, r2
 800996e:	d000      	beq.n	8009972 <UART_RxISR_16BIT_FIFOEN+0x296>
 8009970:	e6d9      	b.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009972:	205e      	movs	r0, #94	@ 0x5e
 8009974:	183b      	adds	r3, r7, r0
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	215e      	movs	r1, #94	@ 0x5e
 800997a:	5a52      	ldrh	r2, [r2, r1]
 800997c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800997e:	0001      	movs	r1, r0
 8009980:	187b      	adds	r3, r7, r1
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d044      	beq.n	8009a12 <UART_RxISR_16BIT_FIFOEN+0x336>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2268      	movs	r2, #104	@ 0x68
 800998c:	5a9b      	ldrh	r3, [r3, r2]
 800998e:	187a      	adds	r2, r7, r1
 8009990:	8812      	ldrh	r2, [r2, #0]
 8009992:	429a      	cmp	r2, r3
 8009994:	d23d      	bcs.n	8009a12 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009996:	f3ef 8310 	mrs	r3, PRIMASK
 800999a:	60fb      	str	r3, [r7, #12]
  return(result);
 800999c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800999e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099a0:	2301      	movs	r3, #1
 80099a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f383 8810 	msr	PRIMASK, r3
}
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689a      	ldr	r2, [r3, #8]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	491d      	ldr	r1, [pc, #116]	@ (8009a2c <UART_RxISR_16BIT_FIFOEN+0x350>)
 80099b8:	400a      	ands	r2, r1
 80099ba:	609a      	str	r2, [r3, #8]
 80099bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80099be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f383 8810 	msr	PRIMASK, r3
}
 80099c6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a19      	ldr	r2, [pc, #100]	@ (8009a30 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80099cc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ce:	f3ef 8310 	mrs	r3, PRIMASK
 80099d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80099d4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80099d8:	2301      	movs	r3, #1
 80099da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f383 8810 	msr	PRIMASK, r3
}
 80099e2:	46c0      	nop			@ (mov r8, r8)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2120      	movs	r1, #32
 80099f0:	430a      	orrs	r2, r1
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	f383 8810 	msr	PRIMASK, r3
}
 80099fe:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a00:	e007      	b.n	8009a12 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699a      	ldr	r2, [r3, #24]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2108      	movs	r1, #8
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	619a      	str	r2, [r3, #24]
}
 8009a12:	46c0      	nop			@ (mov r8, r8)
 8009a14:	46bd      	mov	sp, r7
 8009a16:	b022      	add	sp, #136	@ 0x88
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	46c0      	nop			@ (mov r8, r8)
 8009a1c:	fffffeff 	.word	0xfffffeff
 8009a20:	effffffe 	.word	0xeffffffe
 8009a24:	40008000 	.word	0x40008000
 8009a28:	fbffffff 	.word	0xfbffffff
 8009a2c:	efffffff 	.word	0xefffffff
 8009a30:	080091d9 	.word	0x080091d9

08009a34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a3c:	46c0      	nop			@ (mov r8, r8)
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a4c:	46c0      	nop			@ (mov r8, r8)
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	b002      	add	sp, #8
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a5c:	46c0      	nop			@ (mov r8, r8)
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b002      	add	sp, #8
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2284      	movs	r2, #132	@ 0x84
 8009a70:	5c9b      	ldrb	r3, [r3, r2]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e027      	b.n	8009aca <HAL_UARTEx_DisableFifoMode+0x66>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2284      	movs	r2, #132	@ 0x84
 8009a7e:	2101      	movs	r1, #1
 8009a80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2288      	movs	r2, #136	@ 0x88
 8009a86:	2124      	movs	r1, #36	@ 0x24
 8009a88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	438a      	bics	r2, r1
 8009aa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8009ad4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2288      	movs	r2, #136	@ 0x88
 8009abc:	2120      	movs	r1, #32
 8009abe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2284      	movs	r2, #132	@ 0x84
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	0018      	movs	r0, r3
 8009acc:	46bd      	mov	sp, r7
 8009ace:	b004      	add	sp, #16
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	46c0      	nop			@ (mov r8, r8)
 8009ad4:	dfffffff 	.word	0xdfffffff

08009ad8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2284      	movs	r2, #132	@ 0x84
 8009ae6:	5c9b      	ldrb	r3, [r3, r2]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d101      	bne.n	8009af0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009aec:	2302      	movs	r3, #2
 8009aee:	e02e      	b.n	8009b4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2284      	movs	r2, #132	@ 0x84
 8009af4:	2101      	movs	r1, #1
 8009af6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2288      	movs	r2, #136	@ 0x88
 8009afc:	2124      	movs	r1, #36	@ 0x24
 8009afe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2101      	movs	r1, #1
 8009b14:	438a      	bics	r2, r1
 8009b16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	08d9      	lsrs	r1, r3, #3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f000 f854 	bl	8009bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2288      	movs	r2, #136	@ 0x88
 8009b40:	2120      	movs	r1, #32
 8009b42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2284      	movs	r2, #132	@ 0x84
 8009b48:	2100      	movs	r1, #0
 8009b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	0018      	movs	r0, r3
 8009b50:	46bd      	mov	sp, r7
 8009b52:	b004      	add	sp, #16
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2284      	movs	r2, #132	@ 0x84
 8009b66:	5c9b      	ldrb	r3, [r3, r2]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d101      	bne.n	8009b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e02f      	b.n	8009bd0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2284      	movs	r2, #132	@ 0x84
 8009b74:	2101      	movs	r1, #1
 8009b76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2288      	movs	r2, #136	@ 0x88
 8009b7c:	2124      	movs	r1, #36	@ 0x24
 8009b7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2101      	movs	r1, #1
 8009b94:	438a      	bics	r2, r1
 8009b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	0019      	movs	r1, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f000 f813 	bl	8009bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2288      	movs	r2, #136	@ 0x88
 8009bc2:	2120      	movs	r1, #32
 8009bc4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2284      	movs	r2, #132	@ 0x84
 8009bca:	2100      	movs	r1, #0
 8009bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	b004      	add	sp, #16
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	f1ffffff 	.word	0xf1ffffff

08009bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d108      	bne.n	8009bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	226a      	movs	r2, #106	@ 0x6a
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2268      	movs	r2, #104	@ 0x68
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bfc:	e043      	b.n	8009c86 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bfe:	260f      	movs	r6, #15
 8009c00:	19bb      	adds	r3, r7, r6
 8009c02:	2208      	movs	r2, #8
 8009c04:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c06:	200e      	movs	r0, #14
 8009c08:	183b      	adds	r3, r7, r0
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	0e5b      	lsrs	r3, r3, #25
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	240d      	movs	r4, #13
 8009c1a:	193b      	adds	r3, r7, r4
 8009c1c:	2107      	movs	r1, #7
 8009c1e:	400a      	ands	r2, r1
 8009c20:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	0f5b      	lsrs	r3, r3, #29
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	250c      	movs	r5, #12
 8009c2e:	197b      	adds	r3, r7, r5
 8009c30:	2107      	movs	r1, #7
 8009c32:	400a      	ands	r2, r1
 8009c34:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c36:	183b      	adds	r3, r7, r0
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	197a      	adds	r2, r7, r5
 8009c3c:	7812      	ldrb	r2, [r2, #0]
 8009c3e:	4914      	ldr	r1, [pc, #80]	@ (8009c90 <UARTEx_SetNbDataToProcess+0xb4>)
 8009c40:	5c8a      	ldrb	r2, [r1, r2]
 8009c42:	435a      	muls	r2, r3
 8009c44:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c46:	197b      	adds	r3, r7, r5
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	4a12      	ldr	r2, [pc, #72]	@ (8009c94 <UARTEx_SetNbDataToProcess+0xb8>)
 8009c4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c4e:	0019      	movs	r1, r3
 8009c50:	f7f6 fafe 	bl	8000250 <__divsi3>
 8009c54:	0003      	movs	r3, r0
 8009c56:	b299      	uxth	r1, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	226a      	movs	r2, #106	@ 0x6a
 8009c5c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c5e:	19bb      	adds	r3, r7, r6
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	193a      	adds	r2, r7, r4
 8009c64:	7812      	ldrb	r2, [r2, #0]
 8009c66:	490a      	ldr	r1, [pc, #40]	@ (8009c90 <UARTEx_SetNbDataToProcess+0xb4>)
 8009c68:	5c8a      	ldrb	r2, [r1, r2]
 8009c6a:	435a      	muls	r2, r3
 8009c6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c6e:	193b      	adds	r3, r7, r4
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	4a08      	ldr	r2, [pc, #32]	@ (8009c94 <UARTEx_SetNbDataToProcess+0xb8>)
 8009c74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c76:	0019      	movs	r1, r3
 8009c78:	f7f6 faea 	bl	8000250 <__divsi3>
 8009c7c:	0003      	movs	r3, r0
 8009c7e:	b299      	uxth	r1, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2268      	movs	r2, #104	@ 0x68
 8009c84:	5299      	strh	r1, [r3, r2]
}
 8009c86:	46c0      	nop			@ (mov r8, r8)
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	b005      	add	sp, #20
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8e:	46c0      	nop			@ (mov r8, r8)
 8009c90:	0800a8ac 	.word	0x0800a8ac
 8009c94:	0800a8b4 	.word	0x0800a8b4

08009c98 <siprintf>:
 8009c98:	b40e      	push	{r1, r2, r3}
 8009c9a:	b500      	push	{lr}
 8009c9c:	490b      	ldr	r1, [pc, #44]	@ (8009ccc <siprintf+0x34>)
 8009c9e:	b09c      	sub	sp, #112	@ 0x70
 8009ca0:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ca2:	9002      	str	r0, [sp, #8]
 8009ca4:	9006      	str	r0, [sp, #24]
 8009ca6:	9107      	str	r1, [sp, #28]
 8009ca8:	9104      	str	r1, [sp, #16]
 8009caa:	4809      	ldr	r0, [pc, #36]	@ (8009cd0 <siprintf+0x38>)
 8009cac:	4909      	ldr	r1, [pc, #36]	@ (8009cd4 <siprintf+0x3c>)
 8009cae:	cb04      	ldmia	r3!, {r2}
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	6800      	ldr	r0, [r0, #0]
 8009cb4:	a902      	add	r1, sp, #8
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	f000 f9b2 	bl	800a020 <_svfiprintf_r>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	701a      	strb	r2, [r3, #0]
 8009cc2:	b01c      	add	sp, #112	@ 0x70
 8009cc4:	bc08      	pop	{r3}
 8009cc6:	b003      	add	sp, #12
 8009cc8:	4718      	bx	r3
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	7fffffff 	.word	0x7fffffff
 8009cd0:	20000070 	.word	0x20000070
 8009cd4:	ffff0208 	.word	0xffff0208

08009cd8 <memset>:
 8009cd8:	0003      	movs	r3, r0
 8009cda:	1882      	adds	r2, r0, r2
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d100      	bne.n	8009ce2 <memset+0xa>
 8009ce0:	4770      	bx	lr
 8009ce2:	7019      	strb	r1, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	e7f9      	b.n	8009cdc <memset+0x4>

08009ce8 <strncpy>:
 8009ce8:	0003      	movs	r3, r0
 8009cea:	b530      	push	{r4, r5, lr}
 8009cec:	001d      	movs	r5, r3
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	d006      	beq.n	8009d00 <strncpy+0x18>
 8009cf2:	780c      	ldrb	r4, [r1, #0]
 8009cf4:	3a01      	subs	r2, #1
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	702c      	strb	r4, [r5, #0]
 8009cfa:	3101      	adds	r1, #1
 8009cfc:	2c00      	cmp	r4, #0
 8009cfe:	d1f5      	bne.n	8009cec <strncpy+0x4>
 8009d00:	2100      	movs	r1, #0
 8009d02:	189a      	adds	r2, r3, r2
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d100      	bne.n	8009d0a <strncpy+0x22>
 8009d08:	bd30      	pop	{r4, r5, pc}
 8009d0a:	7019      	strb	r1, [r3, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	e7f9      	b.n	8009d04 <strncpy+0x1c>

08009d10 <__errno>:
 8009d10:	4b01      	ldr	r3, [pc, #4]	@ (8009d18 <__errno+0x8>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	4770      	bx	lr
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	20000070 	.word	0x20000070

08009d1c <__libc_init_array>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	2600      	movs	r6, #0
 8009d20:	4c0c      	ldr	r4, [pc, #48]	@ (8009d54 <__libc_init_array+0x38>)
 8009d22:	4d0d      	ldr	r5, [pc, #52]	@ (8009d58 <__libc_init_array+0x3c>)
 8009d24:	1b64      	subs	r4, r4, r5
 8009d26:	10a4      	asrs	r4, r4, #2
 8009d28:	42a6      	cmp	r6, r4
 8009d2a:	d109      	bne.n	8009d40 <__libc_init_array+0x24>
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	f000 fc65 	bl	800a5fc <_init>
 8009d32:	4c0a      	ldr	r4, [pc, #40]	@ (8009d5c <__libc_init_array+0x40>)
 8009d34:	4d0a      	ldr	r5, [pc, #40]	@ (8009d60 <__libc_init_array+0x44>)
 8009d36:	1b64      	subs	r4, r4, r5
 8009d38:	10a4      	asrs	r4, r4, #2
 8009d3a:	42a6      	cmp	r6, r4
 8009d3c:	d105      	bne.n	8009d4a <__libc_init_array+0x2e>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	00b3      	lsls	r3, r6, #2
 8009d42:	58eb      	ldr	r3, [r5, r3]
 8009d44:	4798      	blx	r3
 8009d46:	3601      	adds	r6, #1
 8009d48:	e7ee      	b.n	8009d28 <__libc_init_array+0xc>
 8009d4a:	00b3      	lsls	r3, r6, #2
 8009d4c:	58eb      	ldr	r3, [r5, r3]
 8009d4e:	4798      	blx	r3
 8009d50:	3601      	adds	r6, #1
 8009d52:	e7f2      	b.n	8009d3a <__libc_init_array+0x1e>
 8009d54:	0800a8f8 	.word	0x0800a8f8
 8009d58:	0800a8f8 	.word	0x0800a8f8
 8009d5c:	0800a8fc 	.word	0x0800a8fc
 8009d60:	0800a8f8 	.word	0x0800a8f8

08009d64 <__retarget_lock_acquire_recursive>:
 8009d64:	4770      	bx	lr

08009d66 <__retarget_lock_release_recursive>:
 8009d66:	4770      	bx	lr

08009d68 <_free_r>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	0005      	movs	r5, r0
 8009d6c:	1e0c      	subs	r4, r1, #0
 8009d6e:	d010      	beq.n	8009d92 <_free_r+0x2a>
 8009d70:	3c04      	subs	r4, #4
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da00      	bge.n	8009d7a <_free_r+0x12>
 8009d78:	18e4      	adds	r4, r4, r3
 8009d7a:	0028      	movs	r0, r5
 8009d7c:	f000 f8e0 	bl	8009f40 <__malloc_lock>
 8009d80:	4a1d      	ldr	r2, [pc, #116]	@ (8009df8 <_free_r+0x90>)
 8009d82:	6813      	ldr	r3, [r2, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d105      	bne.n	8009d94 <_free_r+0x2c>
 8009d88:	6063      	str	r3, [r4, #4]
 8009d8a:	6014      	str	r4, [r2, #0]
 8009d8c:	0028      	movs	r0, r5
 8009d8e:	f000 f8df 	bl	8009f50 <__malloc_unlock>
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	d908      	bls.n	8009daa <_free_r+0x42>
 8009d98:	6820      	ldr	r0, [r4, #0]
 8009d9a:	1821      	adds	r1, r4, r0
 8009d9c:	428b      	cmp	r3, r1
 8009d9e:	d1f3      	bne.n	8009d88 <_free_r+0x20>
 8009da0:	6819      	ldr	r1, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	1809      	adds	r1, r1, r0
 8009da6:	6021      	str	r1, [r4, #0]
 8009da8:	e7ee      	b.n	8009d88 <_free_r+0x20>
 8009daa:	001a      	movs	r2, r3
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <_free_r+0x4e>
 8009db2:	42a3      	cmp	r3, r4
 8009db4:	d9f9      	bls.n	8009daa <_free_r+0x42>
 8009db6:	6811      	ldr	r1, [r2, #0]
 8009db8:	1850      	adds	r0, r2, r1
 8009dba:	42a0      	cmp	r0, r4
 8009dbc:	d10b      	bne.n	8009dd6 <_free_r+0x6e>
 8009dbe:	6820      	ldr	r0, [r4, #0]
 8009dc0:	1809      	adds	r1, r1, r0
 8009dc2:	1850      	adds	r0, r2, r1
 8009dc4:	6011      	str	r1, [r2, #0]
 8009dc6:	4283      	cmp	r3, r0
 8009dc8:	d1e0      	bne.n	8009d8c <_free_r+0x24>
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	1841      	adds	r1, r0, r1
 8009dd0:	6011      	str	r1, [r2, #0]
 8009dd2:	6053      	str	r3, [r2, #4]
 8009dd4:	e7da      	b.n	8009d8c <_free_r+0x24>
 8009dd6:	42a0      	cmp	r0, r4
 8009dd8:	d902      	bls.n	8009de0 <_free_r+0x78>
 8009dda:	230c      	movs	r3, #12
 8009ddc:	602b      	str	r3, [r5, #0]
 8009dde:	e7d5      	b.n	8009d8c <_free_r+0x24>
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	1821      	adds	r1, r4, r0
 8009de4:	428b      	cmp	r3, r1
 8009de6:	d103      	bne.n	8009df0 <_free_r+0x88>
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	1809      	adds	r1, r1, r0
 8009dee:	6021      	str	r1, [r4, #0]
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	6054      	str	r4, [r2, #4]
 8009df4:	e7ca      	b.n	8009d8c <_free_r+0x24>
 8009df6:	46c0      	nop			@ (mov r8, r8)
 8009df8:	20000588 	.word	0x20000588

08009dfc <sbrk_aligned>:
 8009dfc:	b570      	push	{r4, r5, r6, lr}
 8009dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8009e3c <sbrk_aligned+0x40>)
 8009e00:	000d      	movs	r5, r1
 8009e02:	6831      	ldr	r1, [r6, #0]
 8009e04:	0004      	movs	r4, r0
 8009e06:	2900      	cmp	r1, #0
 8009e08:	d102      	bne.n	8009e10 <sbrk_aligned+0x14>
 8009e0a:	f000 fb99 	bl	800a540 <_sbrk_r>
 8009e0e:	6030      	str	r0, [r6, #0]
 8009e10:	0029      	movs	r1, r5
 8009e12:	0020      	movs	r0, r4
 8009e14:	f000 fb94 	bl	800a540 <_sbrk_r>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d103      	bne.n	8009e24 <sbrk_aligned+0x28>
 8009e1c:	2501      	movs	r5, #1
 8009e1e:	426d      	negs	r5, r5
 8009e20:	0028      	movs	r0, r5
 8009e22:	bd70      	pop	{r4, r5, r6, pc}
 8009e24:	2303      	movs	r3, #3
 8009e26:	1cc5      	adds	r5, r0, #3
 8009e28:	439d      	bics	r5, r3
 8009e2a:	42a8      	cmp	r0, r5
 8009e2c:	d0f8      	beq.n	8009e20 <sbrk_aligned+0x24>
 8009e2e:	1a29      	subs	r1, r5, r0
 8009e30:	0020      	movs	r0, r4
 8009e32:	f000 fb85 	bl	800a540 <_sbrk_r>
 8009e36:	3001      	adds	r0, #1
 8009e38:	d1f2      	bne.n	8009e20 <sbrk_aligned+0x24>
 8009e3a:	e7ef      	b.n	8009e1c <sbrk_aligned+0x20>
 8009e3c:	20000584 	.word	0x20000584

08009e40 <_malloc_r>:
 8009e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e42:	2203      	movs	r2, #3
 8009e44:	1ccb      	adds	r3, r1, #3
 8009e46:	4393      	bics	r3, r2
 8009e48:	3308      	adds	r3, #8
 8009e4a:	0005      	movs	r5, r0
 8009e4c:	001f      	movs	r7, r3
 8009e4e:	2b0c      	cmp	r3, #12
 8009e50:	d234      	bcs.n	8009ebc <_malloc_r+0x7c>
 8009e52:	270c      	movs	r7, #12
 8009e54:	42b9      	cmp	r1, r7
 8009e56:	d833      	bhi.n	8009ec0 <_malloc_r+0x80>
 8009e58:	0028      	movs	r0, r5
 8009e5a:	f000 f871 	bl	8009f40 <__malloc_lock>
 8009e5e:	4e37      	ldr	r6, [pc, #220]	@ (8009f3c <_malloc_r+0xfc>)
 8009e60:	6833      	ldr	r3, [r6, #0]
 8009e62:	001c      	movs	r4, r3
 8009e64:	2c00      	cmp	r4, #0
 8009e66:	d12f      	bne.n	8009ec8 <_malloc_r+0x88>
 8009e68:	0039      	movs	r1, r7
 8009e6a:	0028      	movs	r0, r5
 8009e6c:	f7ff ffc6 	bl	8009dfc <sbrk_aligned>
 8009e70:	0004      	movs	r4, r0
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	d15f      	bne.n	8009f36 <_malloc_r+0xf6>
 8009e76:	6834      	ldr	r4, [r6, #0]
 8009e78:	9400      	str	r4, [sp, #0]
 8009e7a:	9b00      	ldr	r3, [sp, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d14a      	bne.n	8009f16 <_malloc_r+0xd6>
 8009e80:	2c00      	cmp	r4, #0
 8009e82:	d052      	beq.n	8009f2a <_malloc_r+0xea>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	0028      	movs	r0, r5
 8009e88:	18e3      	adds	r3, r4, r3
 8009e8a:	9900      	ldr	r1, [sp, #0]
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	f000 fb57 	bl	800a540 <_sbrk_r>
 8009e92:	9b01      	ldr	r3, [sp, #4]
 8009e94:	4283      	cmp	r3, r0
 8009e96:	d148      	bne.n	8009f2a <_malloc_r+0xea>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	0028      	movs	r0, r5
 8009e9c:	1aff      	subs	r7, r7, r3
 8009e9e:	0039      	movs	r1, r7
 8009ea0:	f7ff ffac 	bl	8009dfc <sbrk_aligned>
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d040      	beq.n	8009f2a <_malloc_r+0xea>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	19db      	adds	r3, r3, r7
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	6833      	ldr	r3, [r6, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	2a00      	cmp	r2, #0
 8009eb4:	d133      	bne.n	8009f1e <_malloc_r+0xde>
 8009eb6:	9b00      	ldr	r3, [sp, #0]
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	e019      	b.n	8009ef0 <_malloc_r+0xb0>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dac9      	bge.n	8009e54 <_malloc_r+0x14>
 8009ec0:	230c      	movs	r3, #12
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ec8:	6821      	ldr	r1, [r4, #0]
 8009eca:	1bc9      	subs	r1, r1, r7
 8009ecc:	d420      	bmi.n	8009f10 <_malloc_r+0xd0>
 8009ece:	290b      	cmp	r1, #11
 8009ed0:	d90a      	bls.n	8009ee8 <_malloc_r+0xa8>
 8009ed2:	19e2      	adds	r2, r4, r7
 8009ed4:	6027      	str	r7, [r4, #0]
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	d104      	bne.n	8009ee4 <_malloc_r+0xa4>
 8009eda:	6032      	str	r2, [r6, #0]
 8009edc:	6863      	ldr	r3, [r4, #4]
 8009ede:	6011      	str	r1, [r2, #0]
 8009ee0:	6053      	str	r3, [r2, #4]
 8009ee2:	e005      	b.n	8009ef0 <_malloc_r+0xb0>
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	e7f9      	b.n	8009edc <_malloc_r+0x9c>
 8009ee8:	6862      	ldr	r2, [r4, #4]
 8009eea:	42a3      	cmp	r3, r4
 8009eec:	d10e      	bne.n	8009f0c <_malloc_r+0xcc>
 8009eee:	6032      	str	r2, [r6, #0]
 8009ef0:	0028      	movs	r0, r5
 8009ef2:	f000 f82d 	bl	8009f50 <__malloc_unlock>
 8009ef6:	0020      	movs	r0, r4
 8009ef8:	2207      	movs	r2, #7
 8009efa:	300b      	adds	r0, #11
 8009efc:	1d23      	adds	r3, r4, #4
 8009efe:	4390      	bics	r0, r2
 8009f00:	1ac2      	subs	r2, r0, r3
 8009f02:	4298      	cmp	r0, r3
 8009f04:	d0df      	beq.n	8009ec6 <_malloc_r+0x86>
 8009f06:	1a1b      	subs	r3, r3, r0
 8009f08:	50a3      	str	r3, [r4, r2]
 8009f0a:	e7dc      	b.n	8009ec6 <_malloc_r+0x86>
 8009f0c:	605a      	str	r2, [r3, #4]
 8009f0e:	e7ef      	b.n	8009ef0 <_malloc_r+0xb0>
 8009f10:	0023      	movs	r3, r4
 8009f12:	6864      	ldr	r4, [r4, #4]
 8009f14:	e7a6      	b.n	8009e64 <_malloc_r+0x24>
 8009f16:	9c00      	ldr	r4, [sp, #0]
 8009f18:	6863      	ldr	r3, [r4, #4]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	e7ad      	b.n	8009e7a <_malloc_r+0x3a>
 8009f1e:	001a      	movs	r2, r3
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	42a3      	cmp	r3, r4
 8009f24:	d1fb      	bne.n	8009f1e <_malloc_r+0xde>
 8009f26:	2300      	movs	r3, #0
 8009f28:	e7da      	b.n	8009ee0 <_malloc_r+0xa0>
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	0028      	movs	r0, r5
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	f000 f80e 	bl	8009f50 <__malloc_unlock>
 8009f34:	e7c6      	b.n	8009ec4 <_malloc_r+0x84>
 8009f36:	6007      	str	r7, [r0, #0]
 8009f38:	e7da      	b.n	8009ef0 <_malloc_r+0xb0>
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	20000588 	.word	0x20000588

08009f40 <__malloc_lock>:
 8009f40:	b510      	push	{r4, lr}
 8009f42:	4802      	ldr	r0, [pc, #8]	@ (8009f4c <__malloc_lock+0xc>)
 8009f44:	f7ff ff0e 	bl	8009d64 <__retarget_lock_acquire_recursive>
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	20000580 	.word	0x20000580

08009f50 <__malloc_unlock>:
 8009f50:	b510      	push	{r4, lr}
 8009f52:	4802      	ldr	r0, [pc, #8]	@ (8009f5c <__malloc_unlock+0xc>)
 8009f54:	f7ff ff07 	bl	8009d66 <__retarget_lock_release_recursive>
 8009f58:	bd10      	pop	{r4, pc}
 8009f5a:	46c0      	nop			@ (mov r8, r8)
 8009f5c:	20000580 	.word	0x20000580

08009f60 <__ssputs_r>:
 8009f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f62:	688e      	ldr	r6, [r1, #8]
 8009f64:	b085      	sub	sp, #20
 8009f66:	001f      	movs	r7, r3
 8009f68:	000c      	movs	r4, r1
 8009f6a:	680b      	ldr	r3, [r1, #0]
 8009f6c:	9002      	str	r0, [sp, #8]
 8009f6e:	9203      	str	r2, [sp, #12]
 8009f70:	42be      	cmp	r6, r7
 8009f72:	d830      	bhi.n	8009fd6 <__ssputs_r+0x76>
 8009f74:	210c      	movs	r1, #12
 8009f76:	5e62      	ldrsh	r2, [r4, r1]
 8009f78:	2190      	movs	r1, #144	@ 0x90
 8009f7a:	00c9      	lsls	r1, r1, #3
 8009f7c:	420a      	tst	r2, r1
 8009f7e:	d028      	beq.n	8009fd2 <__ssputs_r+0x72>
 8009f80:	2003      	movs	r0, #3
 8009f82:	6921      	ldr	r1, [r4, #16]
 8009f84:	1a5b      	subs	r3, r3, r1
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	6963      	ldr	r3, [r4, #20]
 8009f8a:	4343      	muls	r3, r0
 8009f8c:	9801      	ldr	r0, [sp, #4]
 8009f8e:	0fdd      	lsrs	r5, r3, #31
 8009f90:	18ed      	adds	r5, r5, r3
 8009f92:	1c7b      	adds	r3, r7, #1
 8009f94:	181b      	adds	r3, r3, r0
 8009f96:	106d      	asrs	r5, r5, #1
 8009f98:	42ab      	cmp	r3, r5
 8009f9a:	d900      	bls.n	8009f9e <__ssputs_r+0x3e>
 8009f9c:	001d      	movs	r5, r3
 8009f9e:	0552      	lsls	r2, r2, #21
 8009fa0:	d528      	bpl.n	8009ff4 <__ssputs_r+0x94>
 8009fa2:	0029      	movs	r1, r5
 8009fa4:	9802      	ldr	r0, [sp, #8]
 8009fa6:	f7ff ff4b 	bl	8009e40 <_malloc_r>
 8009faa:	1e06      	subs	r6, r0, #0
 8009fac:	d02c      	beq.n	800a008 <__ssputs_r+0xa8>
 8009fae:	9a01      	ldr	r2, [sp, #4]
 8009fb0:	6921      	ldr	r1, [r4, #16]
 8009fb2:	f000 fae2 	bl	800a57a <memcpy>
 8009fb6:	89a2      	ldrh	r2, [r4, #12]
 8009fb8:	4b18      	ldr	r3, [pc, #96]	@ (800a01c <__ssputs_r+0xbc>)
 8009fba:	401a      	ands	r2, r3
 8009fbc:	2380      	movs	r3, #128	@ 0x80
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	6126      	str	r6, [r4, #16]
 8009fc6:	18f6      	adds	r6, r6, r3
 8009fc8:	6026      	str	r6, [r4, #0]
 8009fca:	003e      	movs	r6, r7
 8009fcc:	6165      	str	r5, [r4, #20]
 8009fce:	1aed      	subs	r5, r5, r3
 8009fd0:	60a5      	str	r5, [r4, #8]
 8009fd2:	42be      	cmp	r6, r7
 8009fd4:	d900      	bls.n	8009fd8 <__ssputs_r+0x78>
 8009fd6:	003e      	movs	r6, r7
 8009fd8:	0032      	movs	r2, r6
 8009fda:	9903      	ldr	r1, [sp, #12]
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	f000 fa9b 	bl	800a518 <memmove>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	68a3      	ldr	r3, [r4, #8]
 8009fe6:	1b9b      	subs	r3, r3, r6
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	199b      	adds	r3, r3, r6
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	b005      	add	sp, #20
 8009ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff4:	002a      	movs	r2, r5
 8009ff6:	9802      	ldr	r0, [sp, #8]
 8009ff8:	f000 fac8 	bl	800a58c <_realloc_r>
 8009ffc:	1e06      	subs	r6, r0, #0
 8009ffe:	d1e0      	bne.n	8009fc2 <__ssputs_r+0x62>
 800a000:	6921      	ldr	r1, [r4, #16]
 800a002:	9802      	ldr	r0, [sp, #8]
 800a004:	f7ff feb0 	bl	8009d68 <_free_r>
 800a008:	230c      	movs	r3, #12
 800a00a:	2001      	movs	r0, #1
 800a00c:	9a02      	ldr	r2, [sp, #8]
 800a00e:	4240      	negs	r0, r0
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	89a2      	ldrh	r2, [r4, #12]
 800a014:	3334      	adds	r3, #52	@ 0x34
 800a016:	4313      	orrs	r3, r2
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	e7e9      	b.n	8009ff0 <__ssputs_r+0x90>
 800a01c:	fffffb7f 	.word	0xfffffb7f

0800a020 <_svfiprintf_r>:
 800a020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a022:	b0a1      	sub	sp, #132	@ 0x84
 800a024:	9003      	str	r0, [sp, #12]
 800a026:	001d      	movs	r5, r3
 800a028:	898b      	ldrh	r3, [r1, #12]
 800a02a:	000f      	movs	r7, r1
 800a02c:	0016      	movs	r6, r2
 800a02e:	061b      	lsls	r3, r3, #24
 800a030:	d511      	bpl.n	800a056 <_svfiprintf_r+0x36>
 800a032:	690b      	ldr	r3, [r1, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10e      	bne.n	800a056 <_svfiprintf_r+0x36>
 800a038:	2140      	movs	r1, #64	@ 0x40
 800a03a:	f7ff ff01 	bl	8009e40 <_malloc_r>
 800a03e:	6038      	str	r0, [r7, #0]
 800a040:	6138      	str	r0, [r7, #16]
 800a042:	2800      	cmp	r0, #0
 800a044:	d105      	bne.n	800a052 <_svfiprintf_r+0x32>
 800a046:	230c      	movs	r3, #12
 800a048:	9a03      	ldr	r2, [sp, #12]
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	2001      	movs	r0, #1
 800a04e:	4240      	negs	r0, r0
 800a050:	e0cf      	b.n	800a1f2 <_svfiprintf_r+0x1d2>
 800a052:	2340      	movs	r3, #64	@ 0x40
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	2300      	movs	r3, #0
 800a058:	ac08      	add	r4, sp, #32
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	3320      	adds	r3, #32
 800a05e:	7663      	strb	r3, [r4, #25]
 800a060:	3310      	adds	r3, #16
 800a062:	76a3      	strb	r3, [r4, #26]
 800a064:	9507      	str	r5, [sp, #28]
 800a066:	0035      	movs	r5, r6
 800a068:	782b      	ldrb	r3, [r5, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <_svfiprintf_r+0x52>
 800a06e:	2b25      	cmp	r3, #37	@ 0x25
 800a070:	d148      	bne.n	800a104 <_svfiprintf_r+0xe4>
 800a072:	1bab      	subs	r3, r5, r6
 800a074:	9305      	str	r3, [sp, #20]
 800a076:	42b5      	cmp	r5, r6
 800a078:	d00b      	beq.n	800a092 <_svfiprintf_r+0x72>
 800a07a:	0032      	movs	r2, r6
 800a07c:	0039      	movs	r1, r7
 800a07e:	9803      	ldr	r0, [sp, #12]
 800a080:	f7ff ff6e 	bl	8009f60 <__ssputs_r>
 800a084:	3001      	adds	r0, #1
 800a086:	d100      	bne.n	800a08a <_svfiprintf_r+0x6a>
 800a088:	e0ae      	b.n	800a1e8 <_svfiprintf_r+0x1c8>
 800a08a:	6963      	ldr	r3, [r4, #20]
 800a08c:	9a05      	ldr	r2, [sp, #20]
 800a08e:	189b      	adds	r3, r3, r2
 800a090:	6163      	str	r3, [r4, #20]
 800a092:	782b      	ldrb	r3, [r5, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d100      	bne.n	800a09a <_svfiprintf_r+0x7a>
 800a098:	e0a6      	b.n	800a1e8 <_svfiprintf_r+0x1c8>
 800a09a:	2201      	movs	r2, #1
 800a09c:	2300      	movs	r3, #0
 800a09e:	4252      	negs	r2, r2
 800a0a0:	6062      	str	r2, [r4, #4]
 800a0a2:	a904      	add	r1, sp, #16
 800a0a4:	3254      	adds	r2, #84	@ 0x54
 800a0a6:	1852      	adds	r2, r2, r1
 800a0a8:	1c6e      	adds	r6, r5, #1
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	60e3      	str	r3, [r4, #12]
 800a0ae:	60a3      	str	r3, [r4, #8]
 800a0b0:	7013      	strb	r3, [r2, #0]
 800a0b2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a0b4:	4b54      	ldr	r3, [pc, #336]	@ (800a208 <_svfiprintf_r+0x1e8>)
 800a0b6:	2205      	movs	r2, #5
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	7831      	ldrb	r1, [r6, #0]
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	f000 fa51 	bl	800a564 <memchr>
 800a0c2:	1c75      	adds	r5, r6, #1
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d11f      	bne.n	800a108 <_svfiprintf_r+0xe8>
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	06d3      	lsls	r3, r2, #27
 800a0cc:	d504      	bpl.n	800a0d8 <_svfiprintf_r+0xb8>
 800a0ce:	2353      	movs	r3, #83	@ 0x53
 800a0d0:	a904      	add	r1, sp, #16
 800a0d2:	185b      	adds	r3, r3, r1
 800a0d4:	2120      	movs	r1, #32
 800a0d6:	7019      	strb	r1, [r3, #0]
 800a0d8:	0713      	lsls	r3, r2, #28
 800a0da:	d504      	bpl.n	800a0e6 <_svfiprintf_r+0xc6>
 800a0dc:	2353      	movs	r3, #83	@ 0x53
 800a0de:	a904      	add	r1, sp, #16
 800a0e0:	185b      	adds	r3, r3, r1
 800a0e2:	212b      	movs	r1, #43	@ 0x2b
 800a0e4:	7019      	strb	r1, [r3, #0]
 800a0e6:	7833      	ldrb	r3, [r6, #0]
 800a0e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ea:	d016      	beq.n	800a11a <_svfiprintf_r+0xfa>
 800a0ec:	0035      	movs	r5, r6
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	200a      	movs	r0, #10
 800a0f2:	68e3      	ldr	r3, [r4, #12]
 800a0f4:	782a      	ldrb	r2, [r5, #0]
 800a0f6:	1c6e      	adds	r6, r5, #1
 800a0f8:	3a30      	subs	r2, #48	@ 0x30
 800a0fa:	2a09      	cmp	r2, #9
 800a0fc:	d950      	bls.n	800a1a0 <_svfiprintf_r+0x180>
 800a0fe:	2900      	cmp	r1, #0
 800a100:	d111      	bne.n	800a126 <_svfiprintf_r+0x106>
 800a102:	e017      	b.n	800a134 <_svfiprintf_r+0x114>
 800a104:	3501      	adds	r5, #1
 800a106:	e7af      	b.n	800a068 <_svfiprintf_r+0x48>
 800a108:	9b05      	ldr	r3, [sp, #20]
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	1ac0      	subs	r0, r0, r3
 800a10e:	2301      	movs	r3, #1
 800a110:	4083      	lsls	r3, r0
 800a112:	4313      	orrs	r3, r2
 800a114:	002e      	movs	r6, r5
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	e7cc      	b.n	800a0b4 <_svfiprintf_r+0x94>
 800a11a:	9b07      	ldr	r3, [sp, #28]
 800a11c:	1d19      	adds	r1, r3, #4
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	9107      	str	r1, [sp, #28]
 800a122:	2b00      	cmp	r3, #0
 800a124:	db01      	blt.n	800a12a <_svfiprintf_r+0x10a>
 800a126:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a128:	e004      	b.n	800a134 <_svfiprintf_r+0x114>
 800a12a:	425b      	negs	r3, r3
 800a12c:	60e3      	str	r3, [r4, #12]
 800a12e:	2302      	movs	r3, #2
 800a130:	4313      	orrs	r3, r2
 800a132:	6023      	str	r3, [r4, #0]
 800a134:	782b      	ldrb	r3, [r5, #0]
 800a136:	2b2e      	cmp	r3, #46	@ 0x2e
 800a138:	d10c      	bne.n	800a154 <_svfiprintf_r+0x134>
 800a13a:	786b      	ldrb	r3, [r5, #1]
 800a13c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a13e:	d134      	bne.n	800a1aa <_svfiprintf_r+0x18a>
 800a140:	9b07      	ldr	r3, [sp, #28]
 800a142:	3502      	adds	r5, #2
 800a144:	1d1a      	adds	r2, r3, #4
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	9207      	str	r2, [sp, #28]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	da01      	bge.n	800a152 <_svfiprintf_r+0x132>
 800a14e:	2301      	movs	r3, #1
 800a150:	425b      	negs	r3, r3
 800a152:	9309      	str	r3, [sp, #36]	@ 0x24
 800a154:	4e2d      	ldr	r6, [pc, #180]	@ (800a20c <_svfiprintf_r+0x1ec>)
 800a156:	2203      	movs	r2, #3
 800a158:	0030      	movs	r0, r6
 800a15a:	7829      	ldrb	r1, [r5, #0]
 800a15c:	f000 fa02 	bl	800a564 <memchr>
 800a160:	2800      	cmp	r0, #0
 800a162:	d006      	beq.n	800a172 <_svfiprintf_r+0x152>
 800a164:	2340      	movs	r3, #64	@ 0x40
 800a166:	1b80      	subs	r0, r0, r6
 800a168:	4083      	lsls	r3, r0
 800a16a:	6822      	ldr	r2, [r4, #0]
 800a16c:	3501      	adds	r5, #1
 800a16e:	4313      	orrs	r3, r2
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	7829      	ldrb	r1, [r5, #0]
 800a174:	2206      	movs	r2, #6
 800a176:	4826      	ldr	r0, [pc, #152]	@ (800a210 <_svfiprintf_r+0x1f0>)
 800a178:	1c6e      	adds	r6, r5, #1
 800a17a:	7621      	strb	r1, [r4, #24]
 800a17c:	f000 f9f2 	bl	800a564 <memchr>
 800a180:	2800      	cmp	r0, #0
 800a182:	d038      	beq.n	800a1f6 <_svfiprintf_r+0x1d6>
 800a184:	4b23      	ldr	r3, [pc, #140]	@ (800a214 <_svfiprintf_r+0x1f4>)
 800a186:	2b00      	cmp	r3, #0
 800a188:	d122      	bne.n	800a1d0 <_svfiprintf_r+0x1b0>
 800a18a:	2207      	movs	r2, #7
 800a18c:	9b07      	ldr	r3, [sp, #28]
 800a18e:	3307      	adds	r3, #7
 800a190:	4393      	bics	r3, r2
 800a192:	3308      	adds	r3, #8
 800a194:	9307      	str	r3, [sp, #28]
 800a196:	6963      	ldr	r3, [r4, #20]
 800a198:	9a04      	ldr	r2, [sp, #16]
 800a19a:	189b      	adds	r3, r3, r2
 800a19c:	6163      	str	r3, [r4, #20]
 800a19e:	e762      	b.n	800a066 <_svfiprintf_r+0x46>
 800a1a0:	4343      	muls	r3, r0
 800a1a2:	0035      	movs	r5, r6
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	189b      	adds	r3, r3, r2
 800a1a8:	e7a4      	b.n	800a0f4 <_svfiprintf_r+0xd4>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	200a      	movs	r0, #10
 800a1ae:	0019      	movs	r1, r3
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	6063      	str	r3, [r4, #4]
 800a1b4:	782a      	ldrb	r2, [r5, #0]
 800a1b6:	1c6e      	adds	r6, r5, #1
 800a1b8:	3a30      	subs	r2, #48	@ 0x30
 800a1ba:	2a09      	cmp	r2, #9
 800a1bc:	d903      	bls.n	800a1c6 <_svfiprintf_r+0x1a6>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c8      	beq.n	800a154 <_svfiprintf_r+0x134>
 800a1c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1c4:	e7c6      	b.n	800a154 <_svfiprintf_r+0x134>
 800a1c6:	4341      	muls	r1, r0
 800a1c8:	0035      	movs	r5, r6
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	1889      	adds	r1, r1, r2
 800a1ce:	e7f1      	b.n	800a1b4 <_svfiprintf_r+0x194>
 800a1d0:	aa07      	add	r2, sp, #28
 800a1d2:	9200      	str	r2, [sp, #0]
 800a1d4:	0021      	movs	r1, r4
 800a1d6:	003a      	movs	r2, r7
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a218 <_svfiprintf_r+0x1f8>)
 800a1da:	9803      	ldr	r0, [sp, #12]
 800a1dc:	e000      	b.n	800a1e0 <_svfiprintf_r+0x1c0>
 800a1de:	bf00      	nop
 800a1e0:	9004      	str	r0, [sp, #16]
 800a1e2:	9b04      	ldr	r3, [sp, #16]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	d1d6      	bne.n	800a196 <_svfiprintf_r+0x176>
 800a1e8:	89bb      	ldrh	r3, [r7, #12]
 800a1ea:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a1ec:	065b      	lsls	r3, r3, #25
 800a1ee:	d500      	bpl.n	800a1f2 <_svfiprintf_r+0x1d2>
 800a1f0:	e72c      	b.n	800a04c <_svfiprintf_r+0x2c>
 800a1f2:	b021      	add	sp, #132	@ 0x84
 800a1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f6:	aa07      	add	r2, sp, #28
 800a1f8:	9200      	str	r2, [sp, #0]
 800a1fa:	0021      	movs	r1, r4
 800a1fc:	003a      	movs	r2, r7
 800a1fe:	4b06      	ldr	r3, [pc, #24]	@ (800a218 <_svfiprintf_r+0x1f8>)
 800a200:	9803      	ldr	r0, [sp, #12]
 800a202:	f000 f87b 	bl	800a2fc <_printf_i>
 800a206:	e7eb      	b.n	800a1e0 <_svfiprintf_r+0x1c0>
 800a208:	0800a8bc 	.word	0x0800a8bc
 800a20c:	0800a8c2 	.word	0x0800a8c2
 800a210:	0800a8c6 	.word	0x0800a8c6
 800a214:	00000000 	.word	0x00000000
 800a218:	08009f61 	.word	0x08009f61

0800a21c <_printf_common>:
 800a21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21e:	0016      	movs	r6, r2
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	688a      	ldr	r2, [r1, #8]
 800a224:	690b      	ldr	r3, [r1, #16]
 800a226:	000c      	movs	r4, r1
 800a228:	9000      	str	r0, [sp, #0]
 800a22a:	4293      	cmp	r3, r2
 800a22c:	da00      	bge.n	800a230 <_printf_common+0x14>
 800a22e:	0013      	movs	r3, r2
 800a230:	0022      	movs	r2, r4
 800a232:	6033      	str	r3, [r6, #0]
 800a234:	3243      	adds	r2, #67	@ 0x43
 800a236:	7812      	ldrb	r2, [r2, #0]
 800a238:	2a00      	cmp	r2, #0
 800a23a:	d001      	beq.n	800a240 <_printf_common+0x24>
 800a23c:	3301      	adds	r3, #1
 800a23e:	6033      	str	r3, [r6, #0]
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	069b      	lsls	r3, r3, #26
 800a244:	d502      	bpl.n	800a24c <_printf_common+0x30>
 800a246:	6833      	ldr	r3, [r6, #0]
 800a248:	3302      	adds	r3, #2
 800a24a:	6033      	str	r3, [r6, #0]
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	2306      	movs	r3, #6
 800a250:	0015      	movs	r5, r2
 800a252:	401d      	ands	r5, r3
 800a254:	421a      	tst	r2, r3
 800a256:	d027      	beq.n	800a2a8 <_printf_common+0x8c>
 800a258:	0023      	movs	r3, r4
 800a25a:	3343      	adds	r3, #67	@ 0x43
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	1e5a      	subs	r2, r3, #1
 800a260:	4193      	sbcs	r3, r2
 800a262:	6822      	ldr	r2, [r4, #0]
 800a264:	0692      	lsls	r2, r2, #26
 800a266:	d430      	bmi.n	800a2ca <_printf_common+0xae>
 800a268:	0022      	movs	r2, r4
 800a26a:	9901      	ldr	r1, [sp, #4]
 800a26c:	9800      	ldr	r0, [sp, #0]
 800a26e:	9d08      	ldr	r5, [sp, #32]
 800a270:	3243      	adds	r2, #67	@ 0x43
 800a272:	47a8      	blx	r5
 800a274:	3001      	adds	r0, #1
 800a276:	d025      	beq.n	800a2c4 <_printf_common+0xa8>
 800a278:	2206      	movs	r2, #6
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	2500      	movs	r5, #0
 800a27e:	4013      	ands	r3, r2
 800a280:	2b04      	cmp	r3, #4
 800a282:	d105      	bne.n	800a290 <_printf_common+0x74>
 800a284:	6833      	ldr	r3, [r6, #0]
 800a286:	68e5      	ldr	r5, [r4, #12]
 800a288:	1aed      	subs	r5, r5, r3
 800a28a:	43eb      	mvns	r3, r5
 800a28c:	17db      	asrs	r3, r3, #31
 800a28e:	401d      	ands	r5, r3
 800a290:	68a3      	ldr	r3, [r4, #8]
 800a292:	6922      	ldr	r2, [r4, #16]
 800a294:	4293      	cmp	r3, r2
 800a296:	dd01      	ble.n	800a29c <_printf_common+0x80>
 800a298:	1a9b      	subs	r3, r3, r2
 800a29a:	18ed      	adds	r5, r5, r3
 800a29c:	2600      	movs	r6, #0
 800a29e:	42b5      	cmp	r5, r6
 800a2a0:	d120      	bne.n	800a2e4 <_printf_common+0xc8>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e010      	b.n	800a2c8 <_printf_common+0xac>
 800a2a6:	3501      	adds	r5, #1
 800a2a8:	68e3      	ldr	r3, [r4, #12]
 800a2aa:	6832      	ldr	r2, [r6, #0]
 800a2ac:	1a9b      	subs	r3, r3, r2
 800a2ae:	42ab      	cmp	r3, r5
 800a2b0:	ddd2      	ble.n	800a258 <_printf_common+0x3c>
 800a2b2:	0022      	movs	r2, r4
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	9901      	ldr	r1, [sp, #4]
 800a2b8:	9800      	ldr	r0, [sp, #0]
 800a2ba:	9f08      	ldr	r7, [sp, #32]
 800a2bc:	3219      	adds	r2, #25
 800a2be:	47b8      	blx	r7
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d1f0      	bne.n	800a2a6 <_printf_common+0x8a>
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	4240      	negs	r0, r0
 800a2c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2ca:	2030      	movs	r0, #48	@ 0x30
 800a2cc:	18e1      	adds	r1, r4, r3
 800a2ce:	3143      	adds	r1, #67	@ 0x43
 800a2d0:	7008      	strb	r0, [r1, #0]
 800a2d2:	0021      	movs	r1, r4
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	3145      	adds	r1, #69	@ 0x45
 800a2d8:	7809      	ldrb	r1, [r1, #0]
 800a2da:	18a2      	adds	r2, r4, r2
 800a2dc:	3243      	adds	r2, #67	@ 0x43
 800a2de:	3302      	adds	r3, #2
 800a2e0:	7011      	strb	r1, [r2, #0]
 800a2e2:	e7c1      	b.n	800a268 <_printf_common+0x4c>
 800a2e4:	0022      	movs	r2, r4
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	9901      	ldr	r1, [sp, #4]
 800a2ea:	9800      	ldr	r0, [sp, #0]
 800a2ec:	9f08      	ldr	r7, [sp, #32]
 800a2ee:	321a      	adds	r2, #26
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d0e6      	beq.n	800a2c4 <_printf_common+0xa8>
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	e7d1      	b.n	800a29e <_printf_common+0x82>
	...

0800a2fc <_printf_i>:
 800a2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fe:	b08b      	sub	sp, #44	@ 0x2c
 800a300:	9206      	str	r2, [sp, #24]
 800a302:	000a      	movs	r2, r1
 800a304:	3243      	adds	r2, #67	@ 0x43
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	9005      	str	r0, [sp, #20]
 800a30a:	9203      	str	r2, [sp, #12]
 800a30c:	7e0a      	ldrb	r2, [r1, #24]
 800a30e:	000c      	movs	r4, r1
 800a310:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a312:	2a78      	cmp	r2, #120	@ 0x78
 800a314:	d809      	bhi.n	800a32a <_printf_i+0x2e>
 800a316:	2a62      	cmp	r2, #98	@ 0x62
 800a318:	d80b      	bhi.n	800a332 <_printf_i+0x36>
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	d100      	bne.n	800a320 <_printf_i+0x24>
 800a31e:	e0bc      	b.n	800a49a <_printf_i+0x19e>
 800a320:	497b      	ldr	r1, [pc, #492]	@ (800a510 <_printf_i+0x214>)
 800a322:	9104      	str	r1, [sp, #16]
 800a324:	2a58      	cmp	r2, #88	@ 0x58
 800a326:	d100      	bne.n	800a32a <_printf_i+0x2e>
 800a328:	e090      	b.n	800a44c <_printf_i+0x150>
 800a32a:	0025      	movs	r5, r4
 800a32c:	3542      	adds	r5, #66	@ 0x42
 800a32e:	702a      	strb	r2, [r5, #0]
 800a330:	e022      	b.n	800a378 <_printf_i+0x7c>
 800a332:	0010      	movs	r0, r2
 800a334:	3863      	subs	r0, #99	@ 0x63
 800a336:	2815      	cmp	r0, #21
 800a338:	d8f7      	bhi.n	800a32a <_printf_i+0x2e>
 800a33a:	f7f5 fef5 	bl	8000128 <__gnu_thumb1_case_shi>
 800a33e:	0016      	.short	0x0016
 800a340:	fff6001f 	.word	0xfff6001f
 800a344:	fff6fff6 	.word	0xfff6fff6
 800a348:	001ffff6 	.word	0x001ffff6
 800a34c:	fff6fff6 	.word	0xfff6fff6
 800a350:	fff6fff6 	.word	0xfff6fff6
 800a354:	003600a1 	.word	0x003600a1
 800a358:	fff60080 	.word	0xfff60080
 800a35c:	00b2fff6 	.word	0x00b2fff6
 800a360:	0036fff6 	.word	0x0036fff6
 800a364:	fff6fff6 	.word	0xfff6fff6
 800a368:	0084      	.short	0x0084
 800a36a:	0025      	movs	r5, r4
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	3542      	adds	r5, #66	@ 0x42
 800a370:	1d11      	adds	r1, r2, #4
 800a372:	6019      	str	r1, [r3, #0]
 800a374:	6813      	ldr	r3, [r2, #0]
 800a376:	702b      	strb	r3, [r5, #0]
 800a378:	2301      	movs	r3, #1
 800a37a:	e0a0      	b.n	800a4be <_printf_i+0x1c2>
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	6809      	ldr	r1, [r1, #0]
 800a380:	1d02      	adds	r2, r0, #4
 800a382:	060d      	lsls	r5, r1, #24
 800a384:	d50b      	bpl.n	800a39e <_printf_i+0xa2>
 800a386:	6806      	ldr	r6, [r0, #0]
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	da03      	bge.n	800a396 <_printf_i+0x9a>
 800a38e:	232d      	movs	r3, #45	@ 0x2d
 800a390:	9a03      	ldr	r2, [sp, #12]
 800a392:	4276      	negs	r6, r6
 800a394:	7013      	strb	r3, [r2, #0]
 800a396:	4b5e      	ldr	r3, [pc, #376]	@ (800a510 <_printf_i+0x214>)
 800a398:	270a      	movs	r7, #10
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	e018      	b.n	800a3d0 <_printf_i+0xd4>
 800a39e:	6806      	ldr	r6, [r0, #0]
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	0649      	lsls	r1, r1, #25
 800a3a4:	d5f1      	bpl.n	800a38a <_printf_i+0x8e>
 800a3a6:	b236      	sxth	r6, r6
 800a3a8:	e7ef      	b.n	800a38a <_printf_i+0x8e>
 800a3aa:	6808      	ldr	r0, [r1, #0]
 800a3ac:	6819      	ldr	r1, [r3, #0]
 800a3ae:	c940      	ldmia	r1!, {r6}
 800a3b0:	0605      	lsls	r5, r0, #24
 800a3b2:	d402      	bmi.n	800a3ba <_printf_i+0xbe>
 800a3b4:	0640      	lsls	r0, r0, #25
 800a3b6:	d500      	bpl.n	800a3ba <_printf_i+0xbe>
 800a3b8:	b2b6      	uxth	r6, r6
 800a3ba:	6019      	str	r1, [r3, #0]
 800a3bc:	4b54      	ldr	r3, [pc, #336]	@ (800a510 <_printf_i+0x214>)
 800a3be:	270a      	movs	r7, #10
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	2a6f      	cmp	r2, #111	@ 0x6f
 800a3c4:	d100      	bne.n	800a3c8 <_printf_i+0xcc>
 800a3c6:	3f02      	subs	r7, #2
 800a3c8:	0023      	movs	r3, r4
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	3343      	adds	r3, #67	@ 0x43
 800a3ce:	701a      	strb	r2, [r3, #0]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	60a3      	str	r3, [r4, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	db03      	blt.n	800a3e0 <_printf_i+0xe4>
 800a3d8:	2104      	movs	r1, #4
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	438a      	bics	r2, r1
 800a3de:	6022      	str	r2, [r4, #0]
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	d102      	bne.n	800a3ea <_printf_i+0xee>
 800a3e4:	9d03      	ldr	r5, [sp, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <_printf_i+0x108>
 800a3ea:	9d03      	ldr	r5, [sp, #12]
 800a3ec:	0030      	movs	r0, r6
 800a3ee:	0039      	movs	r1, r7
 800a3f0:	f7f5 ff2a 	bl	8000248 <__aeabi_uidivmod>
 800a3f4:	9b04      	ldr	r3, [sp, #16]
 800a3f6:	3d01      	subs	r5, #1
 800a3f8:	5c5b      	ldrb	r3, [r3, r1]
 800a3fa:	702b      	strb	r3, [r5, #0]
 800a3fc:	0033      	movs	r3, r6
 800a3fe:	0006      	movs	r6, r0
 800a400:	429f      	cmp	r7, r3
 800a402:	d9f3      	bls.n	800a3ec <_printf_i+0xf0>
 800a404:	2f08      	cmp	r7, #8
 800a406:	d109      	bne.n	800a41c <_printf_i+0x120>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d506      	bpl.n	800a41c <_printf_i+0x120>
 800a40e:	6862      	ldr	r2, [r4, #4]
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	429a      	cmp	r2, r3
 800a414:	dc02      	bgt.n	800a41c <_printf_i+0x120>
 800a416:	2330      	movs	r3, #48	@ 0x30
 800a418:	3d01      	subs	r5, #1
 800a41a:	702b      	strb	r3, [r5, #0]
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1b5b      	subs	r3, r3, r5
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	9b07      	ldr	r3, [sp, #28]
 800a424:	0021      	movs	r1, r4
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	9805      	ldr	r0, [sp, #20]
 800a42a:	9b06      	ldr	r3, [sp, #24]
 800a42c:	aa09      	add	r2, sp, #36	@ 0x24
 800a42e:	f7ff fef5 	bl	800a21c <_printf_common>
 800a432:	3001      	adds	r0, #1
 800a434:	d148      	bne.n	800a4c8 <_printf_i+0x1cc>
 800a436:	2001      	movs	r0, #1
 800a438:	4240      	negs	r0, r0
 800a43a:	b00b      	add	sp, #44	@ 0x2c
 800a43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43e:	2220      	movs	r2, #32
 800a440:	6809      	ldr	r1, [r1, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	2278      	movs	r2, #120	@ 0x78
 800a448:	4932      	ldr	r1, [pc, #200]	@ (800a514 <_printf_i+0x218>)
 800a44a:	9104      	str	r1, [sp, #16]
 800a44c:	0021      	movs	r1, r4
 800a44e:	3145      	adds	r1, #69	@ 0x45
 800a450:	700a      	strb	r2, [r1, #0]
 800a452:	6819      	ldr	r1, [r3, #0]
 800a454:	6822      	ldr	r2, [r4, #0]
 800a456:	c940      	ldmia	r1!, {r6}
 800a458:	0610      	lsls	r0, r2, #24
 800a45a:	d402      	bmi.n	800a462 <_printf_i+0x166>
 800a45c:	0650      	lsls	r0, r2, #25
 800a45e:	d500      	bpl.n	800a462 <_printf_i+0x166>
 800a460:	b2b6      	uxth	r6, r6
 800a462:	6019      	str	r1, [r3, #0]
 800a464:	07d3      	lsls	r3, r2, #31
 800a466:	d502      	bpl.n	800a46e <_printf_i+0x172>
 800a468:	2320      	movs	r3, #32
 800a46a:	4313      	orrs	r3, r2
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d001      	beq.n	800a476 <_printf_i+0x17a>
 800a472:	2710      	movs	r7, #16
 800a474:	e7a8      	b.n	800a3c8 <_printf_i+0xcc>
 800a476:	2220      	movs	r2, #32
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	4393      	bics	r3, r2
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	e7f8      	b.n	800a472 <_printf_i+0x176>
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	680d      	ldr	r5, [r1, #0]
 800a484:	1d10      	adds	r0, r2, #4
 800a486:	6949      	ldr	r1, [r1, #20]
 800a488:	6018      	str	r0, [r3, #0]
 800a48a:	6813      	ldr	r3, [r2, #0]
 800a48c:	062e      	lsls	r6, r5, #24
 800a48e:	d501      	bpl.n	800a494 <_printf_i+0x198>
 800a490:	6019      	str	r1, [r3, #0]
 800a492:	e002      	b.n	800a49a <_printf_i+0x19e>
 800a494:	066d      	lsls	r5, r5, #25
 800a496:	d5fb      	bpl.n	800a490 <_printf_i+0x194>
 800a498:	8019      	strh	r1, [r3, #0]
 800a49a:	2300      	movs	r3, #0
 800a49c:	9d03      	ldr	r5, [sp, #12]
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	e7bf      	b.n	800a422 <_printf_i+0x126>
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	1d11      	adds	r1, r2, #4
 800a4a6:	6019      	str	r1, [r3, #0]
 800a4a8:	6815      	ldr	r5, [r2, #0]
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	0028      	movs	r0, r5
 800a4ae:	6862      	ldr	r2, [r4, #4]
 800a4b0:	f000 f858 	bl	800a564 <memchr>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d001      	beq.n	800a4bc <_printf_i+0x1c0>
 800a4b8:	1b40      	subs	r0, r0, r5
 800a4ba:	6060      	str	r0, [r4, #4]
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9a03      	ldr	r2, [sp, #12]
 800a4c4:	7013      	strb	r3, [r2, #0]
 800a4c6:	e7ac      	b.n	800a422 <_printf_i+0x126>
 800a4c8:	002a      	movs	r2, r5
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	9906      	ldr	r1, [sp, #24]
 800a4ce:	9805      	ldr	r0, [sp, #20]
 800a4d0:	9d07      	ldr	r5, [sp, #28]
 800a4d2:	47a8      	blx	r5
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d0ae      	beq.n	800a436 <_printf_i+0x13a>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	079b      	lsls	r3, r3, #30
 800a4dc:	d415      	bmi.n	800a50a <_printf_i+0x20e>
 800a4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e0:	68e0      	ldr	r0, [r4, #12]
 800a4e2:	4298      	cmp	r0, r3
 800a4e4:	daa9      	bge.n	800a43a <_printf_i+0x13e>
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	e7a7      	b.n	800a43a <_printf_i+0x13e>
 800a4ea:	0022      	movs	r2, r4
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	9906      	ldr	r1, [sp, #24]
 800a4f0:	9805      	ldr	r0, [sp, #20]
 800a4f2:	9e07      	ldr	r6, [sp, #28]
 800a4f4:	3219      	adds	r2, #25
 800a4f6:	47b0      	blx	r6
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d09c      	beq.n	800a436 <_printf_i+0x13a>
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	68e3      	ldr	r3, [r4, #12]
 800a500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	42ab      	cmp	r3, r5
 800a506:	dcf0      	bgt.n	800a4ea <_printf_i+0x1ee>
 800a508:	e7e9      	b.n	800a4de <_printf_i+0x1e2>
 800a50a:	2500      	movs	r5, #0
 800a50c:	e7f7      	b.n	800a4fe <_printf_i+0x202>
 800a50e:	46c0      	nop			@ (mov r8, r8)
 800a510:	0800a8cd 	.word	0x0800a8cd
 800a514:	0800a8de 	.word	0x0800a8de

0800a518 <memmove>:
 800a518:	b510      	push	{r4, lr}
 800a51a:	4288      	cmp	r0, r1
 800a51c:	d806      	bhi.n	800a52c <memmove+0x14>
 800a51e:	2300      	movs	r3, #0
 800a520:	429a      	cmp	r2, r3
 800a522:	d008      	beq.n	800a536 <memmove+0x1e>
 800a524:	5ccc      	ldrb	r4, [r1, r3]
 800a526:	54c4      	strb	r4, [r0, r3]
 800a528:	3301      	adds	r3, #1
 800a52a:	e7f9      	b.n	800a520 <memmove+0x8>
 800a52c:	188b      	adds	r3, r1, r2
 800a52e:	4298      	cmp	r0, r3
 800a530:	d2f5      	bcs.n	800a51e <memmove+0x6>
 800a532:	3a01      	subs	r2, #1
 800a534:	d200      	bcs.n	800a538 <memmove+0x20>
 800a536:	bd10      	pop	{r4, pc}
 800a538:	5c8b      	ldrb	r3, [r1, r2]
 800a53a:	5483      	strb	r3, [r0, r2]
 800a53c:	e7f9      	b.n	800a532 <memmove+0x1a>
	...

0800a540 <_sbrk_r>:
 800a540:	2300      	movs	r3, #0
 800a542:	b570      	push	{r4, r5, r6, lr}
 800a544:	4d06      	ldr	r5, [pc, #24]	@ (800a560 <_sbrk_r+0x20>)
 800a546:	0004      	movs	r4, r0
 800a548:	0008      	movs	r0, r1
 800a54a:	602b      	str	r3, [r5, #0]
 800a54c:	f7f9 fa86 	bl	8003a5c <_sbrk>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d103      	bne.n	800a55c <_sbrk_r+0x1c>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d000      	beq.n	800a55c <_sbrk_r+0x1c>
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	46c0      	nop			@ (mov r8, r8)
 800a560:	2000057c 	.word	0x2000057c

0800a564 <memchr>:
 800a564:	b2c9      	uxtb	r1, r1
 800a566:	1882      	adds	r2, r0, r2
 800a568:	4290      	cmp	r0, r2
 800a56a:	d101      	bne.n	800a570 <memchr+0xc>
 800a56c:	2000      	movs	r0, #0
 800a56e:	4770      	bx	lr
 800a570:	7803      	ldrb	r3, [r0, #0]
 800a572:	428b      	cmp	r3, r1
 800a574:	d0fb      	beq.n	800a56e <memchr+0xa>
 800a576:	3001      	adds	r0, #1
 800a578:	e7f6      	b.n	800a568 <memchr+0x4>

0800a57a <memcpy>:
 800a57a:	2300      	movs	r3, #0
 800a57c:	b510      	push	{r4, lr}
 800a57e:	429a      	cmp	r2, r3
 800a580:	d100      	bne.n	800a584 <memcpy+0xa>
 800a582:	bd10      	pop	{r4, pc}
 800a584:	5ccc      	ldrb	r4, [r1, r3]
 800a586:	54c4      	strb	r4, [r0, r3]
 800a588:	3301      	adds	r3, #1
 800a58a:	e7f8      	b.n	800a57e <memcpy+0x4>

0800a58c <_realloc_r>:
 800a58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a58e:	0006      	movs	r6, r0
 800a590:	000c      	movs	r4, r1
 800a592:	0015      	movs	r5, r2
 800a594:	2900      	cmp	r1, #0
 800a596:	d105      	bne.n	800a5a4 <_realloc_r+0x18>
 800a598:	0011      	movs	r1, r2
 800a59a:	f7ff fc51 	bl	8009e40 <_malloc_r>
 800a59e:	0004      	movs	r4, r0
 800a5a0:	0020      	movs	r0, r4
 800a5a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	d103      	bne.n	800a5b0 <_realloc_r+0x24>
 800a5a8:	f7ff fbde 	bl	8009d68 <_free_r>
 800a5ac:	2400      	movs	r4, #0
 800a5ae:	e7f7      	b.n	800a5a0 <_realloc_r+0x14>
 800a5b0:	f000 f81b 	bl	800a5ea <_malloc_usable_size_r>
 800a5b4:	0007      	movs	r7, r0
 800a5b6:	4285      	cmp	r5, r0
 800a5b8:	d802      	bhi.n	800a5c0 <_realloc_r+0x34>
 800a5ba:	0843      	lsrs	r3, r0, #1
 800a5bc:	42ab      	cmp	r3, r5
 800a5be:	d3ef      	bcc.n	800a5a0 <_realloc_r+0x14>
 800a5c0:	0029      	movs	r1, r5
 800a5c2:	0030      	movs	r0, r6
 800a5c4:	f7ff fc3c 	bl	8009e40 <_malloc_r>
 800a5c8:	9001      	str	r0, [sp, #4]
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d0ee      	beq.n	800a5ac <_realloc_r+0x20>
 800a5ce:	002a      	movs	r2, r5
 800a5d0:	42bd      	cmp	r5, r7
 800a5d2:	d900      	bls.n	800a5d6 <_realloc_r+0x4a>
 800a5d4:	003a      	movs	r2, r7
 800a5d6:	0021      	movs	r1, r4
 800a5d8:	9801      	ldr	r0, [sp, #4]
 800a5da:	f7ff ffce 	bl	800a57a <memcpy>
 800a5de:	0021      	movs	r1, r4
 800a5e0:	0030      	movs	r0, r6
 800a5e2:	f7ff fbc1 	bl	8009d68 <_free_r>
 800a5e6:	9c01      	ldr	r4, [sp, #4]
 800a5e8:	e7da      	b.n	800a5a0 <_realloc_r+0x14>

0800a5ea <_malloc_usable_size_r>:
 800a5ea:	1f0b      	subs	r3, r1, #4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	1f18      	subs	r0, r3, #4
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	da01      	bge.n	800a5f8 <_malloc_usable_size_r+0xe>
 800a5f4:	580b      	ldr	r3, [r1, r0]
 800a5f6:	18c0      	adds	r0, r0, r3
 800a5f8:	4770      	bx	lr
	...

0800a5fc <_init>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	46c0      	nop			@ (mov r8, r8)
 800a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a602:	bc08      	pop	{r3}
 800a604:	469e      	mov	lr, r3
 800a606:	4770      	bx	lr

0800a608 <_fini>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	46c0      	nop			@ (mov r8, r8)
 800a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60e:	bc08      	pop	{r3}
 800a610:	469e      	mov	lr, r3
 800a612:	4770      	bx	lr
